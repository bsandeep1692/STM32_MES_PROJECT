
STM32_MES_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060bc  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  0800629c  0800629c  0001629c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006888  08006888  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006888  08006888  00016888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006890  08006890  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006890  08006890  00016890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006894  08006894  00016894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a0c  20000060  080068f8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a6c  080068f8  00020a6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017e7f  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000335f  00000000  00000000  00037f52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  0003b2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001095  00000000  00000000  0003c7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000248db  00000000  00000000  0003d88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019fa2  00000000  00000000  00062168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e22cc  00000000  00000000  0007c10a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c48  00000000  00000000  0015e3d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00164020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006284 	.word	0x08006284

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08006284 	.word	0x08006284

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b970 	b.w	8000528 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	460f      	mov	r7, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d965      	bls.n	8000342 <__udivmoddi4+0xe2>
 8000276:	fab2 f382 	clz	r3, r2
 800027a:	b143      	cbz	r3, 800028e <__udivmoddi4+0x2e>
 800027c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000280:	f1c3 0220 	rsb	r2, r3, #32
 8000284:	409f      	lsls	r7, r3
 8000286:	fa20 f202 	lsr.w	r2, r0, r2
 800028a:	4317      	orrs	r7, r2
 800028c:	409c      	lsls	r4, r3
 800028e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000292:	fa1f f58c 	uxth.w	r5, ip
 8000296:	fbb7 f1fe 	udiv	r1, r7, lr
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	4290      	cmp	r0, r2
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ac:	eb1c 0202 	adds.w	r2, ip, r2
 80002b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b4:	f080 811c 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f240 8119 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002be:	3902      	subs	r1, #2
 80002c0:	4462      	add	r2, ip
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d2:	fb00 f505 	mul.w	r5, r0, r5
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x90>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	f080 8107 	bcs.w	80004f4 <__udivmoddi4+0x294>
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	f240 8104 	bls.w	80004f4 <__udivmoddi4+0x294>
 80002ec:	4464      	add	r4, ip
 80002ee:	3802      	subs	r0, #2
 80002f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f4:	1b64      	subs	r4, r4, r5
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11e      	cbz	r6, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40dc      	lsrs	r4, r3
 80002fc:	2300      	movs	r3, #0
 80002fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0xbc>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80ed 	beq.w	80004ea <__udivmoddi4+0x28a>
 8000310:	2100      	movs	r1, #0
 8000312:	e9c6 0500 	strd	r0, r5, [r6]
 8000316:	4608      	mov	r0, r1
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	fab3 f183 	clz	r1, r3
 8000320:	2900      	cmp	r1, #0
 8000322:	d149      	bne.n	80003b8 <__udivmoddi4+0x158>
 8000324:	42ab      	cmp	r3, r5
 8000326:	d302      	bcc.n	800032e <__udivmoddi4+0xce>
 8000328:	4282      	cmp	r2, r0
 800032a:	f200 80f8 	bhi.w	800051e <__udivmoddi4+0x2be>
 800032e:	1a84      	subs	r4, r0, r2
 8000330:	eb65 0203 	sbc.w	r2, r5, r3
 8000334:	2001      	movs	r0, #1
 8000336:	4617      	mov	r7, r2
 8000338:	2e00      	cmp	r6, #0
 800033a:	d0e2      	beq.n	8000302 <__udivmoddi4+0xa2>
 800033c:	e9c6 4700 	strd	r4, r7, [r6]
 8000340:	e7df      	b.n	8000302 <__udivmoddi4+0xa2>
 8000342:	b902      	cbnz	r2, 8000346 <__udivmoddi4+0xe6>
 8000344:	deff      	udf	#255	; 0xff
 8000346:	fab2 f382 	clz	r3, r2
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8090 	bne.w	8000470 <__udivmoddi4+0x210>
 8000350:	1a8a      	subs	r2, r1, r2
 8000352:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000356:	fa1f fe8c 	uxth.w	lr, ip
 800035a:	2101      	movs	r1, #1
 800035c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000360:	fb07 2015 	mls	r0, r7, r5, r2
 8000364:	0c22      	lsrs	r2, r4, #16
 8000366:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036a:	fb0e f005 	mul.w	r0, lr, r5
 800036e:	4290      	cmp	r0, r2
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x124>
 8000372:	eb1c 0202 	adds.w	r2, ip, r2
 8000376:	f105 38ff 	add.w	r8, r5, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4290      	cmp	r0, r2
 800037e:	f200 80cb 	bhi.w	8000518 <__udivmoddi4+0x2b8>
 8000382:	4645      	mov	r5, r8
 8000384:	1a12      	subs	r2, r2, r0
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb2 f0f7 	udiv	r0, r2, r7
 800038c:	fb07 2210 	mls	r2, r7, r0, r2
 8000390:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	45a6      	cmp	lr, r4
 800039a:	d908      	bls.n	80003ae <__udivmoddi4+0x14e>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a4:	d202      	bcs.n	80003ac <__udivmoddi4+0x14c>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f200 80bb 	bhi.w	8000522 <__udivmoddi4+0x2c2>
 80003ac:	4610      	mov	r0, r2
 80003ae:	eba4 040e 	sub.w	r4, r4, lr
 80003b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b6:	e79f      	b.n	80002f8 <__udivmoddi4+0x98>
 80003b8:	f1c1 0720 	rsb	r7, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	40fd      	lsrs	r5, r7
 80003d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d4:	4323      	orrs	r3, r4
 80003d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	fb09 5518 	mls	r5, r9, r8, r5
 80003e2:	0c1c      	lsrs	r4, r3, #16
 80003e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	fa00 f001 	lsl.w	r0, r0, r1
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000400:	f080 8088 	bcs.w	8000514 <__udivmoddi4+0x2b4>
 8000404:	42a5      	cmp	r5, r4
 8000406:	f240 8085 	bls.w	8000514 <__udivmoddi4+0x2b4>
 800040a:	f1a8 0802 	sub.w	r8, r8, #2
 800040e:	4464      	add	r4, ip
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	b29d      	uxth	r5, r3
 8000414:	fbb4 f3f9 	udiv	r3, r4, r9
 8000418:	fb09 4413 	mls	r4, r9, r3, r4
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	fb03 fe0e 	mul.w	lr, r3, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1c 0404 	adds.w	r4, ip, r4
 800042c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000430:	d26c      	bcs.n	800050c <__udivmoddi4+0x2ac>
 8000432:	45a6      	cmp	lr, r4
 8000434:	d96a      	bls.n	800050c <__udivmoddi4+0x2ac>
 8000436:	3b02      	subs	r3, #2
 8000438:	4464      	add	r4, ip
 800043a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800043e:	fba3 9502 	umull	r9, r5, r3, r2
 8000442:	eba4 040e 	sub.w	r4, r4, lr
 8000446:	42ac      	cmp	r4, r5
 8000448:	46c8      	mov	r8, r9
 800044a:	46ae      	mov	lr, r5
 800044c:	d356      	bcc.n	80004fc <__udivmoddi4+0x29c>
 800044e:	d053      	beq.n	80004f8 <__udivmoddi4+0x298>
 8000450:	b156      	cbz	r6, 8000468 <__udivmoddi4+0x208>
 8000452:	ebb0 0208 	subs.w	r2, r0, r8
 8000456:	eb64 040e 	sbc.w	r4, r4, lr
 800045a:	fa04 f707 	lsl.w	r7, r4, r7
 800045e:	40ca      	lsrs	r2, r1
 8000460:	40cc      	lsrs	r4, r1
 8000462:	4317      	orrs	r7, r2
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	4618      	mov	r0, r3
 800046a:	2100      	movs	r1, #0
 800046c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000470:	f1c3 0120 	rsb	r1, r3, #32
 8000474:	fa02 fc03 	lsl.w	ip, r2, r3
 8000478:	fa20 f201 	lsr.w	r2, r0, r1
 800047c:	fa25 f101 	lsr.w	r1, r5, r1
 8000480:	409d      	lsls	r5, r3
 8000482:	432a      	orrs	r2, r5
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000490:	fb07 1510 	mls	r5, r7, r0, r1
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800049a:	fb00 f50e 	mul.w	r5, r0, lr
 800049e:	428d      	cmp	r5, r1
 80004a0:	fa04 f403 	lsl.w	r4, r4, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x258>
 80004a6:	eb1c 0101 	adds.w	r1, ip, r1
 80004aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ae:	d22f      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004b0:	428d      	cmp	r5, r1
 80004b2:	d92d      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004b4:	3802      	subs	r0, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1b49      	subs	r1, r1, r5
 80004ba:	b292      	uxth	r2, r2
 80004bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c0:	fb07 1115 	mls	r1, r7, r5, r1
 80004c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c8:	fb05 f10e 	mul.w	r1, r5, lr
 80004cc:	4291      	cmp	r1, r2
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x282>
 80004d0:	eb1c 0202 	adds.w	r2, ip, r2
 80004d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d8:	d216      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 80004da:	4291      	cmp	r1, r2
 80004dc:	d914      	bls.n	8000508 <__udivmoddi4+0x2a8>
 80004de:	3d02      	subs	r5, #2
 80004e0:	4462      	add	r2, ip
 80004e2:	1a52      	subs	r2, r2, r1
 80004e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e8:	e738      	b.n	800035c <__udivmoddi4+0xfc>
 80004ea:	4631      	mov	r1, r6
 80004ec:	4630      	mov	r0, r6
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xa2>
 80004f0:	4639      	mov	r1, r7
 80004f2:	e6e6      	b.n	80002c2 <__udivmoddi4+0x62>
 80004f4:	4610      	mov	r0, r2
 80004f6:	e6fb      	b.n	80002f0 <__udivmoddi4+0x90>
 80004f8:	4548      	cmp	r0, r9
 80004fa:	d2a9      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000500:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000504:	3b01      	subs	r3, #1
 8000506:	e7a3      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000508:	4645      	mov	r5, r8
 800050a:	e7ea      	b.n	80004e2 <__udivmoddi4+0x282>
 800050c:	462b      	mov	r3, r5
 800050e:	e794      	b.n	800043a <__udivmoddi4+0x1da>
 8000510:	4640      	mov	r0, r8
 8000512:	e7d1      	b.n	80004b8 <__udivmoddi4+0x258>
 8000514:	46d0      	mov	r8, sl
 8000516:	e77b      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000518:	3d02      	subs	r5, #2
 800051a:	4462      	add	r2, ip
 800051c:	e732      	b.n	8000384 <__udivmoddi4+0x124>
 800051e:	4608      	mov	r0, r1
 8000520:	e70a      	b.n	8000338 <__udivmoddi4+0xd8>
 8000522:	4464      	add	r4, ip
 8000524:	3802      	subs	r0, #2
 8000526:	e742      	b.n	80003ae <__udivmoddi4+0x14e>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 800053a:	2300      	movs	r3, #0
 800053c:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 800053e:	683a      	ldr	r2, [r7, #0]
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	4413      	add	r3, r2
 8000544:	781a      	ldrb	r2, [r3, #0]
 8000546:	6879      	ldr	r1, [r7, #4]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	440b      	add	r3, r1
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	429a      	cmp	r2, r3
 8000550:	d114      	bne.n	800057c <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 8000552:	2301      	movs	r3, #1
 8000554:	60bb      	str	r3, [r7, #8]
		i++;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	3301      	adds	r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 800055c:	e00e      	b.n	800057c <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 800055e:	683a      	ldr	r2, [r7, #0]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	4413      	add	r3, r2
 8000564:	781a      	ldrb	r2, [r3, #0]
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	440b      	add	r3, r1
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	429a      	cmp	r2, r3
 8000570:	d001      	beq.n	8000576 <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
		}
		i++;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	3301      	adds	r3, #1
 800057a:	60fb      	str	r3, [r7, #12]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800057c:	68bb      	ldr	r3, [r7, #8]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d11a      	bne.n	80005b8 <ConsoleCommandMatch+0x8c>
	while ( ( 1u == result ) &&
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2b09      	cmp	r3, #9
 8000586:	d817      	bhi.n	80005b8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 8000588:	683a      	ldr	r2, [r7, #0]
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	4413      	add	r3, r2
 800058e:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 8000590:	2b20      	cmp	r3, #32
 8000592:	d011      	beq.n	80005b8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	4413      	add	r3, r2
 800059a:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 800059c:	2b0a      	cmp	r3, #10
 800059e:	d00b      	beq.n	80005b8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005a0:	683a      	ldr	r2, [r7, #0]
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	4413      	add	r3, r2
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b0d      	cmp	r3, #13
 80005aa:	d005      	beq.n	80005b8 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 80005ac:	683a      	ldr	r2, [r7, #0]
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	4413      	add	r3, r2
 80005b2:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d1d2      	bne.n	800055e <ConsoleCommandMatch+0x32>
	}

	return result;
 80005b8:	68bb      	ldr	r3, [r7, #8]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b087      	sub	sp, #28
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	60f8      	str	r0, [r7, #12]
 80005ce:	60b9      	str	r1, [r7, #8]
 80005d0:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 80005de:	e00d      	b.n	80005fc <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	441a      	add	r2, r3
 80005e6:	68f9      	ldr	r1, [r7, #12]
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	440b      	add	r3, r1
 80005ec:	7812      	ldrb	r2, [r2, #0]
 80005ee:	701a      	strb	r2, [r3, #0]
		i++;
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	3301      	adds	r3, #1
 80005f4:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	3301      	adds	r3, #1
 80005fa:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	429a      	cmp	r2, r3
 8000602:	d3ed      	bcc.n	80005e0 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000604:	e007      	b.n	8000616 <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 8000606:	68fa      	ldr	r2, [r7, #12]
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	4413      	add	r3, r2
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	3301      	adds	r3, #1
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	2bff      	cmp	r3, #255	; 0xff
 800061a:	d9f4      	bls.n	8000606 <ConsoleResetBuffer+0x40>
	}
	return remaining;
 800061c:	693b      	ldr	r3, [r7, #16]
}
 800061e:	4618      	mov	r0, r3
 8000620:	371c      	adds	r7, #28
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 800062a:	b480      	push	{r7}
 800062c:	b085      	sub	sp, #20
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
 8000632:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 800063e:	e002      	b.n	8000646 <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	3301      	adds	r3, #1
 8000644:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	4413      	add	r3, r2
 800064c:	781b      	ldrb	r3, [r3, #0]
			&& ( i < filledLength ) )
 800064e:	2b0d      	cmp	r3, #13
 8000650:	d009      	beq.n	8000666 <ConsoleCommandEndline+0x3c>
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	4413      	add	r3, r2
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b0a      	cmp	r3, #10
 800065c:	d003      	beq.n	8000666 <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	429a      	cmp	r2, r3
 8000664:	d3ec      	bcc.n	8000640 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	429a      	cmp	r2, r3
 800066c:	d201      	bcs.n	8000672 <ConsoleCommandEndline+0x48>
	{
		result = i;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	60bb      	str	r3, [r7, #8]
	}
	return result;
 8000672:	68bb      	ldr	r3, [r7, #8]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8000686:	f000 fc09 	bl	8000e9c <ConsoleIoInit>
	ConsoleIoSendString("Welcome to Sandeep's console.");
 800068a:	480f      	ldr	r0, [pc, #60]	; (80006c8 <ConsoleInit+0x48>)
 800068c:	f000 fc84 	bl	8000f98 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000690:	480e      	ldr	r0, [pc, #56]	; (80006cc <ConsoleInit+0x4c>)
 8000692:	f000 fc81 	bl	8000f98 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000696:	480e      	ldr	r0, [pc, #56]	; (80006d0 <ConsoleInit+0x50>)
 8000698:	f000 fc7e 	bl	8000f98 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 800069c:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <ConsoleInit+0x54>)
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	e007      	b.n	80006b8 <ConsoleInit+0x38>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 80006a8:	4a0b      	ldr	r2, [pc, #44]	; (80006d8 <ConsoleInit+0x58>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4413      	add	r3, r2
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	3301      	adds	r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2bff      	cmp	r3, #255	; 0xff
 80006bc:	d9f4      	bls.n	80006a8 <ConsoleInit+0x28>
	}

}
 80006be:	bf00      	nop
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	0800629c 	.word	0x0800629c
 80006cc:	080062bc 	.word	0x080062bc
 80006d0:	080062c0 	.word	0x080062c0
 80006d4:	2000017c 	.word	0x2000017c
 80006d8:	2000007c 	.word	0x2000007c

080006dc <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 80006e2:	4b54      	ldr	r3, [pc, #336]	; (8000834 <ConsoleProcess+0x158>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a54      	ldr	r2, [pc, #336]	; (8000838 <ConsoleProcess+0x15c>)
 80006e8:	1898      	adds	r0, r3, r2
 80006ea:	4b52      	ldr	r3, [pc, #328]	; (8000834 <ConsoleProcess+0x158>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80006f2:	463a      	mov	r2, r7
 80006f4:	4619      	mov	r1, r3
 80006f6:	f000 fc1b 	bl	8000f30 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d104      	bne.n	800070a <ConsoleProcess+0x2e>
 8000700:	4b4e      	ldr	r3, [pc, #312]	; (800083c <ConsoleProcess+0x160>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	f000 8091 	beq.w	800082c <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 800070a:	4b4c      	ldr	r3, [pc, #304]	; (800083c <ConsoleProcess+0x160>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 8000710:	4b48      	ldr	r3, [pc, #288]	; (8000834 <ConsoleProcess+0x158>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	4413      	add	r3, r2
 8000718:	4a46      	ldr	r2, [pc, #280]	; (8000834 <ConsoleProcess+0x158>)
 800071a:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 800071c:	4b45      	ldr	r3, [pc, #276]	; (8000834 <ConsoleProcess+0x158>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4619      	mov	r1, r3
 8000722:	4845      	ldr	r0, [pc, #276]	; (8000838 <ConsoleProcess+0x15c>)
 8000724:	f7ff ff81 	bl	800062a <ConsoleCommandEndline>
 8000728:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	2b00      	cmp	r3, #0
 800072e:	db7d      	blt.n	800082c <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 8000730:	f000 fbaa 	bl	8000e88 <ConsoleCommandsGetTable>
 8000734:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 800073a:	f04f 33ff 	mov.w	r3, #4294967295
 800073e:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000740:	e03d      	b.n	80007be <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 8000742:	697a      	ldr	r2, [r7, #20]
 8000744:	4613      	mov	r3, r2
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	4413      	add	r3, r2
 800074a:	00db      	lsls	r3, r3, #3
 800074c:	461a      	mov	r2, r3
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	4413      	add	r3, r2
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4938      	ldr	r1, [pc, #224]	; (8000838 <ConsoleProcess+0x15c>)
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff fee8 	bl	800052c <ConsoleCommandMatch>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d02a      	beq.n	80007b8 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 8000762:	697a      	ldr	r2, [r7, #20]
 8000764:	4613      	mov	r3, r2
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	4413      	add	r3, r2
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	461a      	mov	r2, r3
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	4413      	add	r3, r2
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	4830      	ldr	r0, [pc, #192]	; (8000838 <ConsoleProcess+0x15c>)
 8000776:	4798      	blx	r3
 8000778:	4603      	mov	r3, r0
 800077a:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d017      	beq.n	80007b2 <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 8000782:	482f      	ldr	r0, [pc, #188]	; (8000840 <ConsoleProcess+0x164>)
 8000784:	f000 fc08 	bl	8000f98 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 8000788:	482b      	ldr	r0, [pc, #172]	; (8000838 <ConsoleProcess+0x15c>)
 800078a:	f000 fc05 	bl	8000f98 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 800078e:	482d      	ldr	r0, [pc, #180]	; (8000844 <ConsoleProcess+0x168>)
 8000790:	f000 fc02 	bl	8000f98 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000794:	697a      	ldr	r2, [r7, #20]
 8000796:	4613      	mov	r3, r2
 8000798:	00db      	lsls	r3, r3, #3
 800079a:	4413      	add	r3, r2
 800079c:	00db      	lsls	r3, r3, #3
 800079e:	461a      	mov	r2, r3
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	4413      	add	r3, r2
 80007a4:	3308      	adds	r3, #8
 80007a6:	4618      	mov	r0, r3
 80007a8:	f000 fbf6 	bl	8000f98 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 80007ac:	4826      	ldr	r0, [pc, #152]	; (8000848 <ConsoleProcess+0x16c>)
 80007ae:	f000 fbf3 	bl	8000f98 <ConsoleIoSendString>

					}
					found = cmdIndex;
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	613b      	str	r3, [r7, #16]
 80007b6:	e002      	b.n	80007be <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	3301      	adds	r3, #1
 80007bc:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007be:	697a      	ldr	r2, [r7, #20]
 80007c0:	4613      	mov	r3, r2
 80007c2:	00db      	lsls	r3, r3, #3
 80007c4:	4413      	add	r3, r2
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	461a      	mov	r2, r3
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	4413      	add	r3, r2
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d003      	beq.n	80007dc <ConsoleProcess+0x100>
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007da:	d0b2      	beq.n	8000742 <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d00d      	beq.n	80007fe <ConsoleProcess+0x122>
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007e8:	d109      	bne.n	80007fe <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <ConsoleProcess+0x158>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d905      	bls.n	80007fe <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 80007f2:	4816      	ldr	r0, [pc, #88]	; (800084c <ConsoleProcess+0x170>)
 80007f4:	f000 fbd0 	bl	8000f98 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 80007f8:	4813      	ldr	r0, [pc, #76]	; (8000848 <ConsoleProcess+0x16c>)
 80007fa:	f000 fbcd 	bl	8000f98 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 80007fe:	4b0d      	ldr	r3, [pc, #52]	; (8000834 <ConsoleProcess+0x158>)
 8000800:	6819      	ldr	r1, [r3, #0]
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	3301      	adds	r3, #1
 8000806:	461a      	mov	r2, r3
 8000808:	480b      	ldr	r0, [pc, #44]	; (8000838 <ConsoleProcess+0x15c>)
 800080a:	f7ff fedc 	bl	80005c6 <ConsoleResetBuffer>
 800080e:	4603      	mov	r3, r0
 8000810:	4a08      	ldr	r2, [pc, #32]	; (8000834 <ConsoleProcess+0x158>)
 8000812:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <ConsoleProcess+0x158>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	bf14      	ite	ne
 800081c:	2301      	movne	r3, #1
 800081e:	2300      	moveq	r3, #0
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <ConsoleProcess+0x160>)
 8000824:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000826:	480a      	ldr	r0, [pc, #40]	; (8000850 <ConsoleProcess+0x174>)
 8000828:	f000 fbb6 	bl	8000f98 <ConsoleIoSendString>
		}
	}
}
 800082c:	bf00      	nop
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2000017c 	.word	0x2000017c
 8000838:	2000007c 	.word	0x2000007c
 800083c:	20000180 	.word	0x20000180
 8000840:	080062c4 	.word	0x080062c4
 8000844:	080062cc 	.word	0x080062cc
 8000848:	080062bc 	.word	0x080062bc
 800084c:	080062d4 	.word	0x080062d4
 8000850:	080062c0 	.word	0x080062c0

08000854 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8000854:	b480      	push	{r7}
 8000856:	b089      	sub	sp, #36	; 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	460b      	mov	r3, r1
 800085e:	607a      	str	r2, [r7, #4]
 8000860:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 800086a:	2300      	movs	r3, #0
 800086c:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 800086e:	e00b      	b.n	8000888 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 8000870:	68fa      	ldr	r2, [r7, #12]
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	4413      	add	r3, r2
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b20      	cmp	r3, #32
 800087a:	d102      	bne.n	8000882 <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	3301      	adds	r3, #1
 8000880:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	3301      	adds	r3, #1
 8000886:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8000888:	7afb      	ldrb	r3, [r7, #11]
 800088a:	69ba      	ldr	r2, [r7, #24]
 800088c:	429a      	cmp	r2, r3
 800088e:	d002      	beq.n	8000896 <ConsoleParamFindN+0x42>
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	2bff      	cmp	r3, #255	; 0xff
 8000894:	d9ec      	bls.n	8000870 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800089c:	d102      	bne.n	80008a4 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 800089e:	2310      	movs	r3, #16
 80008a0:	75fb      	strb	r3, [r7, #23]
 80008a2:	e002      	b.n	80008aa <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	69fa      	ldr	r2, [r7, #28]
 80008a8:	601a      	str	r2, [r3, #0]
	}
	return result;
 80008aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3724      	adds	r7, #36	; 0x24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	460b      	mov	r3, r1
 80008c2:	607a      	str	r2, [r7, #4]
 80008c4:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80008ca:	f107 021c 	add.w	r2, r7, #28
 80008ce:	7afb      	ldrb	r3, [r7, #11]
 80008d0:	4619      	mov	r1, r3
 80008d2:	68f8      	ldr	r0, [r7, #12]
 80008d4:	f7ff ffbe 	bl	8000854 <ConsoleParamFindN>
 80008d8:	4603      	mov	r3, r0
 80008da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 80008e2:	69fa      	ldr	r2, [r7, #28]
 80008e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e6:	4413      	add	r3, r2
 80008e8:	68fa      	ldr	r2, [r7, #12]
 80008ea:	4413      	add	r3, r2
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 80008f2:	e011      	b.n	8000918 <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 80008f4:	f107 0214 	add.w	r2, r7, #20
 80008f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fa:	4413      	add	r3, r2
 80008fc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000900:	701a      	strb	r2, [r3, #0]
		i++;
 8000902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000904:	3301      	adds	r3, #1
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000908:	69fa      	ldr	r2, [r7, #28]
 800090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090c:	4413      	add	r3, r2
 800090e:	68fa      	ldr	r2, [r7, #12]
 8000910:	4413      	add	r3, r2
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8000918:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800091c:	2b0a      	cmp	r3, #10
 800091e:	d00a      	beq.n	8000936 <ConsoleReceiveParamInt16+0x7e>
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000920:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000924:	2b0d      	cmp	r3, #13
 8000926:	d006      	beq.n	8000936 <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000928:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800092c:	2b20      	cmp	r3, #32
 800092e:	d002      	beq.n	8000936 <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8000930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000932:	2b07      	cmp	r3, #7
 8000934:	d9de      	bls.n	80008f4 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 8000936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000938:	2b08      	cmp	r3, #8
 800093a:	d102      	bne.n	8000942 <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 800093c:	2310      	movs	r3, #16
 800093e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8000942:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000946:	2b00      	cmp	r3, #0
 8000948:	d10e      	bne.n	8000968 <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 800094a:	f107 0214 	add.w	r2, r7, #20
 800094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000950:	4413      	add	r3, r2
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	4618      	mov	r0, r3
 800095c:	f005 fbc2 	bl	80060e4 <atoi>
 8000960:	4603      	mov	r3, r0
 8000962:	b21a      	sxth	r2, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000968:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800096c:	4618      	mov	r0, r3
 800096e:	3728      	adds	r7, #40	; 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	460b      	mov	r3, r1
 800097e:	607a      	str	r2, [r7, #4]
 8000980:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 800098a:	f107 0218 	add.w	r2, r7, #24
 800098e:	7afb      	ldrb	r3, [r7, #11]
 8000990:	4619      	mov	r1, r3
 8000992:	68f8      	ldr	r0, [r7, #12]
 8000994:	f7ff ff5e 	bl	8000854 <ConsoleParamFindN>
 8000998:	4603      	mov	r3, r0
 800099a:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 800099c:	7ffb      	ldrb	r3, [r7, #31]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d12c      	bne.n	80009fc <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 80009a2:	2300      	movs	r3, #0
 80009a4:	623b      	str	r3, [r7, #32]
 80009a6:	e01e      	b.n	80009e6 <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 80009a8:	7ffb      	ldrb	r3, [r7, #31]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d10d      	bne.n	80009ca <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 80009ae:	69ba      	ldr	r2, [r7, #24]
 80009b0:	6a3b      	ldr	r3, [r7, #32]
 80009b2:	4413      	add	r3, r2
 80009b4:	68fa      	ldr	r2, [r7, #12]
 80009b6:	4413      	add	r3, r2
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	f107 0217 	add.w	r2, r7, #23
 80009be:	4611      	mov	r1, r2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 f8c5 	bl	8000b50 <ConsoleUtilHexCharToInt>
 80009c6:	4603      	mov	r3, r0
 80009c8:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 80009ca:	7ffb      	ldrb	r3, [r7, #31]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d107      	bne.n	80009e0 <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 80009d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009d2:	011b      	lsls	r3, r3, #4
 80009d4:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 80009d6:	7dfb      	ldrb	r3, [r7, #23]
 80009d8:	b29a      	uxth	r2, r3
 80009da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80009dc:	4413      	add	r3, r2
 80009de:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 80009e0:	6a3b      	ldr	r3, [r7, #32]
 80009e2:	3301      	adds	r3, #1
 80009e4:	623b      	str	r3, [r7, #32]
 80009e6:	6a3b      	ldr	r3, [r7, #32]
 80009e8:	2b03      	cmp	r3, #3
 80009ea:	d9dd      	bls.n	80009a8 <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 80009ec:	7ffb      	ldrb	r3, [r7, #31]
 80009ee:	2b11      	cmp	r3, #17
 80009f0:	d101      	bne.n	80009f6 <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 80009f2:	2300      	movs	r3, #0
 80009f4:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80009fa:	801a      	strh	r2, [r3, #0]
	}
	return result;
 80009fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b086      	sub	sp, #24
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000a10:	2300      	movs	r3, #0
 8000a12:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	e01b      	b.n	8000a52 <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000a1a:	7cfb      	ldrb	r3, [r7, #19]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d115      	bne.n	8000a4c <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000a20:	88fa      	ldrh	r2, [r7, #6]
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	f1c3 0303 	rsb	r3, r3, #3
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	fa42 f303 	asr.w	r3, r2, r3
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	f003 030f 	and.w	r3, r3, #15
 8000a34:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000a36:	f107 020c 	add.w	r2, r7, #12
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	441a      	add	r2, r3
 8000a3e:	7cbb      	ldrb	r3, [r7, #18]
 8000a40:	4611      	mov	r1, r2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f8c5 	bl	8000bd2 <ConsoleUtilsIntToHexChar>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	2b03      	cmp	r3, #3
 8000a56:	d9e0      	bls.n	8000a1a <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000a58:	f107 020c 	add.w	r2, r7, #12
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	4413      	add	r3, r2
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 fa95 	bl	8000f98 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000a6e:	2300      	movs	r3, #0
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b089      	sub	sp, #36	; 0x24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000a84:	2300      	movs	r3, #0
 8000a86:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000a88:	2301      	movs	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	da07      	bge.n	8000aa2 <smallItoa+0x2a>
		isNegative = true;
 8000a92:	2301      	movs	r3, #1
 8000a94:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	425b      	negs	r3, r3
 8000a9a:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000aa6:	e007      	b.n	8000ab8 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ab0:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1f1      	bne.n	8000aa8 <smallItoa+0x30>
	}
    
    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	4413      	add	r3, r2
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	fb93 f2f2 	sdiv	r2, r3, r2
 8000ae0:	6879      	ldr	r1, [r7, #4]
 8000ae2:	fb01 f202 	mul.w	r2, r1, r2
 8000ae6:	1a9b      	subs	r3, r3, r2
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	68b9      	ldr	r1, [r7, #8]
 8000aee:	440b      	add	r3, r1
 8000af0:	3230      	adds	r2, #48	; 0x30
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000af6:	69ba      	ldr	r2, [r7, #24]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000afe:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	1e5a      	subs	r2, r3, #1
 8000b04:	617a      	str	r2, [r7, #20]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1e6      	bne.n	8000ad8 <smallItoa+0x60>

	if (isNegative) {
 8000b0a:	7ffb      	ldrb	r3, [r7, #31]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d002      	beq.n	8000b16 <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	222d      	movs	r2, #45	; 0x2d
 8000b14:	701a      	strb	r2, [r3, #0]
	}
}
 8000b16:	bf00      	nop
 8000b18:	3724      	adds	r7, #36	; 0x24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b084      	sub	sp, #16
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000b2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b30:	f107 0108 	add.w	r1, r7, #8
 8000b34:	220a      	movs	r2, #10
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ff9e 	bl	8000a78 <smallItoa>
	ConsoleIoSendString(out);
 8000b3c:	f107 0308 	add.w	r3, r7, #8
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 fa29 	bl	8000f98 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	2b2f      	cmp	r3, #47	; 0x2f
 8000b64:	d908      	bls.n	8000b78 <ConsoleUtilHexCharToInt+0x28>
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b39      	cmp	r3, #57	; 0x39
 8000b6a:	d805      	bhi.n	8000b78 <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	3b30      	subs	r3, #48	; 0x30
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	701a      	strb	r2, [r3, #0]
 8000b76:	e025      	b.n	8000bc4 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	2b40      	cmp	r3, #64	; 0x40
 8000b7c:	d908      	bls.n	8000b90 <ConsoleUtilHexCharToInt+0x40>
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2b46      	cmp	r3, #70	; 0x46
 8000b82:	d805      	bhi.n	8000b90 <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	3b37      	subs	r3, #55	; 0x37
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	701a      	strb	r2, [r3, #0]
 8000b8e:	e019      	b.n	8000bc4 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2b60      	cmp	r3, #96	; 0x60
 8000b94:	d908      	bls.n	8000ba8 <ConsoleUtilHexCharToInt+0x58>
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b66      	cmp	r3, #102	; 0x66
 8000b9a:	d805      	bhi.n	8000ba8 <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	3b57      	subs	r3, #87	; 0x57
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	e00d      	b.n	8000bc4 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	2b0a      	cmp	r3, #10
 8000bac:	d105      	bne.n	8000bba <ConsoleUtilHexCharToInt+0x6a>
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b0d      	cmp	r3, #13
 8000bb2:	d102      	bne.n	8000bba <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	2b20      	cmp	r3, #32
 8000bb8:	d102      	bne.n	8000bc0 <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000bba:	2311      	movs	r3, #17
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	e001      	b.n	8000bc4 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000bc0:	2310      	movs	r3, #16
 8000bc2:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr

08000bd2 <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b085      	sub	sp, #20
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	6039      	str	r1, [r7, #0]
 8000bdc:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000bde:	2300      	movs	r3, #0
 8000be0:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	2b09      	cmp	r3, #9
 8000be6:	d805      	bhi.n	8000bf4 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	3330      	adds	r3, #48	; 0x30
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	701a      	strb	r2, [r3, #0]
 8000bf2:	e00d      	b.n	8000c10 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b09      	cmp	r3, #9
 8000bf8:	d908      	bls.n	8000c0c <ConsoleUtilsIntToHexChar+0x3a>
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d805      	bhi.n	8000c0c <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	3337      	adds	r3, #55	; 0x37
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	e001      	b.n	8000c10 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000c0c:	2310      	movs	r3, #16
 8000c0e:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3714      	adds	r7, #20
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <ConsoleCommandComment>:
	{"buts",&ConsoleCommandButtonState, HELP("Prints the present state of the Blue user button")},
	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000c40:	230b      	movs	r3, #11
 8000c42:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	e01e      	b.n	8000c88 <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000c4a:	4914      	ldr	r1, [pc, #80]	; (8000c9c <ConsoleCommandHelp+0x68>)
 8000c4c:	697a      	ldr	r2, [r7, #20]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	440b      	add	r3, r1
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f99c 	bl	8000f98 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000c60:	480f      	ldr	r0, [pc, #60]	; (8000ca0 <ConsoleCommandHelp+0x6c>)
 8000c62:	f000 f999 	bl	8000f98 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000c66:	697a      	ldr	r2, [r7, #20]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	00db      	lsls	r3, r3, #3
 8000c6c:	4413      	add	r3, r2
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	3308      	adds	r3, #8
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <ConsoleCommandHelp+0x68>)
 8000c74:	4413      	add	r3, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f000 f98e 	bl	8000f98 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000c7c:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <ConsoleCommandHelp+0x70>)
 8000c7e:	f000 f98b 	bl	8000f98 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3301      	adds	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d3db      	bcc.n	8000c4a <ConsoleCommandHelp+0x16>
	}
	return result;
 8000c92:	7cfb      	ldrb	r3, [r7, #19]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	08006454 	.word	0x08006454
 8000ca0:	08006320 	.word	0x08006320
 8000ca4:	08006324 	.word	0x08006324

08000ca8 <ConsoleCommandParamExampleInt16>:

static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff fdfd 	bl	80008b8 <ConsoleReceiveParamInt16>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000cc2:	7bfb      	ldrb	r3, [r7, #15]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d116      	bne.n	8000cf6 <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000cc8:	480d      	ldr	r0, [pc, #52]	; (8000d00 <ConsoleCommandParamExampleInt16+0x58>)
 8000cca:	f000 f965 	bl	8000f98 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000cce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff25 	bl	8000b22 <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000cd8:	480a      	ldr	r0, [pc, #40]	; (8000d04 <ConsoleCommandParamExampleInt16+0x5c>)
 8000cda:	f000 f95d 	bl	8000f98 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000cde:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fe8e 	bl	8000a06 <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000cea:	4807      	ldr	r0, [pc, #28]	; (8000d08 <ConsoleCommandParamExampleInt16+0x60>)
 8000cec:	f000 f954 	bl	8000f98 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000cf0:	4806      	ldr	r0, [pc, #24]	; (8000d0c <ConsoleCommandParamExampleInt16+0x64>)
 8000cf2:	f000 f951 	bl	8000f98 <ConsoleIoSendString>
	}
	return result;
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3710      	adds	r7, #16
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	08006328 	.word	0x08006328
 8000d04:	08006338 	.word	0x08006338
 8000d08:	08006340 	.word	0x08006340
 8000d0c:	08006324 	.word	0x08006324

08000d10 <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	2101      	movs	r1, #1
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff fe27 	bl	8000974 <ConsoleReceiveParamHexUint16>
 8000d26:	4603      	mov	r3, r0
 8000d28:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d114      	bne.n	8000d5a <ConsoleCommandParamExampleHexUint16+0x4a>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000d30:	480c      	ldr	r0, [pc, #48]	; (8000d64 <ConsoleCommandParamExampleHexUint16+0x54>)
 8000d32:	f000 f931 	bl	8000f98 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000d36:	89bb      	ldrh	r3, [r7, #12]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fe64 	bl	8000a06 <ConsoleSendParamHexUint16>

		ConsoleIoSendString(" (");
 8000d3e:	480a      	ldr	r0, [pc, #40]	; (8000d68 <ConsoleCommandParamExampleHexUint16+0x58>)
 8000d40:	f000 f92a 	bl	8000f98 <ConsoleIoSendString>
		ConsoleSendParamInt16((int16_t)parameterUint16);
 8000d44:	89bb      	ldrh	r3, [r7, #12]
 8000d46:	b21b      	sxth	r3, r3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff feea 	bl	8000b22 <ConsoleSendParamInt16>
		ConsoleIoSendString(")");
 8000d4e:	4807      	ldr	r0, [pc, #28]	; (8000d6c <ConsoleCommandParamExampleHexUint16+0x5c>)
 8000d50:	f000 f922 	bl	8000f98 <ConsoleIoSendString>

		ConsoleIoSendString(STR_ENDLINE);
 8000d54:	4806      	ldr	r0, [pc, #24]	; (8000d70 <ConsoleCommandParamExampleHexUint16+0x60>)
 8000d56:	f000 f91f 	bl	8000f98 <ConsoleIoSendString>
	}
	return result;
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	08006344 	.word	0x08006344
 8000d68:	08006354 	.word	0x08006354
 8000d6c:	08006340 	.word	0x08006340
 8000d70:	08006324 	.word	0x08006324

08000d74 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73fb      	strb	r3, [r7, #15]
    IGNORE_UNUSED_VARIABLE(buffer);
	ConsoleIoSendString(VERSION_STRING);
 8000d80:	4805      	ldr	r0, [pc, #20]	; (8000d98 <ConsoleCommandVer+0x24>)
 8000d82:	f000 f909 	bl	8000f98 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <ConsoleCommandVer+0x28>)
 8000d88:	f000 f906 	bl	8000f98 <ConsoleIoSendString>
	return result;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	08006358 	.word	0x08006358
 8000d9c:	08006324 	.word	0x08006324

08000da0 <ConsoleCommandReadAccelX>:

static eCommandResult_T ConsoleCommandReadAccelX(const char buffer[])
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000da8:	2300      	movs	r3, #0
 8000daa:	73fb      	strb	r3, [r7, #15]
	IGNORE_UNUSED_VARIABLE(buffer);
	ConsoleIoSendString("x = 1");
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <ConsoleCommandReadAccelX+0x24>)
 8000dae:	f000 f8f3 	bl	8000f98 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <ConsoleCommandReadAccelX+0x28>)
 8000db4:	f000 f8f0 	bl	8000f98 <ConsoleIoSendString>
	return result;
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	08006370 	.word	0x08006370
 8000dc8:	08006324 	.word	0x08006324

08000dcc <ConsoleCommandReadAccelY>:

static eCommandResult_T ConsoleCommandReadAccelY(const char buffer[])
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	73fb      	strb	r3, [r7, #15]
	IGNORE_UNUSED_VARIABLE(buffer);
	ConsoleIoSendString("y = 2");
 8000dd8:	4805      	ldr	r0, [pc, #20]	; (8000df0 <ConsoleCommandReadAccelY+0x24>)
 8000dda:	f000 f8dd 	bl	8000f98 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <ConsoleCommandReadAccelY+0x28>)
 8000de0:	f000 f8da 	bl	8000f98 <ConsoleIoSendString>
	return result;
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	08006378 	.word	0x08006378
 8000df4:	08006324 	.word	0x08006324

08000df8 <ConsoleCommandReadAccelZ>:

static eCommandResult_T ConsoleCommandReadAccelZ(const char buffer[])
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]
	IGNORE_UNUSED_VARIABLE(buffer);
	ConsoleIoSendString("z = 3 ");
 8000e04:	4805      	ldr	r0, [pc, #20]	; (8000e1c <ConsoleCommandReadAccelZ+0x24>)
 8000e06:	f000 f8c7 	bl	8000f98 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000e0a:	4805      	ldr	r0, [pc, #20]	; (8000e20 <ConsoleCommandReadAccelZ+0x28>)
 8000e0c:	f000 f8c4 	bl	8000f98 <ConsoleIoSendString>
	return result;
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	08006380 	.word	0x08006380
 8000e20:	08006324 	.word	0x08006324

08000e24 <ConsoleCommandLedsRose>:

static eCommandResult_T ConsoleCommandLedsRose(const char buffer[])
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	73fb      	strb	r3, [r7, #15]
	IGNORE_UNUSED_VARIABLE(buffer);
	ConsoleIoSendString("LEDs should light in a circular pattern and then extinguish the same way ");
 8000e30:	4806      	ldr	r0, [pc, #24]	; (8000e4c <ConsoleCommandLedsRose+0x28>)
 8000e32:	f000 f8b1 	bl	8000f98 <ConsoleIoSendString>
	//LedRoseSet();
	HAL_Delay(50);
 8000e36:	2032      	movs	r0, #50	; 0x32
 8000e38:	f000 fea8 	bl	8001b8c <HAL_Delay>
	//LedRoseToggle();
	ConsoleIoSendString(STR_ENDLINE);
 8000e3c:	4804      	ldr	r0, [pc, #16]	; (8000e50 <ConsoleCommandLedsRose+0x2c>)
 8000e3e:	f000 f8ab 	bl	8000f98 <ConsoleIoSendString>
	return result;
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	08006388 	.word	0x08006388
 8000e50:	08006324 	.word	0x08006324

08000e54 <ConsoleCommandButtonState>:


static eCommandResult_T ConsoleCommandButtonState(const char buffer[])
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]
	IGNORE_UNUSED_VARIABLE(buffer);
	ConsoleIoSendString("the present state of the Blue user button is: ");
 8000e60:	4806      	ldr	r0, [pc, #24]	; (8000e7c <ConsoleCommandButtonState+0x28>)
 8000e62:	f000 f899 	bl	8000f98 <ConsoleIoSendString>
	if (1) {
		ConsoleIoSendString("DOWN, Depressed ");
 8000e66:	4806      	ldr	r0, [pc, #24]	; (8000e80 <ConsoleCommandButtonState+0x2c>)
 8000e68:	f000 f896 	bl	8000f98 <ConsoleIoSendString>
	}
	else {
		ConsoleIoSendString("UP, Unpressed ");
	}
	ConsoleIoSendString(STR_ENDLINE);
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <ConsoleCommandButtonState+0x30>)
 8000e6e:	f000 f893 	bl	8000f98 <ConsoleIoSendString>
	return result;
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	080063d4 	.word	0x080063d4
 8000e80:	08006404 	.word	0x08006404
 8000e84:	08006324 	.word	0x08006324

08000e88 <ConsoleCommandsGetTable>:

const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8000e8c:	4b02      	ldr	r3, [pc, #8]	; (8000e98 <ConsoleCommandsGetTable+0x10>)
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	08006454 	.word	0x08006454

08000e9c <ConsoleIoInit>:
        return EOF;
}*/


eConsoleError ConsoleIoInit(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &ch, 1); // initiate reception
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	4903      	ldr	r1, [pc, #12]	; (8000eb0 <ConsoleIoInit+0x14>)
 8000ea4:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <ConsoleIoInit+0x18>)
 8000ea6:	f003 fbe8 	bl	800467a <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000181 	.word	0x20000181
 8000eb4:	20000398 	.word	0x20000398

08000eb8 <HAL_UART_RxCpltCallback>:

/* This RX interrupt gets triggered once x number of bytes are recieved*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

	//HAL_UART_Transmit_IT(&huart3,&ch,1); // echo

    //TODO: handle cases of buffer overflow gracefully
	rx_bufferio[rx_counter++] = ch; // load each character to buffer
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <HAL_UART_RxCpltCallback+0x48>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	1c5a      	adds	r2, r3, #1
 8000ec6:	b2d1      	uxtb	r1, r2
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <HAL_UART_RxCpltCallback+0x48>)
 8000eca:	7011      	strb	r1, [r2, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <HAL_UART_RxCpltCallback+0x4c>)
 8000ed0:	7819      	ldrb	r1, [r3, #0]
 8000ed2:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <HAL_UART_RxCpltCallback+0x50>)
 8000ed4:	5499      	strb	r1, [r3, r2]
    if(ch == '\r' || ch == '\n')
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <HAL_UART_RxCpltCallback+0x4c>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b0d      	cmp	r3, #13
 8000edc:	d003      	beq.n	8000ee6 <HAL_UART_RxCpltCallback+0x2e>
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_UART_RxCpltCallback+0x4c>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b0a      	cmp	r3, #10
 8000ee4:	d102      	bne.n	8000eec <HAL_UART_RxCpltCallback+0x34>
        buffer_ready = 1; // if a new-line character or a carriage return character is received, set the relevant flag
 8000ee6:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <HAL_UART_RxCpltCallback+0x54>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	701a      	strb	r2, [r3, #0]

    HAL_UART_Receive_IT(huart, &ch, 1); // continue receiving character(s)
 8000eec:	2201      	movs	r2, #1
 8000eee:	4905      	ldr	r1, [pc, #20]	; (8000f04 <HAL_UART_RxCpltCallback+0x4c>)
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f003 fbc2 	bl	800467a <HAL_UART_Receive_IT>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000284 	.word	0x20000284
 8000f04:	20000181 	.word	0x20000181
 8000f08:	20000184 	.word	0x20000184
 8000f0c:	20000285 	.word	0x20000285

08000f10 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	uart_tx_complete =1;
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <HAL_UART_TxCpltCallback+0x1c>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000000 	.word	0x20000000

08000f30 <ConsoleIoReceive>:

//this is where the main edits went to make this code portable to STM32:
eConsoleError ConsoleIoReceive(uint8_t* buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
    if(buffer_ready) { // if a complete command is received
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <ConsoleIoReceive+0x5c>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d018      	beq.n	8000f76 <ConsoleIoReceive+0x46>
        buffer_ready = 0; // unset flag
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <ConsoleIoReceive+0x5c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
        memcpy(buffer,rx_bufferio,rx_counter); // copy the received command to library buffer
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <ConsoleIoReceive+0x60>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4910      	ldr	r1, [pc, #64]	; (8000f94 <ConsoleIoReceive+0x64>)
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f005 f988 	bl	8006268 <memcpy>
        *readLength = rx_counter; // set appropriate length
 8000f58:	4b0d      	ldr	r3, [pc, #52]	; (8000f90 <ConsoleIoReceive+0x60>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	601a      	str	r2, [r3, #0]

        memset(rx_bufferio,0,256); // clear receive buffer
 8000f62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f66:	2100      	movs	r1, #0
 8000f68:	480a      	ldr	r0, [pc, #40]	; (8000f94 <ConsoleIoReceive+0x64>)
 8000f6a:	f005 f94b 	bl	8006204 <memset>
        rx_counter = 0; // clear pointer so we can start from the beginning next time around
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <ConsoleIoReceive+0x60>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	e005      	b.n	8000f82 <ConsoleIoReceive+0x52>
    } else {
        buffer[0] = '\n'; // if no command is received, send the '>'
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	220a      	movs	r2, #10
 8000f7a:	701a      	strb	r2, [r3, #0]
        *readLength = 0;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
    }

    return CONSOLE_SUCCESS;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000285 	.word	0x20000285
 8000f90:	20000284 	.word	0x20000284
 8000f94:	20000184 	.word	0x20000184

08000f98 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(buffer);
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f7ff f93d 	bl	8000220 <strlen>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	73fb      	strb	r3, [r7, #15]
	//uart_tx_complete = 0;
	//HAL_UART_Transmit_IT(&huart3, (uint8_t*)buffer, len);
	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len,10000);
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	f242 7310 	movw	r3, #10000	; 0x2710
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <ConsoleIoSendString+0x2c>)
 8000fb6:	f003 fadd 	bl	8004574 <HAL_UART_Transmit>
	//while (uart_tx_complete==0);
	return CONSOLE_SUCCESS;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000398 	.word	0x20000398

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fcc:	f000 fd81 	bl	8001ad2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd0:	f000 f866 	bl	80010a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd4:	f000 f9e2 	bl	800139c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000fd8:	f000 f980 	bl	80012dc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fdc:	f000 f9ae 	bl	800133c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM13_Init();
 8000fe0:	f000 f958 	bl	8001294 <MX_TIM13_Init>
  MX_DAC_Init();
 8000fe4:	f000 f8ca 	bl	800117c <MX_DAC_Init>
  MX_TIM11_Init();
 8000fe8:	f000 f930 	bl	800124c <MX_TIM11_Init>
  MX_SPI1_Init();
 8000fec:	f000 f8f0 	bl	80011d0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // Start timer
  HAL_TIM_Base_Start_IT(&htim13);
 8000ff0:	4824      	ldr	r0, [pc, #144]	; (8001084 <main+0xbc>)
 8000ff2:	f002 fff3 	bl	8003fdc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8000ff6:	4824      	ldr	r0, [pc, #144]	; (8001088 <main+0xc0>)
 8000ff8:	f002 fff0 	bl	8003fdc <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4823      	ldr	r0, [pc, #140]	; (800108c <main+0xc4>)
 8001000:	f000 ff1b 	bl	8001e3a <HAL_DAC_Start>

  HAL_UART_Transmit(&huart3, "Main function\n\r" , strlen("Main function\n\r"),1000);
 8001004:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001008:	220f      	movs	r2, #15
 800100a:	4921      	ldr	r1, [pc, #132]	; (8001090 <main+0xc8>)
 800100c:	4821      	ldr	r0, [pc, #132]	; (8001094 <main+0xcc>)
 800100e:	f003 fab1 	bl	8004574 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ConsoleInit();
 8001012:	f7ff fb35 	bl	8000680 <ConsoleInit>
  while (1)
  {
	  ConsoleProcess();
 8001016:	f7ff fb61 	bl	80006dc <ConsoleProcess>
	  if(BlinkSpeed == 0)
 800101a:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <main+0xd0>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10a      	bne.n	8001038 <main+0x70>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8001022:	2201      	movs	r2, #1
 8001024:	2101      	movs	r1, #1
 8001026:	481d      	ldr	r0, [pc, #116]	; (800109c <main+0xd4>)
 8001028:	f001 f9ee 	bl	8002408 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2180      	movs	r1, #128	; 0x80
 8001030:	481a      	ldr	r0, [pc, #104]	; (800109c <main+0xd4>)
 8001032:	f001 f9e9 	bl	8002408 <HAL_GPIO_WritePin>
 8001036:	e01c      	b.n	8001072 <main+0xaa>

	  }
	  else if(BlinkSpeed == 1)
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <main+0xd0>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d10a      	bne.n	8001056 <main+0x8e>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2101      	movs	r1, #1
 8001044:	4815      	ldr	r0, [pc, #84]	; (800109c <main+0xd4>)
 8001046:	f001 f9df 	bl	8002408 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 800104a:	2201      	movs	r2, #1
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	4813      	ldr	r0, [pc, #76]	; (800109c <main+0xd4>)
 8001050:	f001 f9da 	bl	8002408 <HAL_GPIO_WritePin>
 8001054:	e00d      	b.n	8001072 <main+0xaa>

	  }
	  else if(BlinkSpeed == 2)
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <main+0xd0>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d109      	bne.n	8001072 <main+0xaa>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2101      	movs	r1, #1
 8001062:	480e      	ldr	r0, [pc, #56]	; (800109c <main+0xd4>)
 8001064:	f001 f9d0 	bl	8002408 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8001068:	2200      	movs	r2, #0
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	480b      	ldr	r0, [pc, #44]	; (800109c <main+0xd4>)
 800106e:	f001 f9cb 	bl	8002408 <HAL_GPIO_WritePin>
	  }
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //red
 8001072:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001076:	4809      	ldr	r0, [pc, #36]	; (800109c <main+0xd4>)
 8001078:	f001 f9df 	bl	800243a <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 800107c:	2032      	movs	r0, #50	; 0x32
 800107e:	f000 fd85 	bl	8001b8c <HAL_Delay>
	  ConsoleProcess();
 8001082:	e7c8      	b.n	8001016 <main+0x4e>
 8001084:	2000034c 	.word	0x2000034c
 8001088:	20000300 	.word	0x20000300
 800108c:	20000288 	.word	0x20000288
 8001090:	08006418 	.word	0x08006418
 8001094:	20000398 	.word	0x20000398
 8001098:	20000928 	.word	0x20000928
 800109c:	40020400 	.word	0x40020400

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b094      	sub	sp, #80	; 0x50
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	f107 0320 	add.w	r3, r7, #32
 80010aa:	2230      	movs	r2, #48	; 0x30
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f005 f8a8 	bl	8006204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010c4:	f001 fb1c 	bl	8002700 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c8:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <SystemClock_Config+0xd4>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	4a29      	ldr	r2, [pc, #164]	; (8001174 <SystemClock_Config+0xd4>)
 80010ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d2:	6413      	str	r3, [r2, #64]	; 0x40
 80010d4:	4b27      	ldr	r3, [pc, #156]	; (8001174 <SystemClock_Config+0xd4>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e0:	4b25      	ldr	r3, [pc, #148]	; (8001178 <SystemClock_Config+0xd8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a24      	ldr	r2, [pc, #144]	; (8001178 <SystemClock_Config+0xd8>)
 80010e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b22      	ldr	r3, [pc, #136]	; (8001178 <SystemClock_Config+0xd8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f8:	2301      	movs	r3, #1
 80010fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010fc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001102:	2302      	movs	r3, #2
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001106:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800110a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800110c:	2304      	movs	r3, #4
 800110e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001110:	23d8      	movs	r3, #216	; 0xd8
 8001112:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001114:	2302      	movs	r3, #2
 8001116:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001118:	2309      	movs	r3, #9
 800111a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	4618      	mov	r0, r3
 8001122:	f001 fb4d 	bl	80027c0 <HAL_RCC_OscConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800112c:	f000 fa7c 	bl	8001628 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001130:	f001 faf6 	bl	8002720 <HAL_PWREx_EnableOverDrive>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800113a:	f000 fa75 	bl	8001628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113e:	230f      	movs	r3, #15
 8001140:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001142:	2302      	movs	r3, #2
 8001144:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800114a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800114e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001156:	f107 030c 	add.w	r3, r7, #12
 800115a:	2107      	movs	r1, #7
 800115c:	4618      	mov	r0, r3
 800115e:	f001 fdd3 	bl	8002d08 <HAL_RCC_ClockConfig>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001168:	f000 fa5e 	bl	8001628 <Error_Handler>
  }
}
 800116c:	bf00      	nop
 800116e:	3750      	adds	r7, #80	; 0x50
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40023800 	.word	0x40023800
 8001178:	40007000 	.word	0x40007000

0800117c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001182:	463b      	mov	r3, r7
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <MX_DAC_Init+0x4c>)
 800118c:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <MX_DAC_Init+0x50>)
 800118e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001190:	480d      	ldr	r0, [pc, #52]	; (80011c8 <MX_DAC_Init+0x4c>)
 8001192:	f000 fe30 	bl	8001df6 <HAL_DAC_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800119c:	f000 fa44 	bl	8001628 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011a8:	463b      	mov	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_DAC_Init+0x4c>)
 80011b0:	f000 fe95 	bl	8001ede <HAL_DAC_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011ba:	f000 fa35 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000288 	.word	0x20000288
 80011cc:	40007400 	.word	0x40007400

080011d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_SPI1_Init+0x74>)
 80011d6:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <MX_SPI1_Init+0x78>)
 80011d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <MX_SPI1_Init+0x74>)
 80011dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <MX_SPI1_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <MX_SPI1_Init+0x74>)
 80011ea:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80011ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_SPI1_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <MX_SPI1_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_SPI1_Init+0x74>)
 80011fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001202:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_SPI1_Init+0x74>)
 8001206:	2218      	movs	r2, #24
 8001208:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_SPI1_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_SPI1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_SPI1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_SPI1_Init+0x74>)
 800121e:	2207      	movs	r2, #7
 8001220:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <MX_SPI1_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_SPI1_Init+0x74>)
 800122a:	2208      	movs	r2, #8
 800122c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_SPI1_Init+0x74>)
 8001230:	f002 fada 	bl	80037e8 <HAL_SPI_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800123a:	f000 f9f5 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000029c 	.word	0x2000029c
 8001248:	40013000 	.word	0x40013000

0800124c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MX_TIM11_Init+0x40>)
 8001252:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <MX_TIM11_Init+0x44>)
 8001254:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 108-1;
 8001256:	4b0d      	ldr	r3, [pc, #52]	; (800128c <MX_TIM11_Init+0x40>)
 8001258:	226b      	movs	r2, #107	; 0x6b
 800125a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <MX_TIM11_Init+0x40>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2000-1;
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <MX_TIM11_Init+0x40>)
 8001264:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001268:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <MX_TIM11_Init+0x40>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_TIM11_Init+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_TIM11_Init+0x40>)
 8001278:	f002 fe58 	bl	8003f2c <HAL_TIM_Base_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001282:	f000 f9d1 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000300 	.word	0x20000300
 8001290:	40014800 	.word	0x40014800

08001294 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_TIM13_Init+0x40>)
 800129a:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <MX_TIM13_Init+0x44>)
 800129c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 108-1;
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <MX_TIM13_Init+0x40>)
 80012a0:	226b      	movs	r2, #107	; 0x6b
 80012a2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <MX_TIM13_Init+0x40>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <MX_TIM13_Init+0x40>)
 80012ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80012b0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <MX_TIM13_Init+0x40>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_TIM13_Init+0x40>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_TIM13_Init+0x40>)
 80012c0:	f002 fe34 	bl	8003f2c <HAL_TIM_Base_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80012ca:	f000 f9ad 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2000034c 	.word	0x2000034c
 80012d8:	40001c00 	.word	0x40001c00

080012dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <MX_USART3_UART_Init+0x58>)
 80012e2:	4a15      	ldr	r2, [pc, #84]	; (8001338 <MX_USART3_UART_Init+0x5c>)
 80012e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <MX_USART3_UART_Init+0x58>)
 80012e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_USART3_UART_Init+0x58>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_USART3_UART_Init+0x58>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <MX_USART3_UART_Init+0x58>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_USART3_UART_Init+0x58>)
 8001302:	220c      	movs	r2, #12
 8001304:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <MX_USART3_UART_Init+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_USART3_UART_Init+0x58>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <MX_USART3_UART_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_USART3_UART_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_USART3_UART_Init+0x58>)
 8001320:	f003 f8da 	bl	80044d8 <HAL_UART_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800132a:	f000 f97d 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000398 	.word	0x20000398
 8001338:	40004800 	.word	0x40004800

0800133c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001340:	4b15      	ldr	r3, [pc, #84]	; (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001342:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001346:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800134a:	2206      	movs	r2, #6
 800134c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001350:	2202      	movs	r2, #2
 8001352:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001354:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001356:	2200      	movs	r2, #0
 8001358:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800135c:	2202      	movs	r2, #2
 800135e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001360:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001362:	2201      	movs	r2, #1
 8001364:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001368:	2200      	movs	r2, #0
 800136a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800136e:	2200      	movs	r2, #0
 8001370:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001372:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001374:	2201      	movs	r2, #1
 8001376:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001378:	4b07      	ldr	r3, [pc, #28]	; (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800137a:	2201      	movs	r2, #1
 800137c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001380:	2200      	movs	r2, #0
 8001382:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001384:	4804      	ldr	r0, [pc, #16]	; (8001398 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001386:	f001 f872 	bl	800246e <HAL_PCD_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 8001390:	f000 f94a 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000420 	.word	0x20000420

0800139c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08c      	sub	sp, #48	; 0x30
 80013a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b2:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <MX_GPIO_Init+0x134>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a46      	ldr	r2, [pc, #280]	; (80014d0 <MX_GPIO_Init+0x134>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <MX_GPIO_Init+0x134>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	61bb      	str	r3, [r7, #24]
 80013c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ca:	4b41      	ldr	r3, [pc, #260]	; (80014d0 <MX_GPIO_Init+0x134>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a40      	ldr	r2, [pc, #256]	; (80014d0 <MX_GPIO_Init+0x134>)
 80013d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <MX_GPIO_Init+0x134>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <MX_GPIO_Init+0x134>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a3a      	ldr	r2, [pc, #232]	; (80014d0 <MX_GPIO_Init+0x134>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <MX_GPIO_Init+0x134>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fa:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <MX_GPIO_Init+0x134>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a34      	ldr	r2, [pc, #208]	; (80014d0 <MX_GPIO_Init+0x134>)
 8001400:	f043 0302 	orr.w	r3, r3, #2
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <MX_GPIO_Init+0x134>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001412:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <MX_GPIO_Init+0x134>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a2e      	ldr	r2, [pc, #184]	; (80014d0 <MX_GPIO_Init+0x134>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b2c      	ldr	r3, [pc, #176]	; (80014d0 <MX_GPIO_Init+0x134>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800142a:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <MX_GPIO_Init+0x134>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a28      	ldr	r2, [pc, #160]	; (80014d0 <MX_GPIO_Init+0x134>)
 8001430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <MX_GPIO_Init+0x134>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|SPI_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001442:	2200      	movs	r2, #0
 8001444:	f244 01c1 	movw	r1, #16577	; 0x40c1
 8001448:	4822      	ldr	r0, [pc, #136]	; (80014d4 <MX_GPIO_Init+0x138>)
 800144a:	f000 ffdd 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	2140      	movs	r1, #64	; 0x40
 8001452:	4821      	ldr	r0, [pc, #132]	; (80014d8 <MX_GPIO_Init+0x13c>)
 8001454:	f000 ffd8 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800145e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4619      	mov	r1, r3
 800146e:	481b      	ldr	r0, [pc, #108]	; (80014dc <MX_GPIO_Init+0x140>)
 8001470:	f000 fe16 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin SPI_CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|SPI_CS_Pin|LD2_Pin;
 8001474:	f244 03c1 	movw	r3, #16577	; 0x40c1
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	2301      	movs	r3, #1
 800147c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	4619      	mov	r1, r3
 800148c:	4811      	ldr	r0, [pc, #68]	; (80014d4 <MX_GPIO_Init+0x138>)
 800148e:	f000 fe07 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001492:	2340      	movs	r3, #64	; 0x40
 8001494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	4619      	mov	r1, r3
 80014a8:	480b      	ldr	r0, [pc, #44]	; (80014d8 <MX_GPIO_Init+0x13c>)
 80014aa:	f000 fdf9 	bl	80020a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b2:	2300      	movs	r3, #0
 80014b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_GPIO_Init+0x13c>)
 80014c2:	f000 fded 	bl	80020a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014c6:	bf00      	nop
 80014c8:	3730      	adds	r7, #48	; 0x30
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020400 	.word	0x40020400
 80014d8:	40021800 	.word	0x40021800
 80014dc:	40020800 	.word	0x40020800

080014e0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* Timer13 interupt that fires every 5 ms to check push button press and handle debouncing*/
/* Timer11 interupt that fires every 1 ms */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

	if (htim == &htim13 )/* Timer13 interupt that fires every 5 ms*/
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a41      	ldr	r2, [pc, #260]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d17a      	bne.n	80015e6 <HAL_TIM_PeriodElapsedCallback+0x106>
	{
		if (!debounceRequest)
 80014f0:	4b40      	ldr	r3, [pc, #256]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d120      	bne.n	800153a <HAL_TIM_PeriodElapsedCallback+0x5a>
		{
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 80014f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014fc:	483e      	ldr	r0, [pc, #248]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80014fe:	f000 ff6b 	bl	80023d8 <HAL_GPIO_ReadPin>
 8001502:	4603      	mov	r3, r0
 8001504:	2b01      	cmp	r3, #1
 8001506:	d134      	bne.n	8001572 <HAL_TIM_PeriodElapsedCallback+0x92>
			{
				HAL_UART_Transmit(&huart3, "Button Pressed\n\r" , strlen("Button Pressed\n\r"),1000);
 8001508:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150c:	2210      	movs	r2, #16
 800150e:	493b      	ldr	r1, [pc, #236]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001510:	483b      	ldr	r0, [pc, #236]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001512:	f003 f82f 	bl	8004574 <HAL_UART_Transmit>
				if(BlinkSpeed == 2)
 8001516:	4b3b      	ldr	r3, [pc, #236]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d103      	bne.n	8001526 <HAL_TIM_PeriodElapsedCallback+0x46>
				{
					BlinkSpeed = 0;
 800151e:	4b39      	ldr	r3, [pc, #228]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
 8001524:	e005      	b.n	8001532 <HAL_TIM_PeriodElapsedCallback+0x52>
				}
				else
				{
					BlinkSpeed ++;
 8001526:	4b37      	ldr	r3, [pc, #220]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	3301      	adds	r3, #1
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4b35      	ldr	r3, [pc, #212]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001530:	701a      	strb	r2, [r3, #0]

				}
				debounceRequest = 1;
 8001532:	4b30      	ldr	r3, [pc, #192]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
 8001538:	e01b      	b.n	8001572 <HAL_TIM_PeriodElapsedCallback+0x92>
			}
		}
		// Handle debounce
		else
		{
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 800153a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153e:	482e      	ldr	r0, [pc, #184]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001540:	f000 ff4a 	bl	80023d8 <HAL_GPIO_ReadPin>
 8001544:	4603      	mov	r3, r0
 8001546:	2b01      	cmp	r3, #1
 8001548:	d103      	bne.n	8001552 <HAL_TIM_PeriodElapsedCallback+0x72>
				debounceCount = 0;
 800154a:	4b2f      	ldr	r3, [pc, #188]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	e00f      	b.n	8001572 <HAL_TIM_PeriodElapsedCallback+0x92>
			else
			{
				debounceCount ++;
 8001552:	4b2d      	ldr	r3, [pc, #180]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800155c:	701a      	strb	r2, [r3, #0]
				if (debounceCount == 10)
 800155e:	4b2a      	ldr	r3, [pc, #168]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b0a      	cmp	r3, #10
 8001564:	d105      	bne.n	8001572 <HAL_TIM_PeriodElapsedCallback+0x92>
				{
					debounceCount = 0;
 8001566:	4b28      	ldr	r3, [pc, #160]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
					debounceRequest = 0;
 800156c:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
				}
			}
		}


		spi_data = 0x3000|Value_DAC_SPI;
 8001572:	4b26      	ldr	r3, [pc, #152]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800157a:	b29a      	uxth	r2, r3
 800157c:	4b24      	ldr	r3, [pc, #144]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800157e:	801a      	strh	r2, [r3, #0]
		//spi_data = 0x3000|0;
		HAL_StatusTypeDef errorcode;
		//spi_data[0]= 0x0F;
		//spi_data[1]= 0x30;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001580:	2200      	movs	r2, #0
 8001582:	2140      	movs	r1, #64	; 0x40
 8001584:	4823      	ldr	r0, [pc, #140]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001586:	f000 ff3f 	bl	8002408 <HAL_GPIO_WritePin>
		errorcode = HAL_SPI_Transmit(&hspi1, (uint8_t*)&spi_data, 2, 100000);
 800158a:	4b23      	ldr	r3, [pc, #140]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800158c:	2202      	movs	r2, #2
 800158e:	4920      	ldr	r1, [pc, #128]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001590:	4822      	ldr	r0, [pc, #136]	; (800161c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001592:	f002 f9d4 	bl	800393e <HAL_SPI_Transmit>
 8001596:	4603      	mov	r3, r0
 8001598:	73fb      	strb	r3, [r7, #15]
		if (errorcode!= HAL_OK)
 800159a:	7bfb      	ldrb	r3, [r7, #15]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d006      	beq.n	80015ae <HAL_TIM_PeriodElapsedCallback+0xce>
		{
			HAL_UART_Transmit(&huart3, "error\n\r" , strlen("error\n\r"),1000);
 80015a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a4:	2207      	movs	r2, #7
 80015a6:	491e      	ldr	r1, [pc, #120]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80015a8:	4815      	ldr	r0, [pc, #84]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80015aa:	f002 ffe3 	bl	8004574 <HAL_UART_Transmit>
		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80015ae:	2201      	movs	r2, #1
 80015b0:	2140      	movs	r1, #64	; 0x40
 80015b2:	4818      	ldr	r0, [pc, #96]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80015b4:	f000 ff28 	bl	8002408 <HAL_GPIO_WritePin>

		if (Value_DAC_SPI<4095)
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d806      	bhi.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0xf2>
		{
			Value_DAC_SPI++;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	3301      	adds	r3, #1
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80015ce:	801a      	strh	r2, [r3, #0]
	{

	}


}
 80015d0:	e009      	b.n	80015e6 <HAL_TIM_PeriodElapsedCallback+0x106>
			Value_DAC_SPI = 0;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, "DAC Pressed\n\r" , strlen("DAC Pressed\n\r"),HAL_MAX_DELAY);
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
 80015dc:	220d      	movs	r2, #13
 80015de:	4911      	ldr	r1, [pc, #68]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80015e0:	4807      	ldr	r0, [pc, #28]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80015e2:	f002 ffc7 	bl	8004574 <HAL_UART_Transmit>
}
 80015e6:	bf00      	nop
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000034c 	.word	0x2000034c
 80015f4:	20000929 	.word	0x20000929
 80015f8:	40020800 	.word	0x40020800
 80015fc:	08006428 	.word	0x08006428
 8001600:	20000398 	.word	0x20000398
 8001604:	20000928 	.word	0x20000928
 8001608:	2000092a 	.word	0x2000092a
 800160c:	20000002 	.word	0x20000002
 8001610:	2000092c 	.word	0x2000092c
 8001614:	40020400 	.word	0x40020400
 8001618:	000186a0 	.word	0x000186a0
 800161c:	2000029c 	.word	0x2000029c
 8001620:	0800643c 	.word	0x0800643c
 8001624:	08006444 	.word	0x08006444

08001628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800162c:	b672      	cpsid	i
}
 800162e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001630:	e7fe      	b.n	8001630 <Error_Handler+0x8>
	...

08001634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_MspInit+0x44>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a0e      	ldr	r2, [pc, #56]	; (8001678 <HAL_MspInit+0x44>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <HAL_MspInit+0x44>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <HAL_MspInit+0x44>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	4a08      	ldr	r2, [pc, #32]	; (8001678 <HAL_MspInit+0x44>)
 8001658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165c:	6453      	str	r3, [r2, #68]	; 0x44
 800165e:	4b06      	ldr	r3, [pc, #24]	; (8001678 <HAL_MspInit+0x44>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001666:	603b      	str	r3, [r7, #0]
 8001668:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800

0800167c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a15      	ldr	r2, [pc, #84]	; (80016f0 <HAL_DAC_MspInit+0x74>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d123      	bne.n	80016e6 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_DAC_MspInit+0x78>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <HAL_DAC_MspInit+0x78>)
 80016a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_DAC_MspInit+0x78>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016b2:	613b      	str	r3, [r7, #16]
 80016b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <HAL_DAC_MspInit+0x78>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <HAL_DAC_MspInit+0x78>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <HAL_DAC_MspInit+0x78>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016ce:	2310      	movs	r3, #16
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016d2:	2303      	movs	r3, #3
 80016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	4805      	ldr	r0, [pc, #20]	; (80016f8 <HAL_DAC_MspInit+0x7c>)
 80016e2:	f000 fcdd 	bl	80020a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	; 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40007400 	.word	0x40007400
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020000 	.word	0x40020000

080016fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a17      	ldr	r2, [pc, #92]	; (8001778 <HAL_SPI_MspInit+0x7c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d127      	bne.n	800176e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <HAL_SPI_MspInit+0x80>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	4a16      	ldr	r2, [pc, #88]	; (800177c <HAL_SPI_MspInit+0x80>)
 8001724:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001728:	6453      	str	r3, [r2, #68]	; 0x44
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <HAL_SPI_MspInit+0x80>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b11      	ldr	r3, [pc, #68]	; (800177c <HAL_SPI_MspInit+0x80>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a10      	ldr	r2, [pc, #64]	; (800177c <HAL_SPI_MspInit+0x80>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_SPI_MspInit+0x80>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800174e:	23e0      	movs	r3, #224	; 0xe0
 8001750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175a:	2303      	movs	r3, #3
 800175c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800175e:	2305      	movs	r3, #5
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4619      	mov	r1, r3
 8001768:	4805      	ldr	r0, [pc, #20]	; (8001780 <HAL_SPI_MspInit+0x84>)
 800176a:	f000 fc99 	bl	80020a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800176e:	bf00      	nop
 8001770:	3728      	adds	r7, #40	; 0x28
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40013000 	.word	0x40013000
 800177c:	40023800 	.word	0x40023800
 8001780:	40020000 	.word	0x40020000

08001784 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a1a      	ldr	r2, [pc, #104]	; (80017fc <HAL_TIM_Base_MspInit+0x78>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d114      	bne.n	80017c0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001796:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <HAL_TIM_Base_MspInit+0x7c>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	4a19      	ldr	r2, [pc, #100]	; (8001800 <HAL_TIM_Base_MspInit+0x7c>)
 800179c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a0:	6453      	str	r3, [r2, #68]	; 0x44
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <HAL_TIM_Base_MspInit+0x7c>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2100      	movs	r1, #0
 80017b2:	201a      	movs	r0, #26
 80017b4:	f000 fae9 	bl	8001d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80017b8:	201a      	movs	r0, #26
 80017ba:	f000 fb02 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80017be:	e018      	b.n	80017f2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM13)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0f      	ldr	r2, [pc, #60]	; (8001804 <HAL_TIM_Base_MspInit+0x80>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d113      	bne.n	80017f2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <HAL_TIM_Base_MspInit+0x7c>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <HAL_TIM_Base_MspInit+0x7c>)
 80017d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b0a      	ldr	r3, [pc, #40]	; (8001800 <HAL_TIM_Base_MspInit+0x7c>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	202c      	movs	r0, #44	; 0x2c
 80017e8:	f000 facf 	bl	8001d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80017ec:	202c      	movs	r0, #44	; 0x2c
 80017ee:	f000 fae8 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40014800 	.word	0x40014800
 8001800:	40023800 	.word	0x40023800
 8001804:	40001c00 	.word	0x40001c00

08001808 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b0aa      	sub	sp, #168	; 0xa8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	2280      	movs	r2, #128	; 0x80
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f004 fceb 	bl	8006204 <memset>
  if(huart->Instance==USART3)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a26      	ldr	r2, [pc, #152]	; (80018cc <HAL_UART_MspInit+0xc4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d144      	bne.n	80018c2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800183c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800183e:	2300      	movs	r3, #0
 8001840:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4618      	mov	r0, r3
 8001848:	f001 fc84 	bl	8003154 <HAL_RCCEx_PeriphCLKConfig>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001852:	f7ff fee9 	bl	8001628 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001856:	4b1e      	ldr	r3, [pc, #120]	; (80018d0 <HAL_UART_MspInit+0xc8>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <HAL_UART_MspInit+0xc8>)
 800185c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <HAL_UART_MspInit+0xc8>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800186e:	4b18      	ldr	r3, [pc, #96]	; (80018d0 <HAL_UART_MspInit+0xc8>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a17      	ldr	r2, [pc, #92]	; (80018d0 <HAL_UART_MspInit+0xc8>)
 8001874:	f043 0308 	orr.w	r3, r3, #8
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <HAL_UART_MspInit+0xc8>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001886:	f44f 7340 	mov.w	r3, #768	; 0x300
 800188a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018a0:	2307      	movs	r3, #7
 80018a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018aa:	4619      	mov	r1, r3
 80018ac:	4809      	ldr	r0, [pc, #36]	; (80018d4 <HAL_UART_MspInit+0xcc>)
 80018ae:	f000 fbf7 	bl	80020a0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	2027      	movs	r0, #39	; 0x27
 80018b8:	f000 fa67 	bl	8001d8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80018bc:	2027      	movs	r0, #39	; 0x27
 80018be:	f000 fa80 	bl	8001dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018c2:	bf00      	nop
 80018c4:	37a8      	adds	r7, #168	; 0xa8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40004800 	.word	0x40004800
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020c00 	.word	0x40020c00

080018d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b0aa      	sub	sp, #168	; 0xa8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2280      	movs	r2, #128	; 0x80
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f004 fc83 	bl	8006204 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001906:	d159      	bne.n	80019bc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001908:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800190c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800190e:	2300      	movs	r3, #0
 8001910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4618      	mov	r0, r3
 800191a:	f001 fc1b 	bl	8003154 <HAL_RCCEx_PeriphCLKConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001924:	f7ff fe80 	bl	8001628 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001928:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <HAL_PCD_MspInit+0xec>)
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	4a25      	ldr	r2, [pc, #148]	; (80019c4 <HAL_PCD_MspInit+0xec>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6313      	str	r3, [r2, #48]	; 0x30
 8001934:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <HAL_PCD_MspInit+0xec>)
 8001936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001940:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001944:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800195a:	230a      	movs	r3, #10
 800195c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001960:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001964:	4619      	mov	r1, r3
 8001966:	4818      	ldr	r0, [pc, #96]	; (80019c8 <HAL_PCD_MspInit+0xf0>)
 8001968:	f000 fb9a 	bl	80020a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800196c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001970:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001974:	2300      	movs	r3, #0
 8001976:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001984:	4619      	mov	r1, r3
 8001986:	4810      	ldr	r0, [pc, #64]	; (80019c8 <HAL_PCD_MspInit+0xf0>)
 8001988:	f000 fb8a 	bl	80020a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_PCD_MspInit+0xec>)
 800198e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001990:	4a0c      	ldr	r2, [pc, #48]	; (80019c4 <HAL_PCD_MspInit+0xec>)
 8001992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001996:	6353      	str	r3, [r2, #52]	; 0x34
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_PCD_MspInit+0xec>)
 800199a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <HAL_PCD_MspInit+0xec>)
 80019a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a8:	4a06      	ldr	r2, [pc, #24]	; (80019c4 <HAL_PCD_MspInit+0xec>)
 80019aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019ae:	6453      	str	r3, [r2, #68]	; 0x44
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <HAL_PCD_MspInit+0xec>)
 80019b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80019bc:	bf00      	nop
 80019be:	37a8      	adds	r7, #168	; 0xa8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020000 	.word	0x40020000

080019cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019d0:	e7fe      	b.n	80019d0 <NMI_Handler+0x4>

080019d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <MemManage_Handler+0x4>

080019de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <BusFault_Handler+0x4>

080019e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <UsageFault_Handler+0x4>

080019ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a18:	f000 f898 	bl	8001b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001a26:	f002 fb51 	bl	80040cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000300 	.word	0x20000300

08001a34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <USART3_IRQHandler+0x10>)
 8001a3a:	f002 fe63 	bl	8004704 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000398 	.word	0x20000398

08001a48 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001a4e:	f002 fb3d 	bl	80040cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	2000034c 	.word	0x2000034c

08001a5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <SystemInit+0x20>)
 8001a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <SystemInit+0x20>)
 8001a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a84:	480d      	ldr	r0, [pc, #52]	; (8001abc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a86:	490e      	ldr	r1, [pc, #56]	; (8001ac0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a88:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a8c:	e002      	b.n	8001a94 <LoopCopyDataInit>

08001a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a92:	3304      	adds	r3, #4

08001a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a98:	d3f9      	bcc.n	8001a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9a:	4a0b      	ldr	r2, [pc, #44]	; (8001ac8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a9c:	4c0b      	ldr	r4, [pc, #44]	; (8001acc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa0:	e001      	b.n	8001aa6 <LoopFillZerobss>

08001aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa4:	3204      	adds	r2, #4

08001aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa8:	d3fb      	bcc.n	8001aa2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aaa:	f7ff ffd7 	bl	8001a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aae:	f004 fbb7 	bl	8006220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab2:	f7ff fa89 	bl	8000fc8 <main>
  bx  lr    
 8001ab6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ab8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ac4:	08006898 	.word	0x08006898
  ldr r2, =_sbss
 8001ac8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001acc:	20000a6c 	.word	0x20000a6c

08001ad0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad0:	e7fe      	b.n	8001ad0 <ADC_IRQHandler>

08001ad2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad6:	2003      	movs	r0, #3
 8001ad8:	f000 f94c 	bl	8001d74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001adc:	2000      	movs	r0, #0
 8001ade:	f000 f805 	bl	8001aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae2:	f7ff fda7 	bl	8001634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_InitTick+0x54>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x58>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f967 	bl	8001dde <HAL_SYSTICK_Config>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00e      	b.n	8001b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b0f      	cmp	r3, #15
 8001b1e:	d80a      	bhi.n	8001b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b20:	2200      	movs	r2, #0
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	f000 f92f 	bl	8001d8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b2c:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <HAL_InitTick+0x5c>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e000      	b.n	8001b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000004 	.word	0x20000004
 8001b44:	2000000c 	.word	0x2000000c
 8001b48:	20000008 	.word	0x20000008

08001b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_IncTick+0x20>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_IncTick+0x24>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <HAL_IncTick+0x24>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	2000000c 	.word	0x2000000c
 8001b70:	20000930 	.word	0x20000930

08001b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return uwTick;
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <HAL_GetTick+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	20000930 	.word	0x20000930

08001b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b94:	f7ff ffee 	bl	8001b74 <HAL_GetTick>
 8001b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba4:	d005      	beq.n	8001bb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <HAL_Delay+0x44>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	461a      	mov	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4413      	add	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bb2:	bf00      	nop
 8001bb4:	f7ff ffde 	bl	8001b74 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d8f7      	bhi.n	8001bb4 <HAL_Delay+0x28>
  {
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	2000000c 	.word	0x2000000c

08001bd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b085      	sub	sp, #20
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <__NVIC_SetPriorityGrouping+0x40>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <__NVIC_SetPriorityGrouping+0x44>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c02:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <__NVIC_SetPriorityGrouping+0x40>)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	60d3      	str	r3, [r2, #12]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00
 8001c18:	05fa0000 	.word	0x05fa0000

08001c1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c20:	4b04      	ldr	r3, [pc, #16]	; (8001c34 <__NVIC_GetPriorityGrouping+0x18>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	0a1b      	lsrs	r3, r3, #8
 8001c26:	f003 0307 	and.w	r3, r3, #7
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	db0b      	blt.n	8001c62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	f003 021f 	and.w	r2, r3, #31
 8001c50:	4907      	ldr	r1, [pc, #28]	; (8001c70 <__NVIC_EnableIRQ+0x38>)
 8001c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	2001      	movs	r0, #1
 8001c5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000e100 	.word	0xe000e100

08001c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	db0a      	blt.n	8001c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	490c      	ldr	r1, [pc, #48]	; (8001cc0 <__NVIC_SetPriority+0x4c>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	0112      	lsls	r2, r2, #4
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	440b      	add	r3, r1
 8001c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c9c:	e00a      	b.n	8001cb4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4908      	ldr	r1, [pc, #32]	; (8001cc4 <__NVIC_SetPriority+0x50>)
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	3b04      	subs	r3, #4
 8001cac:	0112      	lsls	r2, r2, #4
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	761a      	strb	r2, [r3, #24]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000e100 	.word	0xe000e100
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	; 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f1c3 0307 	rsb	r3, r3, #7
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	bf28      	it	cs
 8001ce6:	2304      	movcs	r3, #4
 8001ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3304      	adds	r3, #4
 8001cee:	2b06      	cmp	r3, #6
 8001cf0:	d902      	bls.n	8001cf8 <NVIC_EncodePriority+0x30>
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3b03      	subs	r3, #3
 8001cf6:	e000      	b.n	8001cfa <NVIC_EncodePriority+0x32>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43da      	mvns	r2, r3
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d10:	f04f 31ff 	mov.w	r1, #4294967295
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1a:	43d9      	mvns	r1, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	4313      	orrs	r3, r2
         );
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3724      	adds	r7, #36	; 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d40:	d301      	bcc.n	8001d46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d42:	2301      	movs	r3, #1
 8001d44:	e00f      	b.n	8001d66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <SysTick_Config+0x40>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d4e:	210f      	movs	r1, #15
 8001d50:	f04f 30ff 	mov.w	r0, #4294967295
 8001d54:	f7ff ff8e 	bl	8001c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <SysTick_Config+0x40>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d5e:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <SysTick_Config+0x40>)
 8001d60:	2207      	movs	r2, #7
 8001d62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	e000e010 	.word	0xe000e010

08001d74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ff29 	bl	8001bd4 <__NVIC_SetPriorityGrouping>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
 8001d96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d9c:	f7ff ff3e 	bl	8001c1c <__NVIC_GetPriorityGrouping>
 8001da0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	6978      	ldr	r0, [r7, #20]
 8001da8:	f7ff ff8e 	bl	8001cc8 <NVIC_EncodePriority>
 8001dac:	4602      	mov	r2, r0
 8001dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff ff5d 	bl	8001c74 <__NVIC_SetPriority>
}
 8001dba:	bf00      	nop
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff31 	bl	8001c38 <__NVIC_EnableIRQ>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff ffa2 	bl	8001d30 <SysTick_Config>
 8001dec:	4603      	mov	r3, r0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e014      	b.n	8001e32 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	791b      	ldrb	r3, [r3, #4]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d105      	bne.n	8001e1e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff fc2f 	bl	800167c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2202      	movs	r2, #2
 8001e22:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	795b      	ldrb	r3, [r3, #5]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_DAC_Start+0x16>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e040      	b.n	8001ed2 <HAL_DAC_Start+0x98>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2202      	movs	r2, #2
 8001e5a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6819      	ldr	r1, [r3, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	f003 0310 	and.w	r3, r3, #16
 8001e68:	2201      	movs	r2, #1
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10f      	bne.n	8001e9a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001e84:	2b3c      	cmp	r3, #60	; 0x3c
 8001e86:	d11d      	bne.n	8001ec4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0201 	orr.w	r2, r2, #1
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	e014      	b.n	8001ec4 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	f003 0310 	and.w	r3, r3, #16
 8001eaa:	213c      	movs	r1, #60	; 0x3c
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d107      	bne.n	8001ec4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0202 	orr.w	r2, r2, #2
 8001ec2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b087      	sub	sp, #28
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	795b      	ldrb	r3, [r3, #5]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_DAC_ConfigChannel+0x18>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e03c      	b.n	8001f70 <HAL_DAC_ConfigChannel+0x92>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2202      	movs	r2, #2
 8001f00:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f003 0310 	and.w	r3, r3, #16
 8001f10:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f003 0310 	and.w	r3, r3, #16
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6819      	ldr	r1, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f003 0310 	and.w	r3, r3, #16
 8001f52:	22c0      	movs	r2, #192	; 0xc0
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43da      	mvns	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	400a      	ands	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	371c      	adds	r7, #28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f8a:	f7ff fdf3 	bl	8001b74 <HAL_GetTick>
 8001f8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d008      	beq.n	8001fae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e052      	b.n	8002054 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0216 	bic.w	r2, r2, #22
 8001fbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695a      	ldr	r2, [r3, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fcc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d103      	bne.n	8001fde <HAL_DMA_Abort+0x62>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d007      	beq.n	8001fee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0208 	bic.w	r2, r2, #8
 8001fec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ffe:	e013      	b.n	8002028 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002000:	f7ff fdb8 	bl	8001b74 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b05      	cmp	r3, #5
 800200c:	d90c      	bls.n	8002028 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2220      	movs	r2, #32
 8002012:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2203      	movs	r2, #3
 8002018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e015      	b.n	8002054 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1e4      	bne.n	8002000 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	223f      	movs	r2, #63	; 0x3f
 800203c:	409a      	lsls	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3710      	adds	r7, #16
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d004      	beq.n	800207a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2280      	movs	r2, #128	; 0x80
 8002074:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e00c      	b.n	8002094 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2205      	movs	r2, #5
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0201 	bic.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	; 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	e169      	b.n	8002394 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020c0:	2201      	movs	r2, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4013      	ands	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020d4:	693a      	ldr	r2, [r7, #16]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	429a      	cmp	r2, r3
 80020da:	f040 8158 	bne.w	800238e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d005      	beq.n	80020f6 <HAL_GPIO_Init+0x56>
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d130      	bne.n	8002158 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	2203      	movs	r2, #3
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800212c:	2201      	movs	r2, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 0201 	and.w	r2, r3, #1
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b03      	cmp	r3, #3
 8002162:	d017      	beq.n	8002194 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2203      	movs	r2, #3
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d123      	bne.n	80021e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	08da      	lsrs	r2, r3, #3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3208      	adds	r2, #8
 80021a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	220f      	movs	r2, #15
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	691a      	ldr	r2, [r3, #16]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	08da      	lsrs	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3208      	adds	r2, #8
 80021e2:	69b9      	ldr	r1, [r7, #24]
 80021e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0203 	and.w	r2, r3, #3
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 80b2 	beq.w	800238e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800222a:	4b60      	ldr	r3, [pc, #384]	; (80023ac <HAL_GPIO_Init+0x30c>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	4a5f      	ldr	r2, [pc, #380]	; (80023ac <HAL_GPIO_Init+0x30c>)
 8002230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002234:	6453      	str	r3, [r2, #68]	; 0x44
 8002236:	4b5d      	ldr	r3, [pc, #372]	; (80023ac <HAL_GPIO_Init+0x30c>)
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002242:	4a5b      	ldr	r2, [pc, #364]	; (80023b0 <HAL_GPIO_Init+0x310>)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	089b      	lsrs	r3, r3, #2
 8002248:	3302      	adds	r3, #2
 800224a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	220f      	movs	r2, #15
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4013      	ands	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a52      	ldr	r2, [pc, #328]	; (80023b4 <HAL_GPIO_Init+0x314>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d02b      	beq.n	80022c6 <HAL_GPIO_Init+0x226>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a51      	ldr	r2, [pc, #324]	; (80023b8 <HAL_GPIO_Init+0x318>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d025      	beq.n	80022c2 <HAL_GPIO_Init+0x222>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a50      	ldr	r2, [pc, #320]	; (80023bc <HAL_GPIO_Init+0x31c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d01f      	beq.n	80022be <HAL_GPIO_Init+0x21e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4f      	ldr	r2, [pc, #316]	; (80023c0 <HAL_GPIO_Init+0x320>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d019      	beq.n	80022ba <HAL_GPIO_Init+0x21a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4e      	ldr	r2, [pc, #312]	; (80023c4 <HAL_GPIO_Init+0x324>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d013      	beq.n	80022b6 <HAL_GPIO_Init+0x216>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4d      	ldr	r2, [pc, #308]	; (80023c8 <HAL_GPIO_Init+0x328>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00d      	beq.n	80022b2 <HAL_GPIO_Init+0x212>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4c      	ldr	r2, [pc, #304]	; (80023cc <HAL_GPIO_Init+0x32c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d007      	beq.n	80022ae <HAL_GPIO_Init+0x20e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4b      	ldr	r2, [pc, #300]	; (80023d0 <HAL_GPIO_Init+0x330>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_GPIO_Init+0x20a>
 80022a6:	2307      	movs	r3, #7
 80022a8:	e00e      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022aa:	2308      	movs	r3, #8
 80022ac:	e00c      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022ae:	2306      	movs	r3, #6
 80022b0:	e00a      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022b2:	2305      	movs	r3, #5
 80022b4:	e008      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022b6:	2304      	movs	r3, #4
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022ba:	2303      	movs	r3, #3
 80022bc:	e004      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022be:	2302      	movs	r3, #2
 80022c0:	e002      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <HAL_GPIO_Init+0x228>
 80022c6:	2300      	movs	r3, #0
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	f002 0203 	and.w	r2, r2, #3
 80022ce:	0092      	lsls	r2, r2, #2
 80022d0:	4093      	lsls	r3, r2
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022d8:	4935      	ldr	r1, [pc, #212]	; (80023b0 <HAL_GPIO_Init+0x310>)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	3302      	adds	r3, #2
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022e6:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <HAL_GPIO_Init+0x334>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800230a:	4a32      	ldr	r2, [pc, #200]	; (80023d4 <HAL_GPIO_Init+0x334>)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002310:	4b30      	ldr	r3, [pc, #192]	; (80023d4 <HAL_GPIO_Init+0x334>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002334:	4a27      	ldr	r2, [pc, #156]	; (80023d4 <HAL_GPIO_Init+0x334>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800233a:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <HAL_GPIO_Init+0x334>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800235e:	4a1d      	ldr	r2, [pc, #116]	; (80023d4 <HAL_GPIO_Init+0x334>)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002364:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <HAL_GPIO_Init+0x334>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002388:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <HAL_GPIO_Init+0x334>)
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3301      	adds	r3, #1
 8002392:	61fb      	str	r3, [r7, #28]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	2b0f      	cmp	r3, #15
 8002398:	f67f ae92 	bls.w	80020c0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3724      	adds	r7, #36	; 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40013800 	.word	0x40013800
 80023b4:	40020000 	.word	0x40020000
 80023b8:	40020400 	.word	0x40020400
 80023bc:	40020800 	.word	0x40020800
 80023c0:	40020c00 	.word	0x40020c00
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40021400 	.word	0x40021400
 80023cc:	40021800 	.word	0x40021800
 80023d0:	40021c00 	.word	0x40021c00
 80023d4:	40013c00 	.word	0x40013c00

080023d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	887b      	ldrh	r3, [r7, #2]
 80023ea:	4013      	ands	r3, r2
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	e001      	b.n	80023fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023f6:	2300      	movs	r3, #0
 80023f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002424:	e003      	b.n	800242e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	041a      	lsls	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	619a      	str	r2, [r3, #24]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800243a:	b480      	push	{r7}
 800243c:	b085      	sub	sp, #20
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800244c:	887a      	ldrh	r2, [r7, #2]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	4013      	ands	r3, r2
 8002452:	041a      	lsls	r2, r3, #16
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	43d9      	mvns	r1, r3
 8002458:	887b      	ldrh	r3, [r7, #2]
 800245a:	400b      	ands	r3, r1
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	619a      	str	r2, [r3, #24]
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800246e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002470:	b08f      	sub	sp, #60	; 0x3c
 8002472:	af0a      	add	r7, sp, #40	; 0x28
 8002474:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e116      	b.n	80026ae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d106      	bne.n	80024a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff fa1c 	bl	80018d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2203      	movs	r2, #3
 80024a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d102      	bne.n	80024ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f003 fb64 	bl	8005b8c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	687e      	ldr	r6, [r7, #4]
 80024cc:	466d      	mov	r5, sp
 80024ce:	f106 0410 	add.w	r4, r6, #16
 80024d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024de:	e885 0003 	stmia.w	r5, {r0, r1}
 80024e2:	1d33      	adds	r3, r6, #4
 80024e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024e6:	6838      	ldr	r0, [r7, #0]
 80024e8:	f003 fac8 	bl	8005a7c <USB_CoreInit>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2202      	movs	r2, #2
 80024f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e0d7      	b.n	80026ae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f003 fb52 	bl	8005bae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800250a:	2300      	movs	r3, #0
 800250c:	73fb      	strb	r3, [r7, #15]
 800250e:	e04a      	b.n	80025a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002510:	7bfa      	ldrb	r2, [r7, #15]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4413      	add	r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	333d      	adds	r3, #61	; 0x3d
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	333c      	adds	r3, #60	; 0x3c
 8002534:	7bfa      	ldrb	r2, [r7, #15]
 8002536:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002538:	7bfa      	ldrb	r2, [r7, #15]
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	b298      	uxth	r0, r3
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	3344      	adds	r3, #68	; 0x44
 800254c:	4602      	mov	r2, r0
 800254e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002550:	7bfa      	ldrb	r2, [r7, #15]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	3340      	adds	r3, #64	; 0x40
 8002560:	2200      	movs	r2, #0
 8002562:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	3348      	adds	r3, #72	; 0x48
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	334c      	adds	r3, #76	; 0x4c
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	3354      	adds	r3, #84	; 0x54
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
 80025a2:	3301      	adds	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	7bfa      	ldrb	r2, [r7, #15]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d3af      	bcc.n	8002510 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	73fb      	strb	r3, [r7, #15]
 80025b4:	e044      	b.n	8002640 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80025de:	7bfa      	ldrb	r2, [r7, #15]
 80025e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025e2:	7bfa      	ldrb	r2, [r7, #15]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800260e:	7bfa      	ldrb	r2, [r7, #15]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	3301      	adds	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	429a      	cmp	r2, r3
 8002648:	d3b5      	bcc.n	80025b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	687e      	ldr	r6, [r7, #4]
 8002652:	466d      	mov	r5, sp
 8002654:	f106 0410 	add.w	r4, r6, #16
 8002658:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800265a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800265c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800265e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002660:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002664:	e885 0003 	stmia.w	r5, {r0, r1}
 8002668:	1d33      	adds	r3, r6, #4
 800266a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800266c:	6838      	ldr	r0, [r7, #0]
 800266e:	f003 faeb 	bl	8005c48 <USB_DevInit>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e014      	b.n	80026ae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	2b01      	cmp	r3, #1
 800269a:	d102      	bne.n	80026a2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f80b 	bl	80026b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f003 fcb9 	bl	800601e <USB_DevDisconnect>

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080026b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_PCDEx_ActivateLPM+0x44>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	10000003 	.word	0x10000003

08002700 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800270a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800270e:	6013      	str	r3, [r2, #0]
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40007000 	.word	0x40007000

08002720 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800272a:	4b23      	ldr	r3, [pc, #140]	; (80027b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	4a22      	ldr	r2, [pc, #136]	; (80027b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002734:	6413      	str	r3, [r2, #64]	; 0x40
 8002736:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002742:	4b1e      	ldr	r3, [pc, #120]	; (80027bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a1d      	ldr	r2, [pc, #116]	; (80027bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800274c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800274e:	f7ff fa11 	bl	8001b74 <HAL_GetTick>
 8002752:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002754:	e009      	b.n	800276a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002756:	f7ff fa0d 	bl	8001b74 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002764:	d901      	bls.n	800276a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e022      	b.n	80027b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800276a:	4b14      	ldr	r3, [pc, #80]	; (80027bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002772:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002776:	d1ee      	bne.n	8002756 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002778:	4b10      	ldr	r3, [pc, #64]	; (80027bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0f      	ldr	r2, [pc, #60]	; (80027bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800277e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002782:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002784:	f7ff f9f6 	bl	8001b74 <HAL_GetTick>
 8002788:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800278a:	e009      	b.n	80027a0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800278c:	f7ff f9f2 	bl	8001b74 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800279a:	d901      	bls.n	80027a0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e007      	b.n	80027b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <HAL_PWREx_EnableOverDrive+0x9c>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027ac:	d1ee      	bne.n	800278c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40007000 	.word	0x40007000

080027c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80027c8:	2300      	movs	r3, #0
 80027ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e291      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 8087 	beq.w	80028f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027e4:	4b96      	ldr	r3, [pc, #600]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 030c 	and.w	r3, r3, #12
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d00c      	beq.n	800280a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027f0:	4b93      	ldr	r3, [pc, #588]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 030c 	and.w	r3, r3, #12
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d112      	bne.n	8002822 <HAL_RCC_OscConfig+0x62>
 80027fc:	4b90      	ldr	r3, [pc, #576]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002808:	d10b      	bne.n	8002822 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280a:	4b8d      	ldr	r3, [pc, #564]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d06c      	beq.n	80028f0 <HAL_RCC_OscConfig+0x130>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d168      	bne.n	80028f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e26b      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800282a:	d106      	bne.n	800283a <HAL_RCC_OscConfig+0x7a>
 800282c:	4b84      	ldr	r3, [pc, #528]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a83      	ldr	r2, [pc, #524]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	e02e      	b.n	8002898 <HAL_RCC_OscConfig+0xd8>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10c      	bne.n	800285c <HAL_RCC_OscConfig+0x9c>
 8002842:	4b7f      	ldr	r3, [pc, #508]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a7e      	ldr	r2, [pc, #504]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	4b7c      	ldr	r3, [pc, #496]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a7b      	ldr	r2, [pc, #492]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	e01d      	b.n	8002898 <HAL_RCC_OscConfig+0xd8>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002864:	d10c      	bne.n	8002880 <HAL_RCC_OscConfig+0xc0>
 8002866:	4b76      	ldr	r3, [pc, #472]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a75      	ldr	r2, [pc, #468]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800286c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002870:	6013      	str	r3, [r2, #0]
 8002872:	4b73      	ldr	r3, [pc, #460]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a72      	ldr	r2, [pc, #456]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e00b      	b.n	8002898 <HAL_RCC_OscConfig+0xd8>
 8002880:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a6e      	ldr	r2, [pc, #440]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288a:	6013      	str	r3, [r2, #0]
 800288c:	4b6c      	ldr	r3, [pc, #432]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a6b      	ldr	r2, [pc, #428]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d013      	beq.n	80028c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7ff f968 	bl	8001b74 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a8:	f7ff f964 	bl	8001b74 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b64      	cmp	r3, #100	; 0x64
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e21f      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	4b61      	ldr	r3, [pc, #388]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d0f0      	beq.n	80028a8 <HAL_RCC_OscConfig+0xe8>
 80028c6:	e014      	b.n	80028f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7ff f954 	bl	8001b74 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d0:	f7ff f950 	bl	8001b74 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b64      	cmp	r3, #100	; 0x64
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e20b      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028e2:	4b57      	ldr	r3, [pc, #348]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x110>
 80028ee:	e000      	b.n	80028f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d069      	beq.n	80029d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028fe:	4b50      	ldr	r3, [pc, #320]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00b      	beq.n	8002922 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800290a:	4b4d      	ldr	r3, [pc, #308]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b08      	cmp	r3, #8
 8002914:	d11c      	bne.n	8002950 <HAL_RCC_OscConfig+0x190>
 8002916:	4b4a      	ldr	r3, [pc, #296]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d116      	bne.n	8002950 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002922:	4b47      	ldr	r3, [pc, #284]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d005      	beq.n	800293a <HAL_RCC_OscConfig+0x17a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d001      	beq.n	800293a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e1df      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293a:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	493d      	ldr	r1, [pc, #244]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294e:	e040      	b.n	80029d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d023      	beq.n	80029a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002958:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a38      	ldr	r2, [pc, #224]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002964:	f7ff f906 	bl	8001b74 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296c:	f7ff f902 	bl	8001b74 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e1bd      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297e:	4b30      	ldr	r3, [pc, #192]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298a:	4b2d      	ldr	r3, [pc, #180]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4929      	ldr	r1, [pc, #164]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]
 800299e:	e018      	b.n	80029d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a0:	4b27      	ldr	r3, [pc, #156]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a26      	ldr	r2, [pc, #152]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 80029a6:	f023 0301 	bic.w	r3, r3, #1
 80029aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7ff f8e2 	bl	8001b74 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b4:	f7ff f8de 	bl	8001b74 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e199      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c6:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d038      	beq.n	8002a50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d019      	beq.n	8002a1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e6:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 80029e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ea:	4a15      	ldr	r2, [pc, #84]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f2:	f7ff f8bf 	bl	8001b74 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029fa:	f7ff f8bb 	bl	8001b74 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e176      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0c:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x23a>
 8002a18:	e01a      	b.n	8002a50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a1a:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1e:	4a08      	ldr	r2, [pc, #32]	; (8002a40 <HAL_RCC_OscConfig+0x280>)
 8002a20:	f023 0301 	bic.w	r3, r3, #1
 8002a24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a26:	f7ff f8a5 	bl	8001b74 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a2e:	f7ff f8a1 	bl	8001b74 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d903      	bls.n	8002a44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e15c      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
 8002a40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a44:	4b91      	ldr	r3, [pc, #580]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1ee      	bne.n	8002a2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80a4 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a5e:	4b8b      	ldr	r3, [pc, #556]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10d      	bne.n	8002a86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a6a:	4b88      	ldr	r3, [pc, #544]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	4a87      	ldr	r2, [pc, #540]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a74:	6413      	str	r3, [r2, #64]	; 0x40
 8002a76:	4b85      	ldr	r3, [pc, #532]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7e:	60bb      	str	r3, [r7, #8]
 8002a80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a82:	2301      	movs	r3, #1
 8002a84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a86:	4b82      	ldr	r3, [pc, #520]	; (8002c90 <HAL_RCC_OscConfig+0x4d0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d118      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002a92:	4b7f      	ldr	r3, [pc, #508]	; (8002c90 <HAL_RCC_OscConfig+0x4d0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a7e      	ldr	r2, [pc, #504]	; (8002c90 <HAL_RCC_OscConfig+0x4d0>)
 8002a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a9e:	f7ff f869 	bl	8001b74 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa6:	f7ff f865 	bl	8001b74 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b64      	cmp	r3, #100	; 0x64
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e120      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ab8:	4b75      	ldr	r3, [pc, #468]	; (8002c90 <HAL_RCC_OscConfig+0x4d0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0f0      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d106      	bne.n	8002ada <HAL_RCC_OscConfig+0x31a>
 8002acc:	4b6f      	ldr	r3, [pc, #444]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad0:	4a6e      	ldr	r2, [pc, #440]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad8:	e02d      	b.n	8002b36 <HAL_RCC_OscConfig+0x376>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10c      	bne.n	8002afc <HAL_RCC_OscConfig+0x33c>
 8002ae2:	4b6a      	ldr	r3, [pc, #424]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae6:	4a69      	ldr	r2, [pc, #420]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	6713      	str	r3, [r2, #112]	; 0x70
 8002aee:	4b67      	ldr	r3, [pc, #412]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af2:	4a66      	ldr	r2, [pc, #408]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002af4:	f023 0304 	bic.w	r3, r3, #4
 8002af8:	6713      	str	r3, [r2, #112]	; 0x70
 8002afa:	e01c      	b.n	8002b36 <HAL_RCC_OscConfig+0x376>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	d10c      	bne.n	8002b1e <HAL_RCC_OscConfig+0x35e>
 8002b04:	4b61      	ldr	r3, [pc, #388]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	4a60      	ldr	r2, [pc, #384]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b0a:	f043 0304 	orr.w	r3, r3, #4
 8002b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b10:	4b5e      	ldr	r3, [pc, #376]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	4a5d      	ldr	r2, [pc, #372]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b1c:	e00b      	b.n	8002b36 <HAL_RCC_OscConfig+0x376>
 8002b1e:	4b5b      	ldr	r3, [pc, #364]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	4a5a      	ldr	r2, [pc, #360]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b24:	f023 0301 	bic.w	r3, r3, #1
 8002b28:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2a:	4b58      	ldr	r3, [pc, #352]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2e:	4a57      	ldr	r2, [pc, #348]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b30:	f023 0304 	bic.w	r3, r3, #4
 8002b34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d015      	beq.n	8002b6a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3e:	f7ff f819 	bl	8001b74 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b44:	e00a      	b.n	8002b5c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b46:	f7ff f815 	bl	8001b74 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e0ce      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5c:	4b4b      	ldr	r3, [pc, #300]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0ee      	beq.n	8002b46 <HAL_RCC_OscConfig+0x386>
 8002b68:	e014      	b.n	8002b94 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6a:	f7ff f803 	bl	8001b74 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b70:	e00a      	b.n	8002b88 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b72:	f7fe ffff 	bl	8001b74 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e0b8      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b88:	4b40      	ldr	r3, [pc, #256]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1ee      	bne.n	8002b72 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d105      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b9a:	4b3c      	ldr	r3, [pc, #240]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	4a3b      	ldr	r2, [pc, #236]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 80a4 	beq.w	8002cf8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bb0:	4b36      	ldr	r3, [pc, #216]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d06b      	beq.n	8002c94 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d149      	bne.n	8002c58 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc4:	4b31      	ldr	r3, [pc, #196]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a30      	ldr	r2, [pc, #192]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002bca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd0:	f7fe ffd0 	bl	8001b74 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7fe ffcc 	bl	8001b74 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e087      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bea:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69da      	ldr	r2, [r3, #28]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	019b      	lsls	r3, r3, #6
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	085b      	lsrs	r3, r3, #1
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	041b      	lsls	r3, r3, #16
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	061b      	lsls	r3, r3, #24
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	4a1b      	ldr	r2, [pc, #108]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002c1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c22:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7fe ffa0 	bl	8001b74 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c38:	f7fe ff9c 	bl	8001b74 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e057      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c4a:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x478>
 8002c56:	e04f      	b.n	8002cf8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c58:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a0b      	ldr	r2, [pc, #44]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002c5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7fe ff86 	bl	8001b74 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7fe ff82 	bl	8001b74 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e03d      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7e:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <HAL_RCC_OscConfig+0x4cc>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x4ac>
 8002c8a:	e035      	b.n	8002cf8 <HAL_RCC_OscConfig+0x538>
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002c94:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <HAL_RCC_OscConfig+0x544>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d028      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d121      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d11a      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d111      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cda:	085b      	lsrs	r3, r3, #1
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d107      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800

08002d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e0d0      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d20:	4b6a      	ldr	r3, [pc, #424]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d910      	bls.n	8002d50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2e:	4b67      	ldr	r3, [pc, #412]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 020f 	bic.w	r2, r3, #15
 8002d36:	4965      	ldr	r1, [pc, #404]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3e:	4b63      	ldr	r3, [pc, #396]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0b8      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d020      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d68:	4b59      	ldr	r3, [pc, #356]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	4a58      	ldr	r2, [pc, #352]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d80:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	4a52      	ldr	r2, [pc, #328]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d8a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d8c:	4b50      	ldr	r3, [pc, #320]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	494d      	ldr	r1, [pc, #308]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d040      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d107      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	4b47      	ldr	r3, [pc, #284]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d115      	bne.n	8002dea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e07f      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d107      	bne.n	8002dda <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dca:	4b41      	ldr	r3, [pc, #260]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d109      	bne.n	8002dea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e073      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dda:	4b3d      	ldr	r3, [pc, #244]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e06b      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dea:	4b39      	ldr	r3, [pc, #228]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f023 0203 	bic.w	r2, r3, #3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	4936      	ldr	r1, [pc, #216]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dfc:	f7fe feba 	bl	8001b74 <HAL_GetTick>
 8002e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e02:	e00a      	b.n	8002e1a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e04:	f7fe feb6 	bl	8001b74 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e053      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1a:	4b2d      	ldr	r3, [pc, #180]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 020c 	and.w	r2, r3, #12
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d1eb      	bne.n	8002e04 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d210      	bcs.n	8002e5c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 020f 	bic.w	r2, r3, #15
 8002e42:	4922      	ldr	r1, [pc, #136]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e032      	b.n	8002ec2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e68:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4916      	ldr	r1, [pc, #88]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d009      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e86:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	490e      	ldr	r1, [pc, #56]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e9a:	f000 f821 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	; (8002ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	091b      	lsrs	r3, r3, #4
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	490a      	ldr	r1, [pc, #40]	; (8002ed4 <HAL_RCC_ClockConfig+0x1cc>)
 8002eac:	5ccb      	ldrb	r3, [r1, r3]
 8002eae:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb2:	4a09      	ldr	r2, [pc, #36]	; (8002ed8 <HAL_RCC_ClockConfig+0x1d0>)
 8002eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002eb6:	4b09      	ldr	r3, [pc, #36]	; (8002edc <HAL_RCC_ClockConfig+0x1d4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe fe16 	bl	8001aec <HAL_InitTick>

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40023c00 	.word	0x40023c00
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	0800676c 	.word	0x0800676c
 8002ed8:	20000004 	.word	0x20000004
 8002edc:	20000008 	.word	0x20000008

08002ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee4:	b094      	sub	sp, #80	; 0x50
 8002ee6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	647b      	str	r3, [r7, #68]	; 0x44
 8002eec:	2300      	movs	r3, #0
 8002eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ef8:	4b79      	ldr	r3, [pc, #484]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d00d      	beq.n	8002f20 <HAL_RCC_GetSysClockFreq+0x40>
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	f200 80e1 	bhi.w	80030cc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0x34>
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d003      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f12:	e0db      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f14:	4b73      	ldr	r3, [pc, #460]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f16:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f18:	e0db      	b.n	80030d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f1a:	4b73      	ldr	r3, [pc, #460]	; (80030e8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f1e:	e0d8      	b.n	80030d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f20:	4b6f      	ldr	r3, [pc, #444]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f28:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002f2a:	4b6d      	ldr	r3, [pc, #436]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d063      	beq.n	8002ffe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f36:	4b6a      	ldr	r3, [pc, #424]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	099b      	lsrs	r3, r3, #6
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f48:	633b      	str	r3, [r7, #48]	; 0x30
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f52:	4622      	mov	r2, r4
 8002f54:	462b      	mov	r3, r5
 8002f56:	f04f 0000 	mov.w	r0, #0
 8002f5a:	f04f 0100 	mov.w	r1, #0
 8002f5e:	0159      	lsls	r1, r3, #5
 8002f60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f64:	0150      	lsls	r0, r2, #5
 8002f66:	4602      	mov	r2, r0
 8002f68:	460b      	mov	r3, r1
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	1a51      	subs	r1, r2, r1
 8002f6e:	6139      	str	r1, [r7, #16]
 8002f70:	4629      	mov	r1, r5
 8002f72:	eb63 0301 	sbc.w	r3, r3, r1
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	f04f 0300 	mov.w	r3, #0
 8002f80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f84:	4659      	mov	r1, fp
 8002f86:	018b      	lsls	r3, r1, #6
 8002f88:	4651      	mov	r1, sl
 8002f8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f8e:	4651      	mov	r1, sl
 8002f90:	018a      	lsls	r2, r1, #6
 8002f92:	4651      	mov	r1, sl
 8002f94:	ebb2 0801 	subs.w	r8, r2, r1
 8002f98:	4659      	mov	r1, fp
 8002f9a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fb2:	4690      	mov	r8, r2
 8002fb4:	4699      	mov	r9, r3
 8002fb6:	4623      	mov	r3, r4
 8002fb8:	eb18 0303 	adds.w	r3, r8, r3
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	462b      	mov	r3, r5
 8002fc0:	eb49 0303 	adc.w	r3, r9, r3
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	024b      	lsls	r3, r1, #9
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fdc:	4621      	mov	r1, r4
 8002fde:	024a      	lsls	r2, r1, #9
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ff0:	f7fd f91e 	bl	8000230 <__aeabi_uldivmod>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ffc:	e058      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ffe:	4b38      	ldr	r3, [pc, #224]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	099b      	lsrs	r3, r3, #6
 8003004:	2200      	movs	r2, #0
 8003006:	4618      	mov	r0, r3
 8003008:	4611      	mov	r1, r2
 800300a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800300e:	623b      	str	r3, [r7, #32]
 8003010:	2300      	movs	r3, #0
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
 8003014:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003018:	4642      	mov	r2, r8
 800301a:	464b      	mov	r3, r9
 800301c:	f04f 0000 	mov.w	r0, #0
 8003020:	f04f 0100 	mov.w	r1, #0
 8003024:	0159      	lsls	r1, r3, #5
 8003026:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800302a:	0150      	lsls	r0, r2, #5
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4641      	mov	r1, r8
 8003032:	ebb2 0a01 	subs.w	sl, r2, r1
 8003036:	4649      	mov	r1, r9
 8003038:	eb63 0b01 	sbc.w	fp, r3, r1
 800303c:	f04f 0200 	mov.w	r2, #0
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003048:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800304c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003050:	ebb2 040a 	subs.w	r4, r2, sl
 8003054:	eb63 050b 	sbc.w	r5, r3, fp
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	00eb      	lsls	r3, r5, #3
 8003062:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003066:	00e2      	lsls	r2, r4, #3
 8003068:	4614      	mov	r4, r2
 800306a:	461d      	mov	r5, r3
 800306c:	4643      	mov	r3, r8
 800306e:	18e3      	adds	r3, r4, r3
 8003070:	603b      	str	r3, [r7, #0]
 8003072:	464b      	mov	r3, r9
 8003074:	eb45 0303 	adc.w	r3, r5, r3
 8003078:	607b      	str	r3, [r7, #4]
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003086:	4629      	mov	r1, r5
 8003088:	028b      	lsls	r3, r1, #10
 800308a:	4621      	mov	r1, r4
 800308c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003090:	4621      	mov	r1, r4
 8003092:	028a      	lsls	r2, r1, #10
 8003094:	4610      	mov	r0, r2
 8003096:	4619      	mov	r1, r3
 8003098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800309a:	2200      	movs	r2, #0
 800309c:	61bb      	str	r3, [r7, #24]
 800309e:	61fa      	str	r2, [r7, #28]
 80030a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030a4:	f7fd f8c4 	bl	8000230 <__aeabi_uldivmod>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4613      	mov	r3, r2
 80030ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	0c1b      	lsrs	r3, r3, #16
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	3301      	adds	r3, #1
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80030c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ca:	e002      	b.n	80030d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80030ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3750      	adds	r7, #80	; 0x50
 80030d8:	46bd      	mov	sp, r7
 80030da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800
 80030e4:	00f42400 	.word	0x00f42400
 80030e8:	007a1200 	.word	0x007a1200

080030ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030f0:	4b03      	ldr	r3, [pc, #12]	; (8003100 <HAL_RCC_GetHCLKFreq+0x14>)
 80030f2:	681b      	ldr	r3, [r3, #0]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20000004 	.word	0x20000004

08003104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003108:	f7ff fff0 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 800310c:	4602      	mov	r2, r0
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	0a9b      	lsrs	r3, r3, #10
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	4903      	ldr	r1, [pc, #12]	; (8003128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40023800 	.word	0x40023800
 8003128:	0800677c 	.word	0x0800677c

0800312c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003130:	f7ff ffdc 	bl	80030ec <HAL_RCC_GetHCLKFreq>
 8003134:	4602      	mov	r2, r0
 8003136:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	0b5b      	lsrs	r3, r3, #13
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	4903      	ldr	r1, [pc, #12]	; (8003150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003142:	5ccb      	ldrb	r3, [r1, r3]
 8003144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003148:	4618      	mov	r0, r3
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40023800 	.word	0x40023800
 8003150:	0800677c 	.word	0x0800677c

08003154 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b088      	sub	sp, #32
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b00      	cmp	r3, #0
 8003176:	d012      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003178:	4b65      	ldr	r3, [pc, #404]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	4a64      	ldr	r2, [pc, #400]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800317e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003182:	6093      	str	r3, [r2, #8]
 8003184:	4b62      	ldr	r3, [pc, #392]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318c:	4960      	ldr	r1, [pc, #384]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800319a:	2301      	movs	r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d017      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031aa:	4b59      	ldr	r3, [pc, #356]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b8:	4955      	ldr	r1, [pc, #340]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031c8:	d101      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80031ca:	2301      	movs	r3, #1
 80031cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80031d6:	2301      	movs	r3, #1
 80031d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d017      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031e6:	4b4a      	ldr	r3, [pc, #296]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f4:	4946      	ldr	r1, [pc, #280]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003204:	d101      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8003206:	2301      	movs	r3, #1
 8003208:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8003212:	2301      	movs	r3, #1
 8003214:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 808b 	beq.w	800333a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003224:	4b3a      	ldr	r3, [pc, #232]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	4a39      	ldr	r2, [pc, #228]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800322a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322e:	6413      	str	r3, [r2, #64]	; 0x40
 8003230:	4b37      	ldr	r3, [pc, #220]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800323c:	4b35      	ldr	r3, [pc, #212]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a34      	ldr	r2, [pc, #208]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003246:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003248:	f7fe fc94 	bl	8001b74 <HAL_GetTick>
 800324c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003250:	f7fe fc90 	bl	8001b74 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b64      	cmp	r3, #100	; 0x64
 800325c:	d901      	bls.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e2bc      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003262:	4b2c      	ldr	r3, [pc, #176]	; (8003314 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800326e:	4b28      	ldr	r3, [pc, #160]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003276:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d035      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	429a      	cmp	r2, r3
 800328a:	d02e      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800328c:	4b20      	ldr	r3, [pc, #128]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800328e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003294:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003296:	4b1e      	ldr	r3, [pc, #120]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329a:	4a1d      	ldr	r2, [pc, #116]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800329c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032a2:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	4a1a      	ldr	r2, [pc, #104]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80032ae:	4a18      	ldr	r2, [pc, #96]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032b4:	4b16      	ldr	r3, [pc, #88]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d114      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fe fc58 	bl	8001b74 <HAL_GetTick>
 80032c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c6:	e00a      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c8:	f7fe fc54 	bl	8001b74 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e27e      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032de:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0ee      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032f6:	d111      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80032f8:	4b05      	ldr	r3, [pc, #20]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003306:	400b      	ands	r3, r1
 8003308:	4901      	ldr	r1, [pc, #4]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800330a:	4313      	orrs	r3, r2
 800330c:	608b      	str	r3, [r1, #8]
 800330e:	e00b      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003310:	40023800 	.word	0x40023800
 8003314:	40007000 	.word	0x40007000
 8003318:	0ffffcff 	.word	0x0ffffcff
 800331c:	4ba4      	ldr	r3, [pc, #656]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	4aa3      	ldr	r2, [pc, #652]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003322:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003326:	6093      	str	r3, [r2, #8]
 8003328:	4ba1      	ldr	r3, [pc, #644]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800332a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003334:	499e      	ldr	r1, [pc, #632]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003336:	4313      	orrs	r3, r2
 8003338:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	2b00      	cmp	r3, #0
 8003344:	d010      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003346:	4b9a      	ldr	r3, [pc, #616]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800334c:	4a98      	ldr	r2, [pc, #608]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800334e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003352:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003356:	4b96      	ldr	r3, [pc, #600]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003358:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	4993      	ldr	r1, [pc, #588]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003374:	4b8e      	ldr	r3, [pc, #568]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	498b      	ldr	r1, [pc, #556]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003384:	4313      	orrs	r3, r2
 8003386:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003396:	4b86      	ldr	r3, [pc, #536]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a4:	4982      	ldr	r1, [pc, #520]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00a      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033b8:	4b7d      	ldr	r3, [pc, #500]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033c6:	497a      	ldr	r1, [pc, #488]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033da:	4b75      	ldr	r3, [pc, #468]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e0:	f023 0203 	bic.w	r2, r3, #3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e8:	4971      	ldr	r1, [pc, #452]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00a      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033fc:	4b6c      	ldr	r3, [pc, #432]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80033fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003402:	f023 020c 	bic.w	r2, r3, #12
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	4969      	ldr	r1, [pc, #420]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800340c:	4313      	orrs	r3, r2
 800340e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00a      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800341e:	4b64      	ldr	r3, [pc, #400]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003424:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342c:	4960      	ldr	r1, [pc, #384]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00a      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003440:	4b5b      	ldr	r3, [pc, #364]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003446:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800344e:	4958      	ldr	r1, [pc, #352]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003450:	4313      	orrs	r3, r2
 8003452:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003462:	4b53      	ldr	r3, [pc, #332]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003470:	494f      	ldr	r1, [pc, #316]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00a      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003484:	4b4a      	ldr	r3, [pc, #296]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003492:	4947      	ldr	r1, [pc, #284]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003494:	4313      	orrs	r3, r2
 8003496:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00a      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80034a6:	4b42      	ldr	r3, [pc, #264]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b4:	493e      	ldr	r1, [pc, #248]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80034c8:	4b39      	ldr	r3, [pc, #228]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d6:	4936      	ldr	r1, [pc, #216]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d011      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80034ea:	4b31      	ldr	r3, [pc, #196]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f8:	492d      	ldr	r1, [pc, #180]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003504:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003508:	d101      	bne.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800350a:	2301      	movs	r3, #1
 800350c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800351a:	4b25      	ldr	r3, [pc, #148]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003520:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003528:	4921      	ldr	r1, [pc, #132]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800353c:	4b1c      	ldr	r3, [pc, #112]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800353e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003542:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800354a:	4919      	ldr	r1, [pc, #100]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800355e:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003564:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800356c:	4910      	ldr	r1, [pc, #64]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	2b01      	cmp	r3, #1
 8003578:	d006      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 809d 	beq.w	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003588:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a08      	ldr	r2, [pc, #32]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800358e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003592:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003594:	f7fe faee 	bl	8001b74 <HAL_GetTick>
 8003598:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800359a:	e00b      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800359c:	f7fe faea 	bl	8001b74 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b64      	cmp	r3, #100	; 0x64
 80035a8:	d904      	bls.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e116      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x688>
 80035ae:	bf00      	nop
 80035b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035b4:	4b8b      	ldr	r3, [pc, #556]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1ed      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d017      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d113      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035d4:	4b83      	ldr	r3, [pc, #524]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80035d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035da:	0e1b      	lsrs	r3, r3, #24
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	019a      	lsls	r2, r3, #6
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	061b      	lsls	r3, r3, #24
 80035ec:	431a      	orrs	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	071b      	lsls	r3, r3, #28
 80035f4:	497b      	ldr	r1, [pc, #492]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d004      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003610:	d00a      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800361a:	2b00      	cmp	r3, #0
 800361c:	d024      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003626:	d11f      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003628:	4b6e      	ldr	r3, [pc, #440]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800362a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800362e:	0f1b      	lsrs	r3, r3, #28
 8003630:	f003 0307 	and.w	r3, r3, #7
 8003634:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	019a      	lsls	r2, r3, #6
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	061b      	lsls	r3, r3, #24
 8003642:	431a      	orrs	r2, r3
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	071b      	lsls	r3, r3, #28
 8003648:	4966      	ldr	r1, [pc, #408]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003650:	4b64      	ldr	r3, [pc, #400]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003656:	f023 021f 	bic.w	r2, r3, #31
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	3b01      	subs	r3, #1
 8003660:	4960      	ldr	r1, [pc, #384]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003662:	4313      	orrs	r3, r2
 8003664:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00d      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	019a      	lsls	r2, r3, #6
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	061b      	lsls	r3, r3, #24
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	071b      	lsls	r3, r3, #28
 8003688:	4956      	ldr	r1, [pc, #344]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003690:	4b54      	ldr	r3, [pc, #336]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a53      	ldr	r2, [pc, #332]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003696:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800369a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800369c:	f7fe fa6a 	bl	8001b74 <HAL_GetTick>
 80036a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036a4:	f7fe fa66 	bl	8001b74 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b64      	cmp	r3, #100	; 0x64
 80036b0:	d901      	bls.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e092      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036b6:	4b4b      	ldr	r3, [pc, #300]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	f040 8088 	bne.w	80037da <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80036ca:	4b46      	ldr	r3, [pc, #280]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a45      	ldr	r2, [pc, #276]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80036d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d6:	f7fe fa4d 	bl	8001b74 <HAL_GetTick>
 80036da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036dc:	e008      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036de:	f7fe fa49 	bl	8001b74 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b64      	cmp	r3, #100	; 0x64
 80036ea:	d901      	bls.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e075      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80036f0:	4b3c      	ldr	r3, [pc, #240]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036fc:	d0ef      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800371a:	2b00      	cmp	r3, #0
 800371c:	d024      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	2b00      	cmp	r3, #0
 8003724:	d120      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003726:	4b2f      	ldr	r3, [pc, #188]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372c:	0c1b      	lsrs	r3, r3, #16
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	019a      	lsls	r2, r3, #6
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	041b      	lsls	r3, r3, #16
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	061b      	lsls	r3, r3, #24
 8003746:	4927      	ldr	r1, [pc, #156]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800374e:	4b25      	ldr	r3, [pc, #148]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003754:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	3b01      	subs	r3, #1
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	4920      	ldr	r1, [pc, #128]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d018      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003778:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800377c:	d113      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800377e:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003784:	0e1b      	lsrs	r3, r3, #24
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	019a      	lsls	r2, r3, #6
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	041b      	lsls	r3, r3, #16
 8003798:	431a      	orrs	r2, r3
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	061b      	lsls	r3, r3, #24
 800379e:	4911      	ldr	r1, [pc, #68]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037a6:	4b0f      	ldr	r3, [pc, #60]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a0e      	ldr	r2, [pc, #56]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b2:	f7fe f9df 	bl	8001b74 <HAL_GetTick>
 80037b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037b8:	e008      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037ba:	f7fe f9db 	bl	8001b74 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b64      	cmp	r3, #100	; 0x64
 80037c6:	d901      	bls.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e007      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037d8:	d1ef      	bne.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3720      	adds	r7, #32
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	40023800 	.word	0x40023800

080037e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e09d      	b.n	8003936 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d108      	bne.n	8003814 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800380a:	d009      	beq.n	8003820 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	61da      	str	r2, [r3, #28]
 8003812:	e005      	b.n	8003820 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d106      	bne.n	8003840 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fd ff5e 	bl	80016fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2202      	movs	r2, #2
 8003844:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003856:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003860:	d902      	bls.n	8003868 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003862:	2300      	movs	r3, #0
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	e002      	b.n	800386e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800386c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003876:	d007      	beq.n	8003888 <HAL_SPI_Init+0xa0>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003880:	d002      	beq.n	8003888 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ca:	ea42 0103 	orr.w	r1, r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	0c1b      	lsrs	r3, r3, #16
 80038e4:	f003 0204 	and.w	r2, r3, #4
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003904:	ea42 0103 	orr.w	r1, r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69da      	ldr	r2, [r3, #28]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003924:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b088      	sub	sp, #32
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	603b      	str	r3, [r7, #0]
 800394a:	4613      	mov	r3, r2
 800394c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_SPI_Transmit+0x22>
 800395c:	2302      	movs	r3, #2
 800395e:	e158      	b.n	8003c12 <HAL_SPI_Transmit+0x2d4>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003968:	f7fe f904 	bl	8001b74 <HAL_GetTick>
 800396c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800396e:	88fb      	ldrh	r3, [r7, #6]
 8003970:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b01      	cmp	r3, #1
 800397c:	d002      	beq.n	8003984 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800397e:	2302      	movs	r3, #2
 8003980:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003982:	e13d      	b.n	8003c00 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_SPI_Transmit+0x52>
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d102      	bne.n	8003996 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003994:	e134      	b.n	8003c00 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2203      	movs	r2, #3
 800399a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	88fa      	ldrh	r2, [r7, #6]
 80039ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	88fa      	ldrh	r2, [r7, #6]
 80039b4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e0:	d10f      	bne.n	8003a02 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0c:	2b40      	cmp	r3, #64	; 0x40
 8003a0e:	d007      	beq.n	8003a20 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a28:	d94b      	bls.n	8003ac2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_SPI_Transmit+0xfa>
 8003a32:	8afb      	ldrh	r3, [r7, #22]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d13e      	bne.n	8003ab6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	881a      	ldrh	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	1c9a      	adds	r2, r3, #2
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a5c:	e02b      	b.n	8003ab6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d112      	bne.n	8003a92 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	881a      	ldrh	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	1c9a      	adds	r2, r3, #2
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a90:	e011      	b.n	8003ab6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a92:	f7fe f86f 	bl	8001b74 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d803      	bhi.n	8003aaa <HAL_SPI_Transmit+0x16c>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa8:	d102      	bne.n	8003ab0 <HAL_SPI_Transmit+0x172>
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d102      	bne.n	8003ab6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ab4:	e0a4      	b.n	8003c00 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1ce      	bne.n	8003a5e <HAL_SPI_Transmit+0x120>
 8003ac0:	e07c      	b.n	8003bbc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d002      	beq.n	8003ad0 <HAL_SPI_Transmit+0x192>
 8003aca:	8afb      	ldrh	r3, [r7, #22]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d170      	bne.n	8003bb2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d912      	bls.n	8003b00 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ade:	881a      	ldrh	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	1c9a      	adds	r2, r3, #2
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b02      	subs	r3, #2
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003afe:	e058      	b.n	8003bb2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	330c      	adds	r3, #12
 8003b0a:	7812      	ldrb	r2, [r2, #0]
 8003b0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003b26:	e044      	b.n	8003bb2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d12b      	bne.n	8003b8e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d912      	bls.n	8003b66 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b44:	881a      	ldrh	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	1c9a      	adds	r2, r3, #2
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b02      	subs	r3, #2
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b64:	e025      	b.n	8003bb2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	330c      	adds	r3, #12
 8003b70:	7812      	ldrb	r2, [r2, #0]
 8003b72:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b8c:	e011      	b.n	8003bb2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b8e:	f7fd fff1 	bl	8001b74 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d803      	bhi.n	8003ba6 <HAL_SPI_Transmit+0x268>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba4:	d102      	bne.n	8003bac <HAL_SPI_Transmit+0x26e>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d102      	bne.n	8003bb2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003bb0:	e026      	b.n	8003c00 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1b5      	bne.n	8003b28 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	6839      	ldr	r1, [r7, #0]
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 f949 	bl	8003e58 <SPI_EndRxTxTransaction>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10a      	bne.n	8003bf0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	77fb      	strb	r3, [r7, #31]
 8003bfc:	e000      	b.n	8003c00 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003bfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003c10:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3720      	adds	r7, #32
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	603b      	str	r3, [r7, #0]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c2c:	f7fd ffa2 	bl	8001b74 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	4413      	add	r3, r2
 8003c3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c3c:	f7fd ff9a 	bl	8001b74 <HAL_GetTick>
 8003c40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c42:	4b39      	ldr	r3, [pc, #228]	; (8003d28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	015b      	lsls	r3, r3, #5
 8003c48:	0d1b      	lsrs	r3, r3, #20
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	fb02 f303 	mul.w	r3, r2, r3
 8003c50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c52:	e054      	b.n	8003cfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5a:	d050      	beq.n	8003cfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c5c:	f7fd ff8a 	bl	8001b74 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d902      	bls.n	8003c72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d13d      	bne.n	8003cee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c8a:	d111      	bne.n	8003cb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c94:	d004      	beq.n	8003ca0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9e:	d107      	bne.n	8003cb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb8:	d10f      	bne.n	8003cda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e017      	b.n	8003d1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4013      	ands	r3, r2
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	bf0c      	ite	eq
 8003d0e:	2301      	moveq	r3, #1
 8003d10:	2300      	movne	r3, #0
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	461a      	mov	r2, r3
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d19b      	bne.n	8003c54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3720      	adds	r7, #32
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000004 	.word	0x20000004

08003d2c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	; 0x28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d3e:	f7fd ff19 	bl	8001b74 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003d4e:	f7fd ff11 	bl	8001b74 <HAL_GetTick>
 8003d52:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	330c      	adds	r3, #12
 8003d5a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d5c:	4b3d      	ldr	r3, [pc, #244]	; (8003e54 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	4613      	mov	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	00da      	lsls	r2, r3, #3
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	0d1b      	lsrs	r3, r3, #20
 8003d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6e:	fb02 f303 	mul.w	r3, r2, r3
 8003d72:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d74:	e060      	b.n	8003e38 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d7c:	d107      	bne.n	8003d8e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d104      	bne.n	8003d8e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d8c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d94:	d050      	beq.n	8003e38 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d96:	f7fd feed 	bl	8001b74 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d902      	bls.n	8003dac <SPI_WaitFifoStateUntilTimeout+0x80>
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d13d      	bne.n	8003e28 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dc4:	d111      	bne.n	8003dea <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dce:	d004      	beq.n	8003dda <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd8:	d107      	bne.n	8003dea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003de8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003df2:	d10f      	bne.n	8003e14 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e010      	b.n	8003e4a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	3b01      	subs	r3, #1
 8003e36:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	4013      	ands	r3, r2
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d196      	bne.n	8003d76 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3728      	adds	r7, #40	; 0x28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000004 	.word	0x20000004

08003e58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f7ff ff5b 	bl	8003d2c <SPI_WaitFifoStateUntilTimeout>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d007      	beq.n	8003e8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e80:	f043 0220 	orr.w	r2, r3, #32
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e046      	b.n	8003f1a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e8c:	4b25      	ldr	r3, [pc, #148]	; (8003f24 <SPI_EndRxTxTransaction+0xcc>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a25      	ldr	r2, [pc, #148]	; (8003f28 <SPI_EndRxTxTransaction+0xd0>)
 8003e92:	fba2 2303 	umull	r2, r3, r2, r3
 8003e96:	0d5b      	lsrs	r3, r3, #21
 8003e98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ea0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eaa:	d112      	bne.n	8003ed2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	2180      	movs	r1, #128	; 0x80
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f7ff feb0 	bl	8003c1c <SPI_WaitFlagStateUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d016      	beq.n	8003ef0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec6:	f043 0220 	orr.w	r2, r3, #32
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e023      	b.n	8003f1a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee8:	2b80      	cmp	r3, #128	; 0x80
 8003eea:	d0f2      	beq.n	8003ed2 <SPI_EndRxTxTransaction+0x7a>
 8003eec:	e000      	b.n	8003ef0 <SPI_EndRxTxTransaction+0x98>
        break;
 8003eee:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f7ff ff15 	bl	8003d2c <SPI_WaitFifoStateUntilTimeout>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d007      	beq.n	8003f18 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0c:	f043 0220 	orr.w	r2, r3, #32
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e000      	b.n	8003f1a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000004 	.word	0x20000004
 8003f28:	165e9f81 	.word	0x165e9f81

08003f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e049      	b.n	8003fd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d106      	bne.n	8003f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fd fc16 	bl	8001784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3304      	adds	r3, #4
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	f000 f9f6 	bl	800435c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d001      	beq.n	8003ff4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e054      	b.n	800409e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a26      	ldr	r2, [pc, #152]	; (80040ac <HAL_TIM_Base_Start_IT+0xd0>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d022      	beq.n	800405c <HAL_TIM_Base_Start_IT+0x80>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401e:	d01d      	beq.n	800405c <HAL_TIM_Base_Start_IT+0x80>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a22      	ldr	r2, [pc, #136]	; (80040b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d018      	beq.n	800405c <HAL_TIM_Base_Start_IT+0x80>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a21      	ldr	r2, [pc, #132]	; (80040b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d013      	beq.n	800405c <HAL_TIM_Base_Start_IT+0x80>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1f      	ldr	r2, [pc, #124]	; (80040b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00e      	beq.n	800405c <HAL_TIM_Base_Start_IT+0x80>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a1e      	ldr	r2, [pc, #120]	; (80040bc <HAL_TIM_Base_Start_IT+0xe0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d009      	beq.n	800405c <HAL_TIM_Base_Start_IT+0x80>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a1c      	ldr	r2, [pc, #112]	; (80040c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d004      	beq.n	800405c <HAL_TIM_Base_Start_IT+0x80>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a1b      	ldr	r2, [pc, #108]	; (80040c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d115      	bne.n	8004088 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	689a      	ldr	r2, [r3, #8]
 8004062:	4b19      	ldr	r3, [pc, #100]	; (80040c8 <HAL_TIM_Base_Start_IT+0xec>)
 8004064:	4013      	ands	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2b06      	cmp	r3, #6
 800406c:	d015      	beq.n	800409a <HAL_TIM_Base_Start_IT+0xbe>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004074:	d011      	beq.n	800409a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0201 	orr.w	r2, r2, #1
 8004084:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004086:	e008      	b.n	800409a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	e000      	b.n	800409c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40010000 	.word	0x40010000
 80040b0:	40000400 	.word	0x40000400
 80040b4:	40000800 	.word	0x40000800
 80040b8:	40000c00 	.word	0x40000c00
 80040bc:	40010400 	.word	0x40010400
 80040c0:	40014000 	.word	0x40014000
 80040c4:	40001800 	.word	0x40001800
 80040c8:	00010007 	.word	0x00010007

080040cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d122      	bne.n	8004128 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d11b      	bne.n	8004128 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0202 	mvn.w	r2, #2
 80040f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f905 	bl	800431e <HAL_TIM_IC_CaptureCallback>
 8004114:	e005      	b.n	8004122 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f8f7 	bl	800430a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f908 	bl	8004332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b04      	cmp	r3, #4
 8004134:	d122      	bne.n	800417c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b04      	cmp	r3, #4
 8004142:	d11b      	bne.n	800417c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0204 	mvn.w	r2, #4
 800414c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2202      	movs	r2, #2
 8004152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f8db 	bl	800431e <HAL_TIM_IC_CaptureCallback>
 8004168:	e005      	b.n	8004176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f8cd 	bl	800430a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f8de 	bl	8004332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b08      	cmp	r3, #8
 8004188:	d122      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b08      	cmp	r3, #8
 8004196:	d11b      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0208 	mvn.w	r2, #8
 80041a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2204      	movs	r2, #4
 80041a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f8b1 	bl	800431e <HAL_TIM_IC_CaptureCallback>
 80041bc:	e005      	b.n	80041ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f8a3 	bl	800430a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f8b4 	bl	8004332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	2b10      	cmp	r3, #16
 80041dc:	d122      	bne.n	8004224 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f003 0310 	and.w	r3, r3, #16
 80041e8:	2b10      	cmp	r3, #16
 80041ea:	d11b      	bne.n	8004224 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f06f 0210 	mvn.w	r2, #16
 80041f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2208      	movs	r2, #8
 80041fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f887 	bl	800431e <HAL_TIM_IC_CaptureCallback>
 8004210:	e005      	b.n	800421e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f879 	bl	800430a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f88a 	bl	8004332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b01      	cmp	r3, #1
 8004230:	d10e      	bne.n	8004250 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b01      	cmp	r3, #1
 800423e:	d107      	bne.n	8004250 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0201 	mvn.w	r2, #1
 8004248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fd f948 	bl	80014e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425a:	2b80      	cmp	r3, #128	; 0x80
 800425c:	d10e      	bne.n	800427c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004268:	2b80      	cmp	r3, #128	; 0x80
 800426a:	d107      	bne.n	800427c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f91a 	bl	80044b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428a:	d10e      	bne.n	80042aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004296:	2b80      	cmp	r3, #128	; 0x80
 8004298:	d107      	bne.n	80042aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f90d 	bl	80044c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b4:	2b40      	cmp	r3, #64	; 0x40
 80042b6:	d10e      	bne.n	80042d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c2:	2b40      	cmp	r3, #64	; 0x40
 80042c4:	d107      	bne.n	80042d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f838 	bl	8004346 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	d10e      	bne.n	8004302 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b20      	cmp	r3, #32
 80042f0:	d107      	bne.n	8004302 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f06f 0220 	mvn.w	r2, #32
 80042fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f8cd 	bl	800449c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
	...

0800435c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a40      	ldr	r2, [pc, #256]	; (8004470 <TIM_Base_SetConfig+0x114>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d013      	beq.n	800439c <TIM_Base_SetConfig+0x40>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437a:	d00f      	beq.n	800439c <TIM_Base_SetConfig+0x40>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a3d      	ldr	r2, [pc, #244]	; (8004474 <TIM_Base_SetConfig+0x118>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d00b      	beq.n	800439c <TIM_Base_SetConfig+0x40>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a3c      	ldr	r2, [pc, #240]	; (8004478 <TIM_Base_SetConfig+0x11c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d007      	beq.n	800439c <TIM_Base_SetConfig+0x40>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a3b      	ldr	r2, [pc, #236]	; (800447c <TIM_Base_SetConfig+0x120>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d003      	beq.n	800439c <TIM_Base_SetConfig+0x40>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a3a      	ldr	r2, [pc, #232]	; (8004480 <TIM_Base_SetConfig+0x124>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d108      	bne.n	80043ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a2f      	ldr	r2, [pc, #188]	; (8004470 <TIM_Base_SetConfig+0x114>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d02b      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043bc:	d027      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a2c      	ldr	r2, [pc, #176]	; (8004474 <TIM_Base_SetConfig+0x118>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d023      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a2b      	ldr	r2, [pc, #172]	; (8004478 <TIM_Base_SetConfig+0x11c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d01f      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a2a      	ldr	r2, [pc, #168]	; (800447c <TIM_Base_SetConfig+0x120>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d01b      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a29      	ldr	r2, [pc, #164]	; (8004480 <TIM_Base_SetConfig+0x124>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d017      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a28      	ldr	r2, [pc, #160]	; (8004484 <TIM_Base_SetConfig+0x128>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d013      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a27      	ldr	r2, [pc, #156]	; (8004488 <TIM_Base_SetConfig+0x12c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d00f      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a26      	ldr	r2, [pc, #152]	; (800448c <TIM_Base_SetConfig+0x130>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00b      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a25      	ldr	r2, [pc, #148]	; (8004490 <TIM_Base_SetConfig+0x134>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d007      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a24      	ldr	r2, [pc, #144]	; (8004494 <TIM_Base_SetConfig+0x138>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d003      	beq.n	800440e <TIM_Base_SetConfig+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a23      	ldr	r2, [pc, #140]	; (8004498 <TIM_Base_SetConfig+0x13c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d108      	bne.n	8004420 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a0a      	ldr	r2, [pc, #40]	; (8004470 <TIM_Base_SetConfig+0x114>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d003      	beq.n	8004454 <TIM_Base_SetConfig+0xf8>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a0c      	ldr	r2, [pc, #48]	; (8004480 <TIM_Base_SetConfig+0x124>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d103      	bne.n	800445c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	615a      	str	r2, [r3, #20]
}
 8004462:	bf00      	nop
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	40010000 	.word	0x40010000
 8004474:	40000400 	.word	0x40000400
 8004478:	40000800 	.word	0x40000800
 800447c:	40000c00 	.word	0x40000c00
 8004480:	40010400 	.word	0x40010400
 8004484:	40014000 	.word	0x40014000
 8004488:	40014400 	.word	0x40014400
 800448c:	40014800 	.word	0x40014800
 8004490:	40001800 	.word	0x40001800
 8004494:	40001c00 	.word	0x40001c00
 8004498:	40002000 	.word	0x40002000

0800449c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e040      	b.n	800456c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7fd f984 	bl	8001808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2224      	movs	r2, #36	; 0x24
 8004504:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0201 	bic.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fbdc 	bl	8004cd4 <UART_SetConfig>
 800451c:	4603      	mov	r3, r0
 800451e:	2b01      	cmp	r3, #1
 8004520:	d101      	bne.n	8004526 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e022      	b.n	800456c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452a:	2b00      	cmp	r3, #0
 800452c:	d002      	beq.n	8004534 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 fe34 	bl	800519c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004552:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 febb 	bl	80052e0 <UART_CheckIdleState>
 800456a:	4603      	mov	r3, r0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b08a      	sub	sp, #40	; 0x28
 8004578:	af02      	add	r7, sp, #8
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	4613      	mov	r3, r2
 8004582:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004588:	2b20      	cmp	r3, #32
 800458a:	d171      	bne.n	8004670 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <HAL_UART_Transmit+0x24>
 8004592:	88fb      	ldrh	r3, [r7, #6]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e06a      	b.n	8004672 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2221      	movs	r2, #33	; 0x21
 80045a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045aa:	f7fd fae3 	bl	8001b74 <HAL_GetTick>
 80045ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	88fa      	ldrh	r2, [r7, #6]
 80045b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	88fa      	ldrh	r2, [r7, #6]
 80045bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c8:	d108      	bne.n	80045dc <HAL_UART_Transmit+0x68>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d104      	bne.n	80045dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	e003      	b.n	80045e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045e0:	2300      	movs	r3, #0
 80045e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045e4:	e02c      	b.n	8004640 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2200      	movs	r2, #0
 80045ee:	2180      	movs	r1, #128	; 0x80
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 feac 	bl	800534e <UART_WaitOnFlagUntilTimeout>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e038      	b.n	8004672 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10b      	bne.n	800461e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004614:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	3302      	adds	r3, #2
 800461a:	61bb      	str	r3, [r7, #24]
 800461c:	e007      	b.n	800462e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	781a      	ldrb	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	3301      	adds	r3, #1
 800462c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1cc      	bne.n	80045e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	2200      	movs	r2, #0
 8004654:	2140      	movs	r1, #64	; 0x40
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 fe79 	bl	800534e <UART_WaitOnFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e005      	b.n	8004672 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	e000      	b.n	8004672 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004670:	2302      	movs	r3, #2
  }
}
 8004672:	4618      	mov	r0, r3
 8004674:	3720      	adds	r7, #32
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b08a      	sub	sp, #40	; 0x28
 800467e:	af00      	add	r7, sp, #0
 8004680:	60f8      	str	r0, [r7, #12]
 8004682:	60b9      	str	r1, [r7, #8]
 8004684:	4613      	mov	r3, r2
 8004686:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800468e:	2b20      	cmp	r3, #32
 8004690:	d132      	bne.n	80046f8 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <HAL_UART_Receive_IT+0x24>
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e02b      	b.n	80046fa <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d018      	beq.n	80046e8 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	e853 3f00 	ldrex	r3, [r3]
 80046c2:	613b      	str	r3, [r7, #16]
   return(result);
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	461a      	mov	r2, r3
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	623b      	str	r3, [r7, #32]
 80046d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d8:	69f9      	ldr	r1, [r7, #28]
 80046da:	6a3a      	ldr	r2, [r7, #32]
 80046dc:	e841 2300 	strex	r3, r2, [r1]
 80046e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1e6      	bne.n	80046b6 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046e8:	88fb      	ldrh	r3, [r7, #6]
 80046ea:	461a      	mov	r2, r3
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f000 fef4 	bl	80054dc <UART_Start_Receive_IT>
 80046f4:	4603      	mov	r3, r0
 80046f6:	e000      	b.n	80046fa <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80046f8:	2302      	movs	r3, #2
  }
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3728      	adds	r7, #40	; 0x28
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b0ba      	sub	sp, #232	; 0xe8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800472a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800472e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004732:	4013      	ands	r3, r2
 8004734:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004738:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800473c:	2b00      	cmp	r3, #0
 800473e:	d115      	bne.n	800476c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004744:	f003 0320 	and.w	r3, r3, #32
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00f      	beq.n	800476c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800474c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004750:	f003 0320 	and.w	r3, r3, #32
 8004754:	2b00      	cmp	r3, #0
 8004756:	d009      	beq.n	800476c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 8297 	beq.w	8004c90 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	4798      	blx	r3
      }
      return;
 800476a:	e291      	b.n	8004c90 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800476c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8117 	beq.w	80049a4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004782:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004786:	4b85      	ldr	r3, [pc, #532]	; (800499c <HAL_UART_IRQHandler+0x298>)
 8004788:	4013      	ands	r3, r2
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 810a 	beq.w	80049a4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d011      	beq.n	80047c0 <HAL_UART_IRQHandler+0xbc>
 800479c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00b      	beq.n	80047c0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2201      	movs	r2, #1
 80047ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047b6:	f043 0201 	orr.w	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d011      	beq.n	80047f0 <HAL_UART_IRQHandler+0xec>
 80047cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00b      	beq.n	80047f0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2202      	movs	r2, #2
 80047de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e6:	f043 0204 	orr.w	r2, r3, #4
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d011      	beq.n	8004820 <HAL_UART_IRQHandler+0x11c>
 80047fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00b      	beq.n	8004820 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2204      	movs	r2, #4
 800480e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004816:	f043 0202 	orr.w	r2, r3, #2
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d017      	beq.n	800485c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800482c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004830:	f003 0320 	and.w	r3, r3, #32
 8004834:	2b00      	cmp	r3, #0
 8004836:	d105      	bne.n	8004844 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800483c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00b      	beq.n	800485c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2208      	movs	r2, #8
 800484a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004852:	f043 0208 	orr.w	r2, r3, #8
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800485c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004864:	2b00      	cmp	r3, #0
 8004866:	d012      	beq.n	800488e <HAL_UART_IRQHandler+0x18a>
 8004868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800486c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00c      	beq.n	800488e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800487c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004884:	f043 0220 	orr.w	r2, r3, #32
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 81fd 	beq.w	8004c94 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800489a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00d      	beq.n	80048c2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80048a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d007      	beq.n	80048c2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d6:	2b40      	cmp	r3, #64	; 0x40
 80048d8:	d005      	beq.n	80048e6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80048da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d04f      	beq.n	8004986 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 febe 	bl	8005668 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f6:	2b40      	cmp	r3, #64	; 0x40
 80048f8:	d141      	bne.n	800497e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3308      	adds	r3, #8
 8004900:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004904:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004908:	e853 3f00 	ldrex	r3, [r3]
 800490c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004910:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3308      	adds	r3, #8
 8004922:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004926:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800492a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004932:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004936:	e841 2300 	strex	r3, r2, [r1]
 800493a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800493e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1d9      	bne.n	80048fa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494a:	2b00      	cmp	r3, #0
 800494c:	d013      	beq.n	8004976 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004952:	4a13      	ldr	r2, [pc, #76]	; (80049a0 <HAL_UART_IRQHandler+0x29c>)
 8004954:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800495a:	4618      	mov	r0, r3
 800495c:	f7fd fb7e 	bl	800205c <HAL_DMA_Abort_IT>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d017      	beq.n	8004996 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004970:	4610      	mov	r0, r2
 8004972:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004974:	e00f      	b.n	8004996 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f996 	bl	8004ca8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800497c:	e00b      	b.n	8004996 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f992 	bl	8004ca8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004984:	e007      	b.n	8004996 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f98e 	bl	8004ca8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004994:	e17e      	b.n	8004c94 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004996:	bf00      	nop
    return;
 8004998:	e17c      	b.n	8004c94 <HAL_UART_IRQHandler+0x590>
 800499a:	bf00      	nop
 800499c:	04000120 	.word	0x04000120
 80049a0:	08005731 	.word	0x08005731

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	f040 814c 	bne.w	8004c46 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80049ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b2:	f003 0310 	and.w	r3, r3, #16
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 8145 	beq.w	8004c46 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80049bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 813e 	beq.w	8004c46 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2210      	movs	r2, #16
 80049d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049dc:	2b40      	cmp	r3, #64	; 0x40
 80049de:	f040 80b6 	bne.w	8004b4e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 8150 	beq.w	8004c98 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80049fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a02:	429a      	cmp	r2, r3
 8004a04:	f080 8148 	bcs.w	8004c98 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a1c:	f000 8086 	beq.w	8004b2c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a2c:	e853 3f00 	ldrex	r3, [r3]
 8004a30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004a4e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a5a:	e841 2300 	strex	r3, r2, [r1]
 8004a5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1da      	bne.n	8004a20 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3308      	adds	r3, #8
 8004a70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a74:	e853 3f00 	ldrex	r3, [r3]
 8004a78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a7c:	f023 0301 	bic.w	r3, r3, #1
 8004a80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3308      	adds	r3, #8
 8004a8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e1      	bne.n	8004a6a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3308      	adds	r3, #8
 8004aac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ab8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004abc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004aca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004acc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ace:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ad0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ad2:	e841 2300 	strex	r3, r2, [r1]
 8004ad6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1e3      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004afc:	f023 0310 	bic.w	r3, r3, #16
 8004b00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b10:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b16:	e841 2300 	strex	r3, r2, [r1]
 8004b1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1e4      	bne.n	8004aec <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fd fa28 	bl	8001f7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	4619      	mov	r1, r3
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f8b8 	bl	8004cbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b4c:	e0a4      	b.n	8004c98 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 8096 	beq.w	8004c9c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004b70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 8091 	beq.w	8004c9c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b82:	e853 3f00 	ldrex	r3, [r3]
 8004b86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	461a      	mov	r2, r3
 8004b98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b9e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e4      	bne.n	8004b7a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3308      	adds	r3, #8
 8004bb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	e853 3f00 	ldrex	r3, [r3]
 8004bbe:	623b      	str	r3, [r7, #32]
   return(result);
 8004bc0:	6a3b      	ldr	r3, [r7, #32]
 8004bc2:	f023 0301 	bic.w	r3, r3, #1
 8004bc6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3308      	adds	r3, #8
 8004bd0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004bd4:	633a      	str	r2, [r7, #48]	; 0x30
 8004bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e3      	bne.n	8004bb0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	e853 3f00 	ldrex	r3, [r3]
 8004c08:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f023 0310 	bic.w	r3, r3, #16
 8004c10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c1e:	61fb      	str	r3, [r7, #28]
 8004c20:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c22:	69b9      	ldr	r1, [r7, #24]
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	617b      	str	r3, [r7, #20]
   return(result);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1e4      	bne.n	8004bfc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2202      	movs	r2, #2
 8004c36:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f83c 	bl	8004cbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c44:	e02a      	b.n	8004c9c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00e      	beq.n	8004c70 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d008      	beq.n	8004c70 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d01c      	beq.n	8004ca0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	4798      	blx	r3
    }
    return;
 8004c6e:	e017      	b.n	8004ca0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d012      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x59e>
 8004c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00c      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 fd67 	bl	800575c <UART_EndTransmit_IT>
    return;
 8004c8e:	e008      	b.n	8004ca2 <HAL_UART_IRQHandler+0x59e>
      return;
 8004c90:	bf00      	nop
 8004c92:	e006      	b.n	8004ca2 <HAL_UART_IRQHandler+0x59e>
    return;
 8004c94:	bf00      	nop
 8004c96:	e004      	b.n	8004ca2 <HAL_UART_IRQHandler+0x59e>
      return;
 8004c98:	bf00      	nop
 8004c9a:	e002      	b.n	8004ca2 <HAL_UART_IRQHandler+0x59e>
      return;
 8004c9c:	bf00      	nop
 8004c9e:	e000      	b.n	8004ca2 <HAL_UART_IRQHandler+0x59e>
    return;
 8004ca0:	bf00      	nop
  }

}
 8004ca2:	37e8      	adds	r7, #232	; 0xe8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	4ba6      	ldr	r3, [pc, #664]	; (8004f98 <UART_SetConfig+0x2c4>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6812      	ldr	r2, [r2, #0]
 8004d06:	6979      	ldr	r1, [r7, #20]
 8004d08:	430b      	orrs	r3, r1
 8004d0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a94      	ldr	r2, [pc, #592]	; (8004f9c <UART_SetConfig+0x2c8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d120      	bne.n	8004d92 <UART_SetConfig+0xbe>
 8004d50:	4b93      	ldr	r3, [pc, #588]	; (8004fa0 <UART_SetConfig+0x2cc>)
 8004d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d816      	bhi.n	8004d8c <UART_SetConfig+0xb8>
 8004d5e:	a201      	add	r2, pc, #4	; (adr r2, 8004d64 <UART_SetConfig+0x90>)
 8004d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d64:	08004d75 	.word	0x08004d75
 8004d68:	08004d81 	.word	0x08004d81
 8004d6c:	08004d7b 	.word	0x08004d7b
 8004d70:	08004d87 	.word	0x08004d87
 8004d74:	2301      	movs	r3, #1
 8004d76:	77fb      	strb	r3, [r7, #31]
 8004d78:	e150      	b.n	800501c <UART_SetConfig+0x348>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	77fb      	strb	r3, [r7, #31]
 8004d7e:	e14d      	b.n	800501c <UART_SetConfig+0x348>
 8004d80:	2304      	movs	r3, #4
 8004d82:	77fb      	strb	r3, [r7, #31]
 8004d84:	e14a      	b.n	800501c <UART_SetConfig+0x348>
 8004d86:	2308      	movs	r3, #8
 8004d88:	77fb      	strb	r3, [r7, #31]
 8004d8a:	e147      	b.n	800501c <UART_SetConfig+0x348>
 8004d8c:	2310      	movs	r3, #16
 8004d8e:	77fb      	strb	r3, [r7, #31]
 8004d90:	e144      	b.n	800501c <UART_SetConfig+0x348>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a83      	ldr	r2, [pc, #524]	; (8004fa4 <UART_SetConfig+0x2d0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d132      	bne.n	8004e02 <UART_SetConfig+0x12e>
 8004d9c:	4b80      	ldr	r3, [pc, #512]	; (8004fa0 <UART_SetConfig+0x2cc>)
 8004d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b0c      	cmp	r3, #12
 8004da8:	d828      	bhi.n	8004dfc <UART_SetConfig+0x128>
 8004daa:	a201      	add	r2, pc, #4	; (adr r2, 8004db0 <UART_SetConfig+0xdc>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004de5 	.word	0x08004de5
 8004db4:	08004dfd 	.word	0x08004dfd
 8004db8:	08004dfd 	.word	0x08004dfd
 8004dbc:	08004dfd 	.word	0x08004dfd
 8004dc0:	08004df1 	.word	0x08004df1
 8004dc4:	08004dfd 	.word	0x08004dfd
 8004dc8:	08004dfd 	.word	0x08004dfd
 8004dcc:	08004dfd 	.word	0x08004dfd
 8004dd0:	08004deb 	.word	0x08004deb
 8004dd4:	08004dfd 	.word	0x08004dfd
 8004dd8:	08004dfd 	.word	0x08004dfd
 8004ddc:	08004dfd 	.word	0x08004dfd
 8004de0:	08004df7 	.word	0x08004df7
 8004de4:	2300      	movs	r3, #0
 8004de6:	77fb      	strb	r3, [r7, #31]
 8004de8:	e118      	b.n	800501c <UART_SetConfig+0x348>
 8004dea:	2302      	movs	r3, #2
 8004dec:	77fb      	strb	r3, [r7, #31]
 8004dee:	e115      	b.n	800501c <UART_SetConfig+0x348>
 8004df0:	2304      	movs	r3, #4
 8004df2:	77fb      	strb	r3, [r7, #31]
 8004df4:	e112      	b.n	800501c <UART_SetConfig+0x348>
 8004df6:	2308      	movs	r3, #8
 8004df8:	77fb      	strb	r3, [r7, #31]
 8004dfa:	e10f      	b.n	800501c <UART_SetConfig+0x348>
 8004dfc:	2310      	movs	r3, #16
 8004dfe:	77fb      	strb	r3, [r7, #31]
 8004e00:	e10c      	b.n	800501c <UART_SetConfig+0x348>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a68      	ldr	r2, [pc, #416]	; (8004fa8 <UART_SetConfig+0x2d4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d120      	bne.n	8004e4e <UART_SetConfig+0x17a>
 8004e0c:	4b64      	ldr	r3, [pc, #400]	; (8004fa0 <UART_SetConfig+0x2cc>)
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e16:	2b30      	cmp	r3, #48	; 0x30
 8004e18:	d013      	beq.n	8004e42 <UART_SetConfig+0x16e>
 8004e1a:	2b30      	cmp	r3, #48	; 0x30
 8004e1c:	d814      	bhi.n	8004e48 <UART_SetConfig+0x174>
 8004e1e:	2b20      	cmp	r3, #32
 8004e20:	d009      	beq.n	8004e36 <UART_SetConfig+0x162>
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d810      	bhi.n	8004e48 <UART_SetConfig+0x174>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <UART_SetConfig+0x15c>
 8004e2a:	2b10      	cmp	r3, #16
 8004e2c:	d006      	beq.n	8004e3c <UART_SetConfig+0x168>
 8004e2e:	e00b      	b.n	8004e48 <UART_SetConfig+0x174>
 8004e30:	2300      	movs	r3, #0
 8004e32:	77fb      	strb	r3, [r7, #31]
 8004e34:	e0f2      	b.n	800501c <UART_SetConfig+0x348>
 8004e36:	2302      	movs	r3, #2
 8004e38:	77fb      	strb	r3, [r7, #31]
 8004e3a:	e0ef      	b.n	800501c <UART_SetConfig+0x348>
 8004e3c:	2304      	movs	r3, #4
 8004e3e:	77fb      	strb	r3, [r7, #31]
 8004e40:	e0ec      	b.n	800501c <UART_SetConfig+0x348>
 8004e42:	2308      	movs	r3, #8
 8004e44:	77fb      	strb	r3, [r7, #31]
 8004e46:	e0e9      	b.n	800501c <UART_SetConfig+0x348>
 8004e48:	2310      	movs	r3, #16
 8004e4a:	77fb      	strb	r3, [r7, #31]
 8004e4c:	e0e6      	b.n	800501c <UART_SetConfig+0x348>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a56      	ldr	r2, [pc, #344]	; (8004fac <UART_SetConfig+0x2d8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d120      	bne.n	8004e9a <UART_SetConfig+0x1c6>
 8004e58:	4b51      	ldr	r3, [pc, #324]	; (8004fa0 <UART_SetConfig+0x2cc>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e62:	2bc0      	cmp	r3, #192	; 0xc0
 8004e64:	d013      	beq.n	8004e8e <UART_SetConfig+0x1ba>
 8004e66:	2bc0      	cmp	r3, #192	; 0xc0
 8004e68:	d814      	bhi.n	8004e94 <UART_SetConfig+0x1c0>
 8004e6a:	2b80      	cmp	r3, #128	; 0x80
 8004e6c:	d009      	beq.n	8004e82 <UART_SetConfig+0x1ae>
 8004e6e:	2b80      	cmp	r3, #128	; 0x80
 8004e70:	d810      	bhi.n	8004e94 <UART_SetConfig+0x1c0>
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <UART_SetConfig+0x1a8>
 8004e76:	2b40      	cmp	r3, #64	; 0x40
 8004e78:	d006      	beq.n	8004e88 <UART_SetConfig+0x1b4>
 8004e7a:	e00b      	b.n	8004e94 <UART_SetConfig+0x1c0>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	77fb      	strb	r3, [r7, #31]
 8004e80:	e0cc      	b.n	800501c <UART_SetConfig+0x348>
 8004e82:	2302      	movs	r3, #2
 8004e84:	77fb      	strb	r3, [r7, #31]
 8004e86:	e0c9      	b.n	800501c <UART_SetConfig+0x348>
 8004e88:	2304      	movs	r3, #4
 8004e8a:	77fb      	strb	r3, [r7, #31]
 8004e8c:	e0c6      	b.n	800501c <UART_SetConfig+0x348>
 8004e8e:	2308      	movs	r3, #8
 8004e90:	77fb      	strb	r3, [r7, #31]
 8004e92:	e0c3      	b.n	800501c <UART_SetConfig+0x348>
 8004e94:	2310      	movs	r3, #16
 8004e96:	77fb      	strb	r3, [r7, #31]
 8004e98:	e0c0      	b.n	800501c <UART_SetConfig+0x348>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a44      	ldr	r2, [pc, #272]	; (8004fb0 <UART_SetConfig+0x2dc>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d125      	bne.n	8004ef0 <UART_SetConfig+0x21c>
 8004ea4:	4b3e      	ldr	r3, [pc, #248]	; (8004fa0 <UART_SetConfig+0x2cc>)
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eb2:	d017      	beq.n	8004ee4 <UART_SetConfig+0x210>
 8004eb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eb8:	d817      	bhi.n	8004eea <UART_SetConfig+0x216>
 8004eba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ebe:	d00b      	beq.n	8004ed8 <UART_SetConfig+0x204>
 8004ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ec4:	d811      	bhi.n	8004eea <UART_SetConfig+0x216>
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <UART_SetConfig+0x1fe>
 8004eca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ece:	d006      	beq.n	8004ede <UART_SetConfig+0x20a>
 8004ed0:	e00b      	b.n	8004eea <UART_SetConfig+0x216>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	77fb      	strb	r3, [r7, #31]
 8004ed6:	e0a1      	b.n	800501c <UART_SetConfig+0x348>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	77fb      	strb	r3, [r7, #31]
 8004edc:	e09e      	b.n	800501c <UART_SetConfig+0x348>
 8004ede:	2304      	movs	r3, #4
 8004ee0:	77fb      	strb	r3, [r7, #31]
 8004ee2:	e09b      	b.n	800501c <UART_SetConfig+0x348>
 8004ee4:	2308      	movs	r3, #8
 8004ee6:	77fb      	strb	r3, [r7, #31]
 8004ee8:	e098      	b.n	800501c <UART_SetConfig+0x348>
 8004eea:	2310      	movs	r3, #16
 8004eec:	77fb      	strb	r3, [r7, #31]
 8004eee:	e095      	b.n	800501c <UART_SetConfig+0x348>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a2f      	ldr	r2, [pc, #188]	; (8004fb4 <UART_SetConfig+0x2e0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d125      	bne.n	8004f46 <UART_SetConfig+0x272>
 8004efa:	4b29      	ldr	r3, [pc, #164]	; (8004fa0 <UART_SetConfig+0x2cc>)
 8004efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f08:	d017      	beq.n	8004f3a <UART_SetConfig+0x266>
 8004f0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f0e:	d817      	bhi.n	8004f40 <UART_SetConfig+0x26c>
 8004f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f14:	d00b      	beq.n	8004f2e <UART_SetConfig+0x25a>
 8004f16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f1a:	d811      	bhi.n	8004f40 <UART_SetConfig+0x26c>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <UART_SetConfig+0x254>
 8004f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f24:	d006      	beq.n	8004f34 <UART_SetConfig+0x260>
 8004f26:	e00b      	b.n	8004f40 <UART_SetConfig+0x26c>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	77fb      	strb	r3, [r7, #31]
 8004f2c:	e076      	b.n	800501c <UART_SetConfig+0x348>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	77fb      	strb	r3, [r7, #31]
 8004f32:	e073      	b.n	800501c <UART_SetConfig+0x348>
 8004f34:	2304      	movs	r3, #4
 8004f36:	77fb      	strb	r3, [r7, #31]
 8004f38:	e070      	b.n	800501c <UART_SetConfig+0x348>
 8004f3a:	2308      	movs	r3, #8
 8004f3c:	77fb      	strb	r3, [r7, #31]
 8004f3e:	e06d      	b.n	800501c <UART_SetConfig+0x348>
 8004f40:	2310      	movs	r3, #16
 8004f42:	77fb      	strb	r3, [r7, #31]
 8004f44:	e06a      	b.n	800501c <UART_SetConfig+0x348>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a1b      	ldr	r2, [pc, #108]	; (8004fb8 <UART_SetConfig+0x2e4>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d138      	bne.n	8004fc2 <UART_SetConfig+0x2ee>
 8004f50:	4b13      	ldr	r3, [pc, #76]	; (8004fa0 <UART_SetConfig+0x2cc>)
 8004f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f56:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004f5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f5e:	d017      	beq.n	8004f90 <UART_SetConfig+0x2bc>
 8004f60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f64:	d82a      	bhi.n	8004fbc <UART_SetConfig+0x2e8>
 8004f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f6a:	d00b      	beq.n	8004f84 <UART_SetConfig+0x2b0>
 8004f6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f70:	d824      	bhi.n	8004fbc <UART_SetConfig+0x2e8>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <UART_SetConfig+0x2aa>
 8004f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7a:	d006      	beq.n	8004f8a <UART_SetConfig+0x2b6>
 8004f7c:	e01e      	b.n	8004fbc <UART_SetConfig+0x2e8>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	77fb      	strb	r3, [r7, #31]
 8004f82:	e04b      	b.n	800501c <UART_SetConfig+0x348>
 8004f84:	2302      	movs	r3, #2
 8004f86:	77fb      	strb	r3, [r7, #31]
 8004f88:	e048      	b.n	800501c <UART_SetConfig+0x348>
 8004f8a:	2304      	movs	r3, #4
 8004f8c:	77fb      	strb	r3, [r7, #31]
 8004f8e:	e045      	b.n	800501c <UART_SetConfig+0x348>
 8004f90:	2308      	movs	r3, #8
 8004f92:	77fb      	strb	r3, [r7, #31]
 8004f94:	e042      	b.n	800501c <UART_SetConfig+0x348>
 8004f96:	bf00      	nop
 8004f98:	efff69f3 	.word	0xefff69f3
 8004f9c:	40011000 	.word	0x40011000
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	40004400 	.word	0x40004400
 8004fa8:	40004800 	.word	0x40004800
 8004fac:	40004c00 	.word	0x40004c00
 8004fb0:	40005000 	.word	0x40005000
 8004fb4:	40011400 	.word	0x40011400
 8004fb8:	40007800 	.word	0x40007800
 8004fbc:	2310      	movs	r3, #16
 8004fbe:	77fb      	strb	r3, [r7, #31]
 8004fc0:	e02c      	b.n	800501c <UART_SetConfig+0x348>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a72      	ldr	r2, [pc, #456]	; (8005190 <UART_SetConfig+0x4bc>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d125      	bne.n	8005018 <UART_SetConfig+0x344>
 8004fcc:	4b71      	ldr	r3, [pc, #452]	; (8005194 <UART_SetConfig+0x4c0>)
 8004fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004fd6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004fda:	d017      	beq.n	800500c <UART_SetConfig+0x338>
 8004fdc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004fe0:	d817      	bhi.n	8005012 <UART_SetConfig+0x33e>
 8004fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe6:	d00b      	beq.n	8005000 <UART_SetConfig+0x32c>
 8004fe8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fec:	d811      	bhi.n	8005012 <UART_SetConfig+0x33e>
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <UART_SetConfig+0x326>
 8004ff2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ff6:	d006      	beq.n	8005006 <UART_SetConfig+0x332>
 8004ff8:	e00b      	b.n	8005012 <UART_SetConfig+0x33e>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	77fb      	strb	r3, [r7, #31]
 8004ffe:	e00d      	b.n	800501c <UART_SetConfig+0x348>
 8005000:	2302      	movs	r3, #2
 8005002:	77fb      	strb	r3, [r7, #31]
 8005004:	e00a      	b.n	800501c <UART_SetConfig+0x348>
 8005006:	2304      	movs	r3, #4
 8005008:	77fb      	strb	r3, [r7, #31]
 800500a:	e007      	b.n	800501c <UART_SetConfig+0x348>
 800500c:	2308      	movs	r3, #8
 800500e:	77fb      	strb	r3, [r7, #31]
 8005010:	e004      	b.n	800501c <UART_SetConfig+0x348>
 8005012:	2310      	movs	r3, #16
 8005014:	77fb      	strb	r3, [r7, #31]
 8005016:	e001      	b.n	800501c <UART_SetConfig+0x348>
 8005018:	2310      	movs	r3, #16
 800501a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005024:	d15b      	bne.n	80050de <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005026:	7ffb      	ldrb	r3, [r7, #31]
 8005028:	2b08      	cmp	r3, #8
 800502a:	d828      	bhi.n	800507e <UART_SetConfig+0x3aa>
 800502c:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <UART_SetConfig+0x360>)
 800502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005032:	bf00      	nop
 8005034:	08005059 	.word	0x08005059
 8005038:	08005061 	.word	0x08005061
 800503c:	08005069 	.word	0x08005069
 8005040:	0800507f 	.word	0x0800507f
 8005044:	0800506f 	.word	0x0800506f
 8005048:	0800507f 	.word	0x0800507f
 800504c:	0800507f 	.word	0x0800507f
 8005050:	0800507f 	.word	0x0800507f
 8005054:	08005077 	.word	0x08005077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005058:	f7fe f854 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 800505c:	61b8      	str	r0, [r7, #24]
        break;
 800505e:	e013      	b.n	8005088 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005060:	f7fe f864 	bl	800312c <HAL_RCC_GetPCLK2Freq>
 8005064:	61b8      	str	r0, [r7, #24]
        break;
 8005066:	e00f      	b.n	8005088 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005068:	4b4b      	ldr	r3, [pc, #300]	; (8005198 <UART_SetConfig+0x4c4>)
 800506a:	61bb      	str	r3, [r7, #24]
        break;
 800506c:	e00c      	b.n	8005088 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800506e:	f7fd ff37 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 8005072:	61b8      	str	r0, [r7, #24]
        break;
 8005074:	e008      	b.n	8005088 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800507a:	61bb      	str	r3, [r7, #24]
        break;
 800507c:	e004      	b.n	8005088 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	77bb      	strb	r3, [r7, #30]
        break;
 8005086:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d074      	beq.n	8005178 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	005a      	lsls	r2, r3, #1
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	085b      	lsrs	r3, r3, #1
 8005098:	441a      	add	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	2b0f      	cmp	r3, #15
 80050a8:	d916      	bls.n	80050d8 <UART_SetConfig+0x404>
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b0:	d212      	bcs.n	80050d8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	f023 030f 	bic.w	r3, r3, #15
 80050ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	085b      	lsrs	r3, r3, #1
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	89fb      	ldrh	r3, [r7, #14]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	89fa      	ldrh	r2, [r7, #14]
 80050d4:	60da      	str	r2, [r3, #12]
 80050d6:	e04f      	b.n	8005178 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	77bb      	strb	r3, [r7, #30]
 80050dc:	e04c      	b.n	8005178 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050de:	7ffb      	ldrb	r3, [r7, #31]
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d828      	bhi.n	8005136 <UART_SetConfig+0x462>
 80050e4:	a201      	add	r2, pc, #4	; (adr r2, 80050ec <UART_SetConfig+0x418>)
 80050e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ea:	bf00      	nop
 80050ec:	08005111 	.word	0x08005111
 80050f0:	08005119 	.word	0x08005119
 80050f4:	08005121 	.word	0x08005121
 80050f8:	08005137 	.word	0x08005137
 80050fc:	08005127 	.word	0x08005127
 8005100:	08005137 	.word	0x08005137
 8005104:	08005137 	.word	0x08005137
 8005108:	08005137 	.word	0x08005137
 800510c:	0800512f 	.word	0x0800512f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005110:	f7fd fff8 	bl	8003104 <HAL_RCC_GetPCLK1Freq>
 8005114:	61b8      	str	r0, [r7, #24]
        break;
 8005116:	e013      	b.n	8005140 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005118:	f7fe f808 	bl	800312c <HAL_RCC_GetPCLK2Freq>
 800511c:	61b8      	str	r0, [r7, #24]
        break;
 800511e:	e00f      	b.n	8005140 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005120:	4b1d      	ldr	r3, [pc, #116]	; (8005198 <UART_SetConfig+0x4c4>)
 8005122:	61bb      	str	r3, [r7, #24]
        break;
 8005124:	e00c      	b.n	8005140 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005126:	f7fd fedb 	bl	8002ee0 <HAL_RCC_GetSysClockFreq>
 800512a:	61b8      	str	r0, [r7, #24]
        break;
 800512c:	e008      	b.n	8005140 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800512e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005132:	61bb      	str	r3, [r7, #24]
        break;
 8005134:	e004      	b.n	8005140 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	77bb      	strb	r3, [r7, #30]
        break;
 800513e:	bf00      	nop
    }

    if (pclk != 0U)
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d018      	beq.n	8005178 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	085a      	lsrs	r2, r3, #1
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	441a      	add	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	fbb2 f3f3 	udiv	r3, r2, r3
 8005158:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	2b0f      	cmp	r3, #15
 800515e:	d909      	bls.n	8005174 <UART_SetConfig+0x4a0>
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005166:	d205      	bcs.n	8005174 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	b29a      	uxth	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60da      	str	r2, [r3, #12]
 8005172:	e001      	b.n	8005178 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005184:	7fbb      	ldrb	r3, [r7, #30]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3720      	adds	r7, #32
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	40007c00 	.word	0x40007c00
 8005194:	40023800 	.word	0x40023800
 8005198:	00f42400 	.word	0x00f42400

0800519c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00a      	beq.n	80051e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	f003 0304 	and.w	r3, r3, #4
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	f003 0308 	and.w	r3, r3, #8
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005230:	f003 0310 	and.w	r3, r3, #16
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005278:	2b00      	cmp	r3, #0
 800527a:	d01a      	beq.n	80052b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800529a:	d10a      	bne.n	80052b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	605a      	str	r2, [r3, #4]
  }
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af02      	add	r7, sp, #8
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052f0:	f7fc fc40 	bl	8001b74 <HAL_GetTick>
 80052f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0308 	and.w	r3, r3, #8
 8005300:	2b08      	cmp	r3, #8
 8005302:	d10e      	bne.n	8005322 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f81b 	bl	800534e <UART_WaitOnFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e011      	b.n	8005346 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2220      	movs	r2, #32
 800532c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b09c      	sub	sp, #112	; 0x70
 8005352:	af00      	add	r7, sp, #0
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	603b      	str	r3, [r7, #0]
 800535a:	4613      	mov	r3, r2
 800535c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800535e:	e0a7      	b.n	80054b0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005360:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005366:	f000 80a3 	beq.w	80054b0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536a:	f7fc fc03 	bl	8001b74 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005376:	429a      	cmp	r2, r3
 8005378:	d302      	bcc.n	8005380 <UART_WaitOnFlagUntilTimeout+0x32>
 800537a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800537c:	2b00      	cmp	r3, #0
 800537e:	d13f      	bne.n	8005400 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800538e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005390:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005394:	667b      	str	r3, [r7, #100]	; 0x64
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	461a      	mov	r2, r3
 800539c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800539e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053a6:	e841 2300 	strex	r3, r2, [r1]
 80053aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1e6      	bne.n	8005380 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	3308      	adds	r3, #8
 80053b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053bc:	e853 3f00 	ldrex	r3, [r3]
 80053c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c4:	f023 0301 	bic.w	r3, r3, #1
 80053c8:	663b      	str	r3, [r7, #96]	; 0x60
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3308      	adds	r3, #8
 80053d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80053d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053da:	e841 2300 	strex	r3, r2, [r1]
 80053de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e5      	bne.n	80053b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2220      	movs	r2, #32
 80053ea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80053fc:	2303      	movs	r3, #3
 80053fe:	e068      	b.n	80054d2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	2b00      	cmp	r3, #0
 800540c:	d050      	beq.n	80054b0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800541c:	d148      	bne.n	80054b0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005426:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005430:	e853 3f00 	ldrex	r3, [r3]
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800543c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005446:	637b      	str	r3, [r7, #52]	; 0x34
 8005448:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800544c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800544e:	e841 2300 	strex	r3, r2, [r1]
 8005452:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1e6      	bne.n	8005428 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3308      	adds	r3, #8
 8005460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	613b      	str	r3, [r7, #16]
   return(result);
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f023 0301 	bic.w	r3, r3, #1
 8005470:	66bb      	str	r3, [r7, #104]	; 0x68
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3308      	adds	r3, #8
 8005478:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800547a:	623a      	str	r2, [r7, #32]
 800547c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	69f9      	ldr	r1, [r7, #28]
 8005480:	6a3a      	ldr	r2, [r7, #32]
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	61bb      	str	r3, [r7, #24]
   return(result);
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e5      	bne.n	800545a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2220      	movs	r2, #32
 8005492:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2220      	movs	r2, #32
 80054a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e010      	b.n	80054d2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69da      	ldr	r2, [r3, #28]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	4013      	ands	r3, r2
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	429a      	cmp	r2, r3
 80054be:	bf0c      	ite	eq
 80054c0:	2301      	moveq	r3, #1
 80054c2:	2300      	movne	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	79fb      	ldrb	r3, [r7, #7]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	f43f af48 	beq.w	8005360 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3770      	adds	r7, #112	; 0x70
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054dc:	b480      	push	{r7}
 80054de:	b097      	sub	sp, #92	; 0x5c
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	4613      	mov	r3, r2
 80054e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	88fa      	ldrh	r2, [r7, #6]
 80054f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	88fa      	ldrh	r2, [r7, #6]
 80054fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800550e:	d10e      	bne.n	800552e <UART_Start_Receive_IT+0x52>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d105      	bne.n	8005524 <UART_Start_Receive_IT+0x48>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800551e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005522:	e02d      	b.n	8005580 <UART_Start_Receive_IT+0xa4>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	22ff      	movs	r2, #255	; 0xff
 8005528:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800552c:	e028      	b.n	8005580 <UART_Start_Receive_IT+0xa4>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10d      	bne.n	8005552 <UART_Start_Receive_IT+0x76>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d104      	bne.n	8005548 <UART_Start_Receive_IT+0x6c>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	22ff      	movs	r2, #255	; 0xff
 8005542:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005546:	e01b      	b.n	8005580 <UART_Start_Receive_IT+0xa4>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	227f      	movs	r2, #127	; 0x7f
 800554c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005550:	e016      	b.n	8005580 <UART_Start_Receive_IT+0xa4>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800555a:	d10d      	bne.n	8005578 <UART_Start_Receive_IT+0x9c>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d104      	bne.n	800556e <UART_Start_Receive_IT+0x92>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	227f      	movs	r2, #127	; 0x7f
 8005568:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800556c:	e008      	b.n	8005580 <UART_Start_Receive_IT+0xa4>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	223f      	movs	r2, #63	; 0x3f
 8005572:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005576:	e003      	b.n	8005580 <UART_Start_Receive_IT+0xa4>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2222      	movs	r2, #34	; 0x22
 800558c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3308      	adds	r3, #8
 8005596:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559a:	e853 3f00 	ldrex	r3, [r3]
 800559e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a2:	f043 0301 	orr.w	r3, r3, #1
 80055a6:	657b      	str	r3, [r7, #84]	; 0x54
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3308      	adds	r3, #8
 80055ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80055b0:	64ba      	str	r2, [r7, #72]	; 0x48
 80055b2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055b8:	e841 2300 	strex	r3, r2, [r1]
 80055bc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1e5      	bne.n	8005590 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055cc:	d107      	bne.n	80055de <UART_Start_Receive_IT+0x102>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d103      	bne.n	80055de <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	4a21      	ldr	r2, [pc, #132]	; (8005660 <UART_Start_Receive_IT+0x184>)
 80055da:	669a      	str	r2, [r3, #104]	; 0x68
 80055dc:	e002      	b.n	80055e4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	4a20      	ldr	r2, [pc, #128]	; (8005664 <UART_Start_Receive_IT+0x188>)
 80055e2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	691b      	ldr	r3, [r3, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d019      	beq.n	8005620 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	e853 3f00 	ldrex	r3, [r3]
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005600:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560a:	637b      	str	r3, [r7, #52]	; 0x34
 800560c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005612:	e841 2300 	strex	r3, r2, [r1]
 8005616:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1e6      	bne.n	80055ec <UART_Start_Receive_IT+0x110>
 800561e:	e018      	b.n	8005652 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	e853 3f00 	ldrex	r3, [r3]
 800562c:	613b      	str	r3, [r7, #16]
   return(result);
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f043 0320 	orr.w	r3, r3, #32
 8005634:	653b      	str	r3, [r7, #80]	; 0x50
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	461a      	mov	r2, r3
 800563c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800563e:	623b      	str	r3, [r7, #32]
 8005640:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005642:	69f9      	ldr	r1, [r7, #28]
 8005644:	6a3a      	ldr	r2, [r7, #32]
 8005646:	e841 2300 	strex	r3, r2, [r1]
 800564a:	61bb      	str	r3, [r7, #24]
   return(result);
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1e6      	bne.n	8005620 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	375c      	adds	r7, #92	; 0x5c
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	08005917 	.word	0x08005917
 8005664:	080057b1 	.word	0x080057b1

08005668 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005668:	b480      	push	{r7}
 800566a:	b095      	sub	sp, #84	; 0x54
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005678:	e853 3f00 	ldrex	r3, [r3]
 800567c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005684:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800568e:	643b      	str	r3, [r7, #64]	; 0x40
 8005690:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005692:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005694:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800569c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e6      	bne.n	8005670 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3308      	adds	r3, #8
 80056a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	f023 0301 	bic.w	r3, r3, #1
 80056b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3308      	adds	r3, #8
 80056c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e5      	bne.n	80056a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d118      	bne.n	8005710 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	e853 3f00 	ldrex	r3, [r3]
 80056ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f023 0310 	bic.w	r3, r3, #16
 80056f2:	647b      	str	r3, [r7, #68]	; 0x44
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	6979      	ldr	r1, [r7, #20]
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	e841 2300 	strex	r3, r2, [r1]
 8005708:	613b      	str	r3, [r7, #16]
   return(result);
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e6      	bne.n	80056de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2220      	movs	r2, #32
 8005714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005724:	bf00      	nop
 8005726:	3754      	adds	r7, #84	; 0x54
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f7ff faaa 	bl	8004ca8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005754:	bf00      	nop
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	60bb      	str	r3, [r7, #8]
   return(result);
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005778:	61fb      	str	r3, [r7, #28]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	61bb      	str	r3, [r7, #24]
 8005784:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	6979      	ldr	r1, [r7, #20]
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	613b      	str	r3, [r7, #16]
   return(result);
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e6      	bne.n	8005764 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2220      	movs	r2, #32
 800579a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fb fbb4 	bl	8000f10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057a8:	bf00      	nop
 80057aa:	3720      	adds	r7, #32
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b096      	sub	sp, #88	; 0x58
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057be:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057c8:	2b22      	cmp	r3, #34	; 0x22
 80057ca:	f040 8098 	bne.w	80058fe <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057d8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80057dc:	b2d9      	uxtb	r1, r3
 80057de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e8:	400a      	ands	r2, r1
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80057fe:	b29b      	uxth	r3, r3
 8005800:	3b01      	subs	r3, #1
 8005802:	b29a      	uxth	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d17b      	bne.n	800590e <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	e853 3f00 	ldrex	r3, [r3]
 8005822:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005826:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800582a:	653b      	str	r3, [r7, #80]	; 0x50
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	461a      	mov	r2, r3
 8005832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005834:	647b      	str	r3, [r7, #68]	; 0x44
 8005836:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800583a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e6      	bne.n	8005816 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3308      	adds	r3, #8
 800584e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	e853 3f00 	ldrex	r3, [r3]
 8005856:	623b      	str	r3, [r7, #32]
   return(result);
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	f023 0301 	bic.w	r3, r3, #1
 800585e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3308      	adds	r3, #8
 8005866:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005868:	633a      	str	r2, [r7, #48]	; 0x30
 800586a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800586e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e5      	bne.n	8005848 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2220      	movs	r2, #32
 8005880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005894:	2b01      	cmp	r3, #1
 8005896:	d12e      	bne.n	80058f6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	e853 3f00 	ldrex	r3, [r3]
 80058aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0310 	bic.w	r3, r3, #16
 80058b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	461a      	mov	r2, r3
 80058ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058bc:	61fb      	str	r3, [r7, #28]
 80058be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c0:	69b9      	ldr	r1, [r7, #24]
 80058c2:	69fa      	ldr	r2, [r7, #28]
 80058c4:	e841 2300 	strex	r3, r2, [r1]
 80058c8:	617b      	str	r3, [r7, #20]
   return(result);
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e6      	bne.n	800589e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	f003 0310 	and.w	r3, r3, #16
 80058da:	2b10      	cmp	r3, #16
 80058dc:	d103      	bne.n	80058e6 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2210      	movs	r2, #16
 80058e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058ec:	4619      	mov	r1, r3
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7ff f9e4 	bl	8004cbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058f4:	e00b      	b.n	800590e <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7fb fade 	bl	8000eb8 <HAL_UART_RxCpltCallback>
}
 80058fc:	e007      	b.n	800590e <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	699a      	ldr	r2, [r3, #24]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0208 	orr.w	r2, r2, #8
 800590c:	619a      	str	r2, [r3, #24]
}
 800590e:	bf00      	nop
 8005910:	3758      	adds	r7, #88	; 0x58
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b096      	sub	sp, #88	; 0x58
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005924:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800592e:	2b22      	cmp	r3, #34	; 0x22
 8005930:	f040 8098 	bne.w	8005a64 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005942:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005944:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005948:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800594c:	4013      	ands	r3, r2
 800594e:	b29a      	uxth	r2, r3
 8005950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005952:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005958:	1c9a      	adds	r2, r3, #2
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005964:	b29b      	uxth	r3, r3
 8005966:	3b01      	subs	r3, #1
 8005968:	b29a      	uxth	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005976:	b29b      	uxth	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	d17b      	bne.n	8005a74 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005984:	e853 3f00 	ldrex	r3, [r3]
 8005988:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005990:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	461a      	mov	r2, r3
 8005998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800599a:	643b      	str	r3, [r7, #64]	; 0x40
 800599c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059a2:	e841 2300 	strex	r3, r2, [r1]
 80059a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1e6      	bne.n	800597c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3308      	adds	r3, #8
 80059b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b6:	6a3b      	ldr	r3, [r7, #32]
 80059b8:	e853 3f00 	ldrex	r3, [r3]
 80059bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	f023 0301 	bic.w	r3, r3, #1
 80059c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3308      	adds	r3, #8
 80059cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059d6:	e841 2300 	strex	r3, r2, [r1]
 80059da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1e5      	bne.n	80059ae <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d12e      	bne.n	8005a5c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f023 0310 	bic.w	r3, r3, #16
 8005a18:	647b      	str	r3, [r7, #68]	; 0x44
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	461a      	mov	r2, r3
 8005a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a22:	61bb      	str	r3, [r7, #24]
 8005a24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	6979      	ldr	r1, [r7, #20]
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e6      	bne.n	8005a04 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	f003 0310 	and.w	r3, r3, #16
 8005a40:	2b10      	cmp	r3, #16
 8005a42:	d103      	bne.n	8005a4c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2210      	movs	r2, #16
 8005a4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005a52:	4619      	mov	r1, r3
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f7ff f931 	bl	8004cbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a5a:	e00b      	b.n	8005a74 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7fb fa2b 	bl	8000eb8 <HAL_UART_RxCpltCallback>
}
 8005a62:	e007      	b.n	8005a74 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699a      	ldr	r2, [r3, #24]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0208 	orr.w	r2, r2, #8
 8005a72:	619a      	str	r2, [r3, #24]
}
 8005a74:	bf00      	nop
 8005a76:	3758      	adds	r7, #88	; 0x58
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	f107 001c 	add.w	r0, r7, #28
 8005a8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d126      	bne.n	8005ae2 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68da      	ldr	r2, [r3, #12]
 8005aa4:	4b38      	ldr	r3, [pc, #224]	; (8005b88 <USB_CoreInit+0x10c>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f043 0210 	orr.w	r2, r3, #16
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d105      	bne.n	8005ad6 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fad0 	bl	800607c <USB_CoreReset>
 8005adc:	4603      	mov	r3, r0
 8005ade:	73fb      	strb	r3, [r7, #15]
 8005ae0:	e03a      	b.n	8005b58 <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d126      	bne.n	8005b36 <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68da      	ldr	r2, [r3, #12]
 8005af8:	4b23      	ldr	r3, [pc, #140]	; (8005b88 <USB_CoreInit+0x10c>)
 8005afa:	4013      	ands	r3, r2
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f023 0210 	bic.w	r2, r3, #16
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8005b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d105      	bne.n	8005b2a <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 faa6 	bl	800607c <USB_CoreReset>
 8005b30:	4603      	mov	r3, r0
 8005b32:	73fb      	strb	r3, [r7, #15]
 8005b34:	e010      	b.n	8005b58 <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fa9a 	bl	800607c <USB_CoreReset>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d10b      	bne.n	8005b76 <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f043 0206 	orr.w	r2, r3, #6
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f043 0220 	orr.w	r2, r3, #32
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b82:	b004      	add	sp, #16
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	ffbdffbf 	.word	0xffbdffbf

08005b8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f023 0201 	bic.w	r2, r3, #1
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bca:	78fb      	ldrb	r3, [r7, #3]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d115      	bne.n	8005bfc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bdc:	2001      	movs	r0, #1
 8005bde:	f7fb ffd5 	bl	8001b8c <HAL_Delay>
      ms++;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	3301      	adds	r3, #1
 8005be6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fa39 	bl	8006060 <USB_GetMode>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d01e      	beq.n	8005c32 <USB_SetCurrentMode+0x84>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b31      	cmp	r3, #49	; 0x31
 8005bf8:	d9f0      	bls.n	8005bdc <USB_SetCurrentMode+0x2e>
 8005bfa:	e01a      	b.n	8005c32 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bfc:	78fb      	ldrb	r3, [r7, #3]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d115      	bne.n	8005c2e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c0e:	2001      	movs	r0, #1
 8005c10:	f7fb ffbc 	bl	8001b8c <HAL_Delay>
      ms++;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	3301      	adds	r3, #1
 8005c18:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fa20 	bl	8006060 <USB_GetMode>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d005      	beq.n	8005c32 <USB_SetCurrentMode+0x84>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2b31      	cmp	r3, #49	; 0x31
 8005c2a:	d9f0      	bls.n	8005c0e <USB_SetCurrentMode+0x60>
 8005c2c:	e001      	b.n	8005c32 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e005      	b.n	8005c3e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b32      	cmp	r3, #50	; 0x32
 8005c36:	d101      	bne.n	8005c3c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e000      	b.n	8005c3e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c48:	b084      	sub	sp, #16
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b086      	sub	sp, #24
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c62:	2300      	movs	r3, #0
 8005c64:	613b      	str	r3, [r7, #16]
 8005c66:	e009      	b.n	8005c7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	3340      	adds	r3, #64	; 0x40
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	2200      	movs	r2, #0
 8005c74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	3301      	adds	r3, #1
 8005c7a:	613b      	str	r3, [r7, #16]
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	2b0e      	cmp	r3, #14
 8005c80:	d9f2      	bls.n	8005c68 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d11c      	bne.n	8005cc2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c96:	f043 0302 	orr.w	r3, r3, #2
 8005c9a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	e005      	b.n	8005cce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce8:	461a      	mov	r2, r3
 8005cea:	680b      	ldr	r3, [r1, #0]
 8005cec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d10c      	bne.n	8005d0e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d104      	bne.n	8005d04 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f975 	bl	8005fec <USB_SetDevSpeed>
 8005d02:	e018      	b.n	8005d36 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d04:	2101      	movs	r1, #1
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f970 	bl	8005fec <USB_SetDevSpeed>
 8005d0c:	e013      	b.n	8005d36 <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	2b03      	cmp	r3, #3
 8005d12:	d10c      	bne.n	8005d2e <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d104      	bne.n	8005d24 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f965 	bl	8005fec <USB_SetDevSpeed>
 8005d22:	e008      	b.n	8005d36 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d24:	2101      	movs	r1, #1
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f960 	bl	8005fec <USB_SetDevSpeed>
 8005d2c:	e003      	b.n	8005d36 <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d2e:	2103      	movs	r1, #3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f95b 	bl	8005fec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d36:	2110      	movs	r1, #16
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f8f3 	bl	8005f24 <USB_FlushTxFifo>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f91f 	bl	8005f8c <USB_FlushRxFifo>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d5e:	461a      	mov	r2, r3
 8005d60:	2300      	movs	r3, #0
 8005d62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d76:	461a      	mov	r2, r3
 8005d78:	2300      	movs	r3, #0
 8005d7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	613b      	str	r3, [r7, #16]
 8005d80:	e043      	b.n	8005e0a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d98:	d118      	bne.n	8005dcc <USB_DevInit+0x184>
    {
      if (i == 0U)
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10a      	bne.n	8005db6 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dac:	461a      	mov	r2, r3
 8005dae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005db2:	6013      	str	r3, [r2, #0]
 8005db4:	e013      	b.n	8005dde <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	e008      	b.n	8005dde <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd8:	461a      	mov	r2, r3
 8005dda:	2300      	movs	r3, #0
 8005ddc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dea:	461a      	mov	r2, r3
 8005dec:	2300      	movs	r3, #0
 8005dee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	3301      	adds	r3, #1
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d3b7      	bcc.n	8005d82 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e12:	2300      	movs	r3, #0
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	e043      	b.n	8005ea0 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e2e:	d118      	bne.n	8005e62 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10a      	bne.n	8005e4c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	461a      	mov	r2, r3
 8005e44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	e013      	b.n	8005e74 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e58:	461a      	mov	r2, r3
 8005e5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	e008      	b.n	8005e74 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	015a      	lsls	r2, r3, #5
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	4413      	add	r3, r2
 8005e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6e:	461a      	mov	r2, r3
 8005e70:	2300      	movs	r3, #0
 8005e72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e80:	461a      	mov	r2, r3
 8005e82:	2300      	movs	r3, #0
 8005e84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	015a      	lsls	r2, r3, #5
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e92:	461a      	mov	r2, r3
 8005e94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	613b      	str	r3, [r7, #16]
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	693a      	ldr	r2, [r7, #16]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d3b7      	bcc.n	8005e18 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ec8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d105      	bne.n	8005edc <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	f043 0210 	orr.w	r2, r3, #16
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699a      	ldr	r2, [r3, #24]
 8005ee0:	4b0e      	ldr	r3, [pc, #56]	; (8005f1c <USB_DevInit+0x2d4>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d005      	beq.n	8005efa <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	f043 0208 	orr.w	r2, r3, #8
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d105      	bne.n	8005f0c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	699a      	ldr	r2, [r3, #24]
 8005f04:	4b06      	ldr	r3, [pc, #24]	; (8005f20 <USB_DevInit+0x2d8>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f18:	b004      	add	sp, #16
 8005f1a:	4770      	bx	lr
 8005f1c:	803c3800 	.word	0x803c3800
 8005f20:	40000004 	.word	0x40000004

08005f24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3301      	adds	r3, #1
 8005f36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	4a13      	ldr	r2, [pc, #76]	; (8005f88 <USB_FlushTxFifo+0x64>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d901      	bls.n	8005f44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e01b      	b.n	8005f7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	daf2      	bge.n	8005f32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	019b      	lsls	r3, r3, #6
 8005f54:	f043 0220 	orr.w	r2, r3, #32
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	4a08      	ldr	r2, [pc, #32]	; (8005f88 <USB_FlushTxFifo+0x64>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d901      	bls.n	8005f6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e006      	b.n	8005f7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	f003 0320 	and.w	r3, r3, #32
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	d0f0      	beq.n	8005f5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	00030d40 	.word	0x00030d40

08005f8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	4a11      	ldr	r2, [pc, #68]	; (8005fe8 <USB_FlushRxFifo+0x5c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d901      	bls.n	8005faa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e018      	b.n	8005fdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	daf2      	bge.n	8005f98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2210      	movs	r2, #16
 8005fba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4a08      	ldr	r2, [pc, #32]	; (8005fe8 <USB_FlushRxFifo+0x5c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d901      	bls.n	8005fce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e006      	b.n	8005fdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f003 0310 	and.w	r3, r3, #16
 8005fd6:	2b10      	cmp	r3, #16
 8005fd8:	d0f0      	beq.n	8005fbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	00030d40 	.word	0x00030d40

08005fec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	68f9      	ldr	r1, [r7, #12]
 8006008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800600c:	4313      	orrs	r3, r2
 800600e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800601e:	b480      	push	{r7}
 8006020:	b085      	sub	sp, #20
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006038:	f023 0303 	bic.w	r3, r3, #3
 800603c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800604c:	f043 0302 	orr.w	r3, r3, #2
 8006050:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	f003 0301 	and.w	r3, r3, #1
}
 8006070:	4618      	mov	r0, r3
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	3301      	adds	r3, #1
 800608c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4a13      	ldr	r2, [pc, #76]	; (80060e0 <USB_CoreReset+0x64>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d901      	bls.n	800609a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e01b      	b.n	80060d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	daf2      	bge.n	8006088 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f043 0201 	orr.w	r2, r3, #1
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	3301      	adds	r3, #1
 80060b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4a09      	ldr	r2, [pc, #36]	; (80060e0 <USB_CoreReset+0x64>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d901      	bls.n	80060c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e006      	b.n	80060d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d0f0      	beq.n	80060b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop
 80060e0:	00030d40 	.word	0x00030d40

080060e4 <atoi>:
 80060e4:	220a      	movs	r2, #10
 80060e6:	2100      	movs	r1, #0
 80060e8:	f000 b882 	b.w	80061f0 <strtol>

080060ec <_strtol_l.constprop.0>:
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060f2:	d001      	beq.n	80060f8 <_strtol_l.constprop.0+0xc>
 80060f4:	2b24      	cmp	r3, #36	; 0x24
 80060f6:	d906      	bls.n	8006106 <_strtol_l.constprop.0+0x1a>
 80060f8:	f000 f88c 	bl	8006214 <__errno>
 80060fc:	2316      	movs	r3, #22
 80060fe:	6003      	str	r3, [r0, #0]
 8006100:	2000      	movs	r0, #0
 8006102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006106:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80061ec <_strtol_l.constprop.0+0x100>
 800610a:	460d      	mov	r5, r1
 800610c:	462e      	mov	r6, r5
 800610e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006112:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006116:	f017 0708 	ands.w	r7, r7, #8
 800611a:	d1f7      	bne.n	800610c <_strtol_l.constprop.0+0x20>
 800611c:	2c2d      	cmp	r4, #45	; 0x2d
 800611e:	d132      	bne.n	8006186 <_strtol_l.constprop.0+0x9a>
 8006120:	782c      	ldrb	r4, [r5, #0]
 8006122:	2701      	movs	r7, #1
 8006124:	1cb5      	adds	r5, r6, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d05b      	beq.n	80061e2 <_strtol_l.constprop.0+0xf6>
 800612a:	2b10      	cmp	r3, #16
 800612c:	d109      	bne.n	8006142 <_strtol_l.constprop.0+0x56>
 800612e:	2c30      	cmp	r4, #48	; 0x30
 8006130:	d107      	bne.n	8006142 <_strtol_l.constprop.0+0x56>
 8006132:	782c      	ldrb	r4, [r5, #0]
 8006134:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006138:	2c58      	cmp	r4, #88	; 0x58
 800613a:	d14d      	bne.n	80061d8 <_strtol_l.constprop.0+0xec>
 800613c:	786c      	ldrb	r4, [r5, #1]
 800613e:	2310      	movs	r3, #16
 8006140:	3502      	adds	r5, #2
 8006142:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006146:	f108 38ff 	add.w	r8, r8, #4294967295
 800614a:	f04f 0e00 	mov.w	lr, #0
 800614e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006152:	4676      	mov	r6, lr
 8006154:	fb03 8a19 	mls	sl, r3, r9, r8
 8006158:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800615c:	f1bc 0f09 	cmp.w	ip, #9
 8006160:	d816      	bhi.n	8006190 <_strtol_l.constprop.0+0xa4>
 8006162:	4664      	mov	r4, ip
 8006164:	42a3      	cmp	r3, r4
 8006166:	dd24      	ble.n	80061b2 <_strtol_l.constprop.0+0xc6>
 8006168:	f1be 3fff 	cmp.w	lr, #4294967295
 800616c:	d008      	beq.n	8006180 <_strtol_l.constprop.0+0x94>
 800616e:	45b1      	cmp	r9, r6
 8006170:	d31c      	bcc.n	80061ac <_strtol_l.constprop.0+0xc0>
 8006172:	d101      	bne.n	8006178 <_strtol_l.constprop.0+0x8c>
 8006174:	45a2      	cmp	sl, r4
 8006176:	db19      	blt.n	80061ac <_strtol_l.constprop.0+0xc0>
 8006178:	fb06 4603 	mla	r6, r6, r3, r4
 800617c:	f04f 0e01 	mov.w	lr, #1
 8006180:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006184:	e7e8      	b.n	8006158 <_strtol_l.constprop.0+0x6c>
 8006186:	2c2b      	cmp	r4, #43	; 0x2b
 8006188:	bf04      	itt	eq
 800618a:	782c      	ldrbeq	r4, [r5, #0]
 800618c:	1cb5      	addeq	r5, r6, #2
 800618e:	e7ca      	b.n	8006126 <_strtol_l.constprop.0+0x3a>
 8006190:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006194:	f1bc 0f19 	cmp.w	ip, #25
 8006198:	d801      	bhi.n	800619e <_strtol_l.constprop.0+0xb2>
 800619a:	3c37      	subs	r4, #55	; 0x37
 800619c:	e7e2      	b.n	8006164 <_strtol_l.constprop.0+0x78>
 800619e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80061a2:	f1bc 0f19 	cmp.w	ip, #25
 80061a6:	d804      	bhi.n	80061b2 <_strtol_l.constprop.0+0xc6>
 80061a8:	3c57      	subs	r4, #87	; 0x57
 80061aa:	e7db      	b.n	8006164 <_strtol_l.constprop.0+0x78>
 80061ac:	f04f 3eff 	mov.w	lr, #4294967295
 80061b0:	e7e6      	b.n	8006180 <_strtol_l.constprop.0+0x94>
 80061b2:	f1be 3fff 	cmp.w	lr, #4294967295
 80061b6:	d105      	bne.n	80061c4 <_strtol_l.constprop.0+0xd8>
 80061b8:	2322      	movs	r3, #34	; 0x22
 80061ba:	6003      	str	r3, [r0, #0]
 80061bc:	4646      	mov	r6, r8
 80061be:	b942      	cbnz	r2, 80061d2 <_strtol_l.constprop.0+0xe6>
 80061c0:	4630      	mov	r0, r6
 80061c2:	e79e      	b.n	8006102 <_strtol_l.constprop.0+0x16>
 80061c4:	b107      	cbz	r7, 80061c8 <_strtol_l.constprop.0+0xdc>
 80061c6:	4276      	negs	r6, r6
 80061c8:	2a00      	cmp	r2, #0
 80061ca:	d0f9      	beq.n	80061c0 <_strtol_l.constprop.0+0xd4>
 80061cc:	f1be 0f00 	cmp.w	lr, #0
 80061d0:	d000      	beq.n	80061d4 <_strtol_l.constprop.0+0xe8>
 80061d2:	1e69      	subs	r1, r5, #1
 80061d4:	6011      	str	r1, [r2, #0]
 80061d6:	e7f3      	b.n	80061c0 <_strtol_l.constprop.0+0xd4>
 80061d8:	2430      	movs	r4, #48	; 0x30
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1b1      	bne.n	8006142 <_strtol_l.constprop.0+0x56>
 80061de:	2308      	movs	r3, #8
 80061e0:	e7af      	b.n	8006142 <_strtol_l.constprop.0+0x56>
 80061e2:	2c30      	cmp	r4, #48	; 0x30
 80061e4:	d0a5      	beq.n	8006132 <_strtol_l.constprop.0+0x46>
 80061e6:	230a      	movs	r3, #10
 80061e8:	e7ab      	b.n	8006142 <_strtol_l.constprop.0+0x56>
 80061ea:	bf00      	nop
 80061ec:	08006785 	.word	0x08006785

080061f0 <strtol>:
 80061f0:	4613      	mov	r3, r2
 80061f2:	460a      	mov	r2, r1
 80061f4:	4601      	mov	r1, r0
 80061f6:	4802      	ldr	r0, [pc, #8]	; (8006200 <strtol+0x10>)
 80061f8:	6800      	ldr	r0, [r0, #0]
 80061fa:	f7ff bf77 	b.w	80060ec <_strtol_l.constprop.0>
 80061fe:	bf00      	nop
 8006200:	2000005c 	.word	0x2000005c

08006204 <memset>:
 8006204:	4402      	add	r2, r0
 8006206:	4603      	mov	r3, r0
 8006208:	4293      	cmp	r3, r2
 800620a:	d100      	bne.n	800620e <memset+0xa>
 800620c:	4770      	bx	lr
 800620e:	f803 1b01 	strb.w	r1, [r3], #1
 8006212:	e7f9      	b.n	8006208 <memset+0x4>

08006214 <__errno>:
 8006214:	4b01      	ldr	r3, [pc, #4]	; (800621c <__errno+0x8>)
 8006216:	6818      	ldr	r0, [r3, #0]
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	2000005c 	.word	0x2000005c

08006220 <__libc_init_array>:
 8006220:	b570      	push	{r4, r5, r6, lr}
 8006222:	4d0d      	ldr	r5, [pc, #52]	; (8006258 <__libc_init_array+0x38>)
 8006224:	4c0d      	ldr	r4, [pc, #52]	; (800625c <__libc_init_array+0x3c>)
 8006226:	1b64      	subs	r4, r4, r5
 8006228:	10a4      	asrs	r4, r4, #2
 800622a:	2600      	movs	r6, #0
 800622c:	42a6      	cmp	r6, r4
 800622e:	d109      	bne.n	8006244 <__libc_init_array+0x24>
 8006230:	4d0b      	ldr	r5, [pc, #44]	; (8006260 <__libc_init_array+0x40>)
 8006232:	4c0c      	ldr	r4, [pc, #48]	; (8006264 <__libc_init_array+0x44>)
 8006234:	f000 f826 	bl	8006284 <_init>
 8006238:	1b64      	subs	r4, r4, r5
 800623a:	10a4      	asrs	r4, r4, #2
 800623c:	2600      	movs	r6, #0
 800623e:	42a6      	cmp	r6, r4
 8006240:	d105      	bne.n	800624e <__libc_init_array+0x2e>
 8006242:	bd70      	pop	{r4, r5, r6, pc}
 8006244:	f855 3b04 	ldr.w	r3, [r5], #4
 8006248:	4798      	blx	r3
 800624a:	3601      	adds	r6, #1
 800624c:	e7ee      	b.n	800622c <__libc_init_array+0xc>
 800624e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006252:	4798      	blx	r3
 8006254:	3601      	adds	r6, #1
 8006256:	e7f2      	b.n	800623e <__libc_init_array+0x1e>
 8006258:	08006890 	.word	0x08006890
 800625c:	08006890 	.word	0x08006890
 8006260:	08006890 	.word	0x08006890
 8006264:	08006894 	.word	0x08006894

08006268 <memcpy>:
 8006268:	440a      	add	r2, r1
 800626a:	4291      	cmp	r1, r2
 800626c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006270:	d100      	bne.n	8006274 <memcpy+0xc>
 8006272:	4770      	bx	lr
 8006274:	b510      	push	{r4, lr}
 8006276:	f811 4b01 	ldrb.w	r4, [r1], #1
 800627a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800627e:	4291      	cmp	r1, r2
 8006280:	d1f9      	bne.n	8006276 <memcpy+0xe>
 8006282:	bd10      	pop	{r4, pc}

08006284 <_init>:
 8006284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006286:	bf00      	nop
 8006288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800628a:	bc08      	pop	{r3}
 800628c:	469e      	mov	lr, r3
 800628e:	4770      	bx	lr

08006290 <_fini>:
 8006290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006292:	bf00      	nop
 8006294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006296:	bc08      	pop	{r3}
 8006298:	469e      	mov	lr, r3
 800629a:	4770      	bx	lr
