
STM32_MES_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062d8  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  080064b8  080064b8  000164b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bc8  08006bc8  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006bc8  08006bc8  00016bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bd0  08006bd0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bd0  08006bd0  00016bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bd4  08006bd4  00016bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a0c  20000060  08006c38  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a6c  08006c38  00020a6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000180d3  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003384  00000000  00000000  000381a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001560  00000000  00000000  0003b530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010af  00000000  00000000  0003ca90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024abd  00000000  00000000  0003db3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a47e  00000000  00000000  000625fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e23c0  00000000  00000000  0007ca7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cf8  00000000  00000000  0015ee3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00164b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	080064a0 	.word	0x080064a0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	080064a0 	.word	0x080064a0

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr

08000244 <__aeabi_uldivmod>:
 8000244:	b953      	cbnz	r3, 800025c <__aeabi_uldivmod+0x18>
 8000246:	b94a      	cbnz	r2, 800025c <__aeabi_uldivmod+0x18>
 8000248:	2900      	cmp	r1, #0
 800024a:	bf08      	it	eq
 800024c:	2800      	cmpeq	r0, #0
 800024e:	bf1c      	itt	ne
 8000250:	f04f 31ff 	movne.w	r1, #4294967295
 8000254:	f04f 30ff 	movne.w	r0, #4294967295
 8000258:	f000 b970 	b.w	800053c <__aeabi_idiv0>
 800025c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000260:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4770      	bx	lr

08000274 <__udivmoddi4>:
 8000274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000278:	9e08      	ldr	r6, [sp, #32]
 800027a:	460d      	mov	r5, r1
 800027c:	4604      	mov	r4, r0
 800027e:	460f      	mov	r7, r1
 8000280:	2b00      	cmp	r3, #0
 8000282:	d14a      	bne.n	800031a <__udivmoddi4+0xa6>
 8000284:	428a      	cmp	r2, r1
 8000286:	4694      	mov	ip, r2
 8000288:	d965      	bls.n	8000356 <__udivmoddi4+0xe2>
 800028a:	fab2 f382 	clz	r3, r2
 800028e:	b143      	cbz	r3, 80002a2 <__udivmoddi4+0x2e>
 8000290:	fa02 fc03 	lsl.w	ip, r2, r3
 8000294:	f1c3 0220 	rsb	r2, r3, #32
 8000298:	409f      	lsls	r7, r3
 800029a:	fa20 f202 	lsr.w	r2, r0, r2
 800029e:	4317      	orrs	r7, r2
 80002a0:	409c      	lsls	r4, r3
 80002a2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002a6:	fa1f f58c 	uxth.w	r5, ip
 80002aa:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ae:	0c22      	lsrs	r2, r4, #16
 80002b0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002b4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b8:	fb01 f005 	mul.w	r0, r1, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x62>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c8:	f080 811c 	bcs.w	8000504 <__udivmoddi4+0x290>
 80002cc:	4290      	cmp	r0, r2
 80002ce:	f240 8119 	bls.w	8000504 <__udivmoddi4+0x290>
 80002d2:	3902      	subs	r1, #2
 80002d4:	4462      	add	r2, ip
 80002d6:	1a12      	subs	r2, r2, r0
 80002d8:	b2a4      	uxth	r4, r4
 80002da:	fbb2 f0fe 	udiv	r0, r2, lr
 80002de:	fb0e 2210 	mls	r2, lr, r0, r2
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	fb00 f505 	mul.w	r5, r0, r5
 80002ea:	42a5      	cmp	r5, r4
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x90>
 80002ee:	eb1c 0404 	adds.w	r4, ip, r4
 80002f2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f6:	f080 8107 	bcs.w	8000508 <__udivmoddi4+0x294>
 80002fa:	42a5      	cmp	r5, r4
 80002fc:	f240 8104 	bls.w	8000508 <__udivmoddi4+0x294>
 8000300:	4464      	add	r4, ip
 8000302:	3802      	subs	r0, #2
 8000304:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000308:	1b64      	subs	r4, r4, r5
 800030a:	2100      	movs	r1, #0
 800030c:	b11e      	cbz	r6, 8000316 <__udivmoddi4+0xa2>
 800030e:	40dc      	lsrs	r4, r3
 8000310:	2300      	movs	r3, #0
 8000312:	e9c6 4300 	strd	r4, r3, [r6]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0xbc>
 800031e:	2e00      	cmp	r6, #0
 8000320:	f000 80ed 	beq.w	80004fe <__udivmoddi4+0x28a>
 8000324:	2100      	movs	r1, #0
 8000326:	e9c6 0500 	strd	r0, r5, [r6]
 800032a:	4608      	mov	r0, r1
 800032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000330:	fab3 f183 	clz	r1, r3
 8000334:	2900      	cmp	r1, #0
 8000336:	d149      	bne.n	80003cc <__udivmoddi4+0x158>
 8000338:	42ab      	cmp	r3, r5
 800033a:	d302      	bcc.n	8000342 <__udivmoddi4+0xce>
 800033c:	4282      	cmp	r2, r0
 800033e:	f200 80f8 	bhi.w	8000532 <__udivmoddi4+0x2be>
 8000342:	1a84      	subs	r4, r0, r2
 8000344:	eb65 0203 	sbc.w	r2, r5, r3
 8000348:	2001      	movs	r0, #1
 800034a:	4617      	mov	r7, r2
 800034c:	2e00      	cmp	r6, #0
 800034e:	d0e2      	beq.n	8000316 <__udivmoddi4+0xa2>
 8000350:	e9c6 4700 	strd	r4, r7, [r6]
 8000354:	e7df      	b.n	8000316 <__udivmoddi4+0xa2>
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xe6>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f382 	clz	r3, r2
 800035e:	2b00      	cmp	r3, #0
 8000360:	f040 8090 	bne.w	8000484 <__udivmoddi4+0x210>
 8000364:	1a8a      	subs	r2, r1, r2
 8000366:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036a:	fa1f fe8c 	uxth.w	lr, ip
 800036e:	2101      	movs	r1, #1
 8000370:	fbb2 f5f7 	udiv	r5, r2, r7
 8000374:	fb07 2015 	mls	r0, r7, r5, r2
 8000378:	0c22      	lsrs	r2, r4, #16
 800037a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037e:	fb0e f005 	mul.w	r0, lr, r5
 8000382:	4290      	cmp	r0, r2
 8000384:	d908      	bls.n	8000398 <__udivmoddi4+0x124>
 8000386:	eb1c 0202 	adds.w	r2, ip, r2
 800038a:	f105 38ff 	add.w	r8, r5, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x122>
 8000390:	4290      	cmp	r0, r2
 8000392:	f200 80cb 	bhi.w	800052c <__udivmoddi4+0x2b8>
 8000396:	4645      	mov	r5, r8
 8000398:	1a12      	subs	r2, r2, r0
 800039a:	b2a4      	uxth	r4, r4
 800039c:	fbb2 f0f7 	udiv	r0, r2, r7
 80003a0:	fb07 2210 	mls	r2, r7, r0, r2
 80003a4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a8:	fb0e fe00 	mul.w	lr, lr, r0
 80003ac:	45a6      	cmp	lr, r4
 80003ae:	d908      	bls.n	80003c2 <__udivmoddi4+0x14e>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b8:	d202      	bcs.n	80003c0 <__udivmoddi4+0x14c>
 80003ba:	45a6      	cmp	lr, r4
 80003bc:	f200 80bb 	bhi.w	8000536 <__udivmoddi4+0x2c2>
 80003c0:	4610      	mov	r0, r2
 80003c2:	eba4 040e 	sub.w	r4, r4, lr
 80003c6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ca:	e79f      	b.n	800030c <__udivmoddi4+0x98>
 80003cc:	f1c1 0720 	rsb	r7, r1, #32
 80003d0:	408b      	lsls	r3, r1
 80003d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003da:	fa05 f401 	lsl.w	r4, r5, r1
 80003de:	fa20 f307 	lsr.w	r3, r0, r7
 80003e2:	40fd      	lsrs	r5, r7
 80003e4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e8:	4323      	orrs	r3, r4
 80003ea:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	fb09 5518 	mls	r5, r9, r8, r5
 80003f6:	0c1c      	lsrs	r4, r3, #16
 80003f8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003fc:	fb08 f50e 	mul.w	r5, r8, lr
 8000400:	42a5      	cmp	r5, r4
 8000402:	fa02 f201 	lsl.w	r2, r2, r1
 8000406:	fa00 f001 	lsl.w	r0, r0, r1
 800040a:	d90b      	bls.n	8000424 <__udivmoddi4+0x1b0>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f108 3aff 	add.w	sl, r8, #4294967295
 8000414:	f080 8088 	bcs.w	8000528 <__udivmoddi4+0x2b4>
 8000418:	42a5      	cmp	r5, r4
 800041a:	f240 8085 	bls.w	8000528 <__udivmoddi4+0x2b4>
 800041e:	f1a8 0802 	sub.w	r8, r8, #2
 8000422:	4464      	add	r4, ip
 8000424:	1b64      	subs	r4, r4, r5
 8000426:	b29d      	uxth	r5, r3
 8000428:	fbb4 f3f9 	udiv	r3, r4, r9
 800042c:	fb09 4413 	mls	r4, r9, r3, r4
 8000430:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000434:	fb03 fe0e 	mul.w	lr, r3, lr
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x1da>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f103 35ff 	add.w	r5, r3, #4294967295
 8000444:	d26c      	bcs.n	8000520 <__udivmoddi4+0x2ac>
 8000446:	45a6      	cmp	lr, r4
 8000448:	d96a      	bls.n	8000520 <__udivmoddi4+0x2ac>
 800044a:	3b02      	subs	r3, #2
 800044c:	4464      	add	r4, ip
 800044e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000452:	fba3 9502 	umull	r9, r5, r3, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	42ac      	cmp	r4, r5
 800045c:	46c8      	mov	r8, r9
 800045e:	46ae      	mov	lr, r5
 8000460:	d356      	bcc.n	8000510 <__udivmoddi4+0x29c>
 8000462:	d053      	beq.n	800050c <__udivmoddi4+0x298>
 8000464:	b156      	cbz	r6, 800047c <__udivmoddi4+0x208>
 8000466:	ebb0 0208 	subs.w	r2, r0, r8
 800046a:	eb64 040e 	sbc.w	r4, r4, lr
 800046e:	fa04 f707 	lsl.w	r7, r4, r7
 8000472:	40ca      	lsrs	r2, r1
 8000474:	40cc      	lsrs	r4, r1
 8000476:	4317      	orrs	r7, r2
 8000478:	e9c6 7400 	strd	r7, r4, [r6]
 800047c:	4618      	mov	r0, r3
 800047e:	2100      	movs	r1, #0
 8000480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000484:	f1c3 0120 	rsb	r1, r3, #32
 8000488:	fa02 fc03 	lsl.w	ip, r2, r3
 800048c:	fa20 f201 	lsr.w	r2, r0, r1
 8000490:	fa25 f101 	lsr.w	r1, r5, r1
 8000494:	409d      	lsls	r5, r3
 8000496:	432a      	orrs	r2, r5
 8000498:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800049c:	fa1f fe8c 	uxth.w	lr, ip
 80004a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004a4:	fb07 1510 	mls	r5, r7, r0, r1
 80004a8:	0c11      	lsrs	r1, r2, #16
 80004aa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ae:	fb00 f50e 	mul.w	r5, r0, lr
 80004b2:	428d      	cmp	r5, r1
 80004b4:	fa04 f403 	lsl.w	r4, r4, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x258>
 80004ba:	eb1c 0101 	adds.w	r1, ip, r1
 80004be:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c2:	d22f      	bcs.n	8000524 <__udivmoddi4+0x2b0>
 80004c4:	428d      	cmp	r5, r1
 80004c6:	d92d      	bls.n	8000524 <__udivmoddi4+0x2b0>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	1b49      	subs	r1, r1, r5
 80004ce:	b292      	uxth	r2, r2
 80004d0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004d4:	fb07 1115 	mls	r1, r7, r5, r1
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	fb05 f10e 	mul.w	r1, r5, lr
 80004e0:	4291      	cmp	r1, r2
 80004e2:	d908      	bls.n	80004f6 <__udivmoddi4+0x282>
 80004e4:	eb1c 0202 	adds.w	r2, ip, r2
 80004e8:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ec:	d216      	bcs.n	800051c <__udivmoddi4+0x2a8>
 80004ee:	4291      	cmp	r1, r2
 80004f0:	d914      	bls.n	800051c <__udivmoddi4+0x2a8>
 80004f2:	3d02      	subs	r5, #2
 80004f4:	4462      	add	r2, ip
 80004f6:	1a52      	subs	r2, r2, r1
 80004f8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004fc:	e738      	b.n	8000370 <__udivmoddi4+0xfc>
 80004fe:	4631      	mov	r1, r6
 8000500:	4630      	mov	r0, r6
 8000502:	e708      	b.n	8000316 <__udivmoddi4+0xa2>
 8000504:	4639      	mov	r1, r7
 8000506:	e6e6      	b.n	80002d6 <__udivmoddi4+0x62>
 8000508:	4610      	mov	r0, r2
 800050a:	e6fb      	b.n	8000304 <__udivmoddi4+0x90>
 800050c:	4548      	cmp	r0, r9
 800050e:	d2a9      	bcs.n	8000464 <__udivmoddi4+0x1f0>
 8000510:	ebb9 0802 	subs.w	r8, r9, r2
 8000514:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000518:	3b01      	subs	r3, #1
 800051a:	e7a3      	b.n	8000464 <__udivmoddi4+0x1f0>
 800051c:	4645      	mov	r5, r8
 800051e:	e7ea      	b.n	80004f6 <__udivmoddi4+0x282>
 8000520:	462b      	mov	r3, r5
 8000522:	e794      	b.n	800044e <__udivmoddi4+0x1da>
 8000524:	4640      	mov	r0, r8
 8000526:	e7d1      	b.n	80004cc <__udivmoddi4+0x258>
 8000528:	46d0      	mov	r8, sl
 800052a:	e77b      	b.n	8000424 <__udivmoddi4+0x1b0>
 800052c:	3d02      	subs	r5, #2
 800052e:	4462      	add	r2, ip
 8000530:	e732      	b.n	8000398 <__udivmoddi4+0x124>
 8000532:	4608      	mov	r0, r1
 8000534:	e70a      	b.n	800034c <__udivmoddi4+0xd8>
 8000536:	4464      	add	r4, ip
 8000538:	3802      	subs	r0, #2
 800053a:	e742      	b.n	80003c2 <__udivmoddi4+0x14e>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 8000552:	683a      	ldr	r2, [r7, #0]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	4413      	add	r3, r2
 8000558:	781a      	ldrb	r2, [r3, #0]
 800055a:	6879      	ldr	r1, [r7, #4]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	440b      	add	r3, r1
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	429a      	cmp	r2, r3
 8000564:	d114      	bne.n	8000590 <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 8000566:	2301      	movs	r3, #1
 8000568:	60bb      	str	r3, [r7, #8]
		i++;
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	3301      	adds	r3, #1
 800056e:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 8000570:	e00e      	b.n	8000590 <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 8000572:	683a      	ldr	r2, [r7, #0]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	4413      	add	r3, r2
 8000578:	781a      	ldrb	r2, [r3, #0]
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	440b      	add	r3, r1
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	429a      	cmp	r2, r3
 8000584:	d001      	beq.n	800058a <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
		}
		i++;
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	3301      	adds	r3, #1
 800058e:	60fb      	str	r3, [r7, #12]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d11a      	bne.n	80005cc <ConsoleCommandMatch+0x8c>
	while ( ( 1u == result ) &&
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2b09      	cmp	r3, #9
 800059a:	d817      	bhi.n	80005cc <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 800059c:	683a      	ldr	r2, [r7, #0]
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	4413      	add	r3, r2
 80005a2:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80005a4:	2b20      	cmp	r3, #32
 80005a6:	d011      	beq.n	80005cc <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005a8:	683a      	ldr	r2, [r7, #0]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	4413      	add	r3, r2
 80005ae:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80005b0:	2b0a      	cmp	r3, #10
 80005b2:	d00b      	beq.n	80005cc <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005b4:	683a      	ldr	r2, [r7, #0]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	4413      	add	r3, r2
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b0d      	cmp	r3, #13
 80005be:	d005      	beq.n	80005cc <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	4413      	add	r3, r2
 80005c6:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1d2      	bne.n	8000572 <ConsoleCommandMatch+0x32>
	}

	return result;
 80005cc:	68bb      	ldr	r3, [r7, #8]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 80005da:	b480      	push	{r7}
 80005dc:	b087      	sub	sp, #28
 80005de:	af00      	add	r7, sp, #0
 80005e0:	60f8      	str	r0, [r7, #12]
 80005e2:	60b9      	str	r1, [r7, #8]
 80005e4:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 80005e6:	68ba      	ldr	r2, [r7, #8]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	1ad3      	subs	r3, r2, r3
 80005ec:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 80005f2:	e00d      	b.n	8000610 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	441a      	add	r2, r3
 80005fa:	68f9      	ldr	r1, [r7, #12]
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	440b      	add	r3, r1
 8000600:	7812      	ldrb	r2, [r2, #0]
 8000602:	701a      	strb	r2, [r3, #0]
		i++;
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	3301      	adds	r3, #1
 8000608:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	3301      	adds	r3, #1
 800060e:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	429a      	cmp	r2, r3
 8000616:	d3ed      	bcc.n	80005f4 <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000618:	e007      	b.n	800062a <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	4413      	add	r3, r2
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	3301      	adds	r3, #1
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	2bff      	cmp	r3, #255	; 0xff
 800062e:	d9f4      	bls.n	800061a <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000630:	693b      	ldr	r3, [r7, #16]
}
 8000632:	4618      	mov	r0, r3
 8000634:	371c      	adds	r7, #28
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 800063e:	b480      	push	{r7}
 8000640:	b085      	sub	sp, #20
 8000642:	af00      	add	r7, sp, #0
 8000644:	6078      	str	r0, [r7, #4]
 8000646:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 800064c:	f04f 33ff 	mov.w	r3, #4294967295
 8000650:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000652:	e002      	b.n	800065a <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	3301      	adds	r3, #1
 8000658:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
			&& ( i < filledLength ) )
 8000662:	2b0d      	cmp	r3, #13
 8000664:	d009      	beq.n	800067a <ConsoleCommandEndline+0x3c>
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	4413      	add	r3, r2
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b0a      	cmp	r3, #10
 8000670:	d003      	beq.n	800067a <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	429a      	cmp	r2, r3
 8000678:	d3ec      	bcc.n	8000654 <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	429a      	cmp	r2, r3
 8000680:	d201      	bcs.n	8000686 <ConsoleCommandEndline+0x48>
	{
		result = i;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	60bb      	str	r3, [r7, #8]
	}
	return result;
 8000686:	68bb      	ldr	r3, [r7, #8]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 800069a:	f000 fd17 	bl	80010cc <ConsoleIoInit>
	ConsoleIoSendString("Welcome to Sandeep's console.");
 800069e:	480f      	ldr	r0, [pc, #60]	; (80006dc <ConsoleInit+0x48>)
 80006a0:	f000 fd92 	bl	80011c8 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80006a4:	480e      	ldr	r0, [pc, #56]	; (80006e0 <ConsoleInit+0x4c>)
 80006a6:	f000 fd8f 	bl	80011c8 <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80006aa:	480e      	ldr	r0, [pc, #56]	; (80006e4 <ConsoleInit+0x50>)
 80006ac:	f000 fd8c 	bl	80011c8 <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <ConsoleInit+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80006b6:	2300      	movs	r3, #0
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	e007      	b.n	80006cc <ConsoleInit+0x38>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 80006bc:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <ConsoleInit+0x58>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4413      	add	r3, r2
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	3301      	adds	r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2bff      	cmp	r3, #255	; 0xff
 80006d0:	d9f4      	bls.n	80006bc <ConsoleInit+0x28>
	}

}
 80006d2:	bf00      	nop
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	080064b8 	.word	0x080064b8
 80006e0:	080064d8 	.word	0x080064d8
 80006e4:	080064dc 	.word	0x080064dc
 80006e8:	2000017c 	.word	0x2000017c
 80006ec:	2000007c 	.word	0x2000007c

080006f0 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 80006f6:	4b54      	ldr	r3, [pc, #336]	; (8000848 <ConsoleProcess+0x158>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a54      	ldr	r2, [pc, #336]	; (800084c <ConsoleProcess+0x15c>)
 80006fc:	1898      	adds	r0, r3, r2
 80006fe:	4b52      	ldr	r3, [pc, #328]	; (8000848 <ConsoleProcess+0x158>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000706:	463a      	mov	r2, r7
 8000708:	4619      	mov	r1, r3
 800070a:	f000 fd29 	bl	8001160 <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d104      	bne.n	800071e <ConsoleProcess+0x2e>
 8000714:	4b4e      	ldr	r3, [pc, #312]	; (8000850 <ConsoleProcess+0x160>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	f000 8091 	beq.w	8000840 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 800071e:	4b4c      	ldr	r3, [pc, #304]	; (8000850 <ConsoleProcess+0x160>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 8000724:	4b48      	ldr	r3, [pc, #288]	; (8000848 <ConsoleProcess+0x158>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	4413      	add	r3, r2
 800072c:	4a46      	ldr	r2, [pc, #280]	; (8000848 <ConsoleProcess+0x158>)
 800072e:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000730:	4b45      	ldr	r3, [pc, #276]	; (8000848 <ConsoleProcess+0x158>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4619      	mov	r1, r3
 8000736:	4845      	ldr	r0, [pc, #276]	; (800084c <ConsoleProcess+0x15c>)
 8000738:	f7ff ff81 	bl	800063e <ConsoleCommandEndline>
 800073c:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2b00      	cmp	r3, #0
 8000742:	db7d      	blt.n	8000840 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 8000744:	f000 fcb8 	bl	80010b8 <ConsoleCommandsGetTable>
 8000748:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
 8000752:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000754:	e03d      	b.n	80007d2 <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 8000756:	697a      	ldr	r2, [r7, #20]
 8000758:	4613      	mov	r3, r2
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	4413      	add	r3, r2
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	461a      	mov	r2, r3
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	4413      	add	r3, r2
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4938      	ldr	r1, [pc, #224]	; (800084c <ConsoleProcess+0x15c>)
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff fee8 	bl	8000540 <ConsoleCommandMatch>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d02a      	beq.n	80007cc <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 8000776:	697a      	ldr	r2, [r7, #20]
 8000778:	4613      	mov	r3, r2
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	4413      	add	r3, r2
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	461a      	mov	r2, r3
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	4413      	add	r3, r2
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	4830      	ldr	r0, [pc, #192]	; (800084c <ConsoleProcess+0x15c>)
 800078a:	4798      	blx	r3
 800078c:	4603      	mov	r3, r0
 800078e:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d017      	beq.n	80007c6 <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 8000796:	482f      	ldr	r0, [pc, #188]	; (8000854 <ConsoleProcess+0x164>)
 8000798:	f000 fd16 	bl	80011c8 <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 800079c:	482b      	ldr	r0, [pc, #172]	; (800084c <ConsoleProcess+0x15c>)
 800079e:	f000 fd13 	bl	80011c8 <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 80007a2:	482d      	ldr	r0, [pc, #180]	; (8000858 <ConsoleProcess+0x168>)
 80007a4:	f000 fd10 	bl	80011c8 <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 80007a8:	697a      	ldr	r2, [r7, #20]
 80007aa:	4613      	mov	r3, r2
 80007ac:	00db      	lsls	r3, r3, #3
 80007ae:	4413      	add	r3, r2
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	461a      	mov	r2, r3
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	4413      	add	r3, r2
 80007b8:	3308      	adds	r3, #8
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fd04 	bl	80011c8 <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 80007c0:	4826      	ldr	r0, [pc, #152]	; (800085c <ConsoleProcess+0x16c>)
 80007c2:	f000 fd01 	bl	80011c8 <ConsoleIoSendString>

					}
					found = cmdIndex;
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	e002      	b.n	80007d2 <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	3301      	adds	r3, #1
 80007d0:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 80007d2:	697a      	ldr	r2, [r7, #20]
 80007d4:	4613      	mov	r3, r2
 80007d6:	00db      	lsls	r3, r3, #3
 80007d8:	4413      	add	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	461a      	mov	r2, r3
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	4413      	add	r3, r2
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d003      	beq.n	80007f0 <ConsoleProcess+0x100>
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007ee:	d0b2      	beq.n	8000756 <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d00d      	beq.n	8000812 <ConsoleProcess+0x122>
 80007f6:	693b      	ldr	r3, [r7, #16]
 80007f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007fc:	d109      	bne.n	8000812 <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <ConsoleProcess+0x158>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b02      	cmp	r3, #2
 8000804:	d905      	bls.n	8000812 <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 8000806:	4816      	ldr	r0, [pc, #88]	; (8000860 <ConsoleProcess+0x170>)
 8000808:	f000 fcde 	bl	80011c8 <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 800080c:	4813      	ldr	r0, [pc, #76]	; (800085c <ConsoleProcess+0x16c>)
 800080e:	f000 fcdb 	bl	80011c8 <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <ConsoleProcess+0x158>)
 8000814:	6819      	ldr	r1, [r3, #0]
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	3301      	adds	r3, #1
 800081a:	461a      	mov	r2, r3
 800081c:	480b      	ldr	r0, [pc, #44]	; (800084c <ConsoleProcess+0x15c>)
 800081e:	f7ff fedc 	bl	80005da <ConsoleResetBuffer>
 8000822:	4603      	mov	r3, r0
 8000824:	4a08      	ldr	r2, [pc, #32]	; (8000848 <ConsoleProcess+0x158>)
 8000826:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <ConsoleProcess+0x158>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	bf14      	ite	ne
 8000830:	2301      	movne	r3, #1
 8000832:	2300      	moveq	r3, #0
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <ConsoleProcess+0x160>)
 8000838:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 800083a:	480a      	ldr	r0, [pc, #40]	; (8000864 <ConsoleProcess+0x174>)
 800083c:	f000 fcc4 	bl	80011c8 <ConsoleIoSendString>
		}
	}
}
 8000840:	bf00      	nop
 8000842:	3718      	adds	r7, #24
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	2000017c 	.word	0x2000017c
 800084c:	2000007c 	.word	0x2000007c
 8000850:	20000180 	.word	0x20000180
 8000854:	080064e0 	.word	0x080064e0
 8000858:	080064e8 	.word	0x080064e8
 800085c:	080064d8 	.word	0x080064d8
 8000860:	080064f0 	.word	0x080064f0
 8000864:	080064dc 	.word	0x080064dc

08000868 <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8000868:	b480      	push	{r7}
 800086a:	b089      	sub	sp, #36	; 0x24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	460b      	mov	r3, r1
 8000872:	607a      	str	r2, [r7, #4]
 8000874:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 800087e:	2300      	movs	r3, #0
 8000880:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8000882:	e00b      	b.n	800089c <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 8000884:	68fa      	ldr	r2, [r7, #12]
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	4413      	add	r3, r2
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b20      	cmp	r3, #32
 800088e:	d102      	bne.n	8000896 <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	3301      	adds	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	3301      	adds	r3, #1
 800089a:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 800089c:	7afb      	ldrb	r3, [r7, #11]
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	429a      	cmp	r2, r3
 80008a2:	d002      	beq.n	80008aa <ConsoleParamFindN+0x42>
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	2bff      	cmp	r3, #255	; 0xff
 80008a8:	d9ec      	bls.n	8000884 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008b0:	d102      	bne.n	80008b8 <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 80008b2:	2310      	movs	r3, #16
 80008b4:	75fb      	strb	r3, [r7, #23]
 80008b6:	e002      	b.n	80008be <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	69fa      	ldr	r2, [r7, #28]
 80008bc:	601a      	str	r2, [r3, #0]
	}
	return result;
 80008be:	7dfb      	ldrb	r3, [r7, #23]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3724      	adds	r7, #36	; 0x24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	460b      	mov	r3, r1
 80008d6:	607a      	str	r2, [r7, #4]
 80008d8:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 80008de:	f107 021c 	add.w	r2, r7, #28
 80008e2:	7afb      	ldrb	r3, [r7, #11]
 80008e4:	4619      	mov	r1, r3
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f7ff ffbe 	bl	8000868 <ConsoleParamFindN>
 80008ec:	4603      	mov	r3, r0
 80008ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 80008f6:	69fa      	ldr	r2, [r7, #28]
 80008f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fa:	4413      	add	r3, r2
 80008fc:	68fa      	ldr	r2, [r7, #12]
 80008fe:	4413      	add	r3, r2
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000906:	e011      	b.n	800092c <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8000908:	f107 0214 	add.w	r2, r7, #20
 800090c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800090e:	4413      	add	r3, r2
 8000910:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000914:	701a      	strb	r2, [r3, #0]
		i++;
 8000916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000918:	3301      	adds	r3, #1
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 800091c:	69fa      	ldr	r2, [r7, #28]
 800091e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000920:	4413      	add	r3, r2
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	4413      	add	r3, r2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		&& ( i < INT16_MAX_STR_LENGTH ) )
 800092c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000930:	2b0a      	cmp	r3, #10
 8000932:	d00a      	beq.n	800094a <ConsoleReceiveParamInt16+0x7e>
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000934:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000938:	2b0d      	cmp	r3, #13
 800093a:	d006      	beq.n	800094a <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 800093c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000940:	2b20      	cmp	r3, #32
 8000942:	d002      	beq.n	800094a <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8000944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000946:	2b07      	cmp	r3, #7
 8000948:	d9de      	bls.n	8000908 <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 800094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094c:	2b08      	cmp	r3, #8
 800094e:	d102      	bne.n	8000956 <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000950:	2310      	movs	r3, #16
 8000952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8000956:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800095a:	2b00      	cmp	r3, #0
 800095c:	d10e      	bne.n	800097c <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 800095e:	f107 0214 	add.w	r2, r7, #20
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	4413      	add	r3, r2
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4618      	mov	r0, r3
 8000970:	f005 fcc6 	bl	8006300 <atoi>
 8000974:	4603      	mov	r3, r0
 8000976:	b21a      	sxth	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	801a      	strh	r2, [r3, #0]
	}
	return result;
 800097c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8000980:	4618      	mov	r0, r3
 8000982:	3728      	adds	r7, #40	; 0x28
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <ConsoleReceiveString>:
// ConsoleReceiveString
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveString(const char * buffer, const uint8_t parameterNumber, char* parameterString)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08e      	sub	sp, #56	; 0x38
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	460b      	mov	r3, r1
 8000992:	607a      	str	r2, [r7, #4]
 8000994:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t i;
	uint32_t j=0;
 800099a:	2300      	movs	r3, #0
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
	eCommandResult_T result;
	char charVal;
	char str[STRING_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 800099e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80009a2:	7afb      	ldrb	r3, [r7, #11]
 80009a4:	4619      	mov	r1, r3
 80009a6:	68f8      	ldr	r0, [r7, #12]
 80009a8:	f7ff ff5e 	bl	8000868 <ConsoleParamFindN>
 80009ac:	4603      	mov	r3, r0
 80009ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	i = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	637b      	str	r3, [r7, #52]	; 0x34
	charVal = buffer[startIndex + i];
 80009b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ba:	4413      	add	r3, r2
 80009bc:	68fa      	ldr	r2, [r7, #12]
 80009be:	4413      	add	r3, r2
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 80009c6:	e011      	b.n	80009ec <ConsoleReceiveString+0x64>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < STRING_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 80009c8:	f107 0214 	add.w	r2, r7, #20
 80009cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009ce:	4413      	add	r3, r2
 80009d0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80009d4:	701a      	strb	r2, [r3, #0]
		i++;
 80009d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009d8:	3301      	adds	r3, #1
 80009da:	637b      	str	r3, [r7, #52]	; 0x34
		charVal = buffer[startIndex + i];
 80009dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e0:	4413      	add	r3, r2
 80009e2:	68fa      	ldr	r2, [r7, #12]
 80009e4:	4413      	add	r3, r2
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		&& ( i < STRING_MAX_STR_LENGTH ) )
 80009ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80009f0:	2b0a      	cmp	r3, #10
 80009f2:	d00a      	beq.n	8000a0a <ConsoleReceiveString+0x82>
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 80009f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80009f8:	2b0d      	cmp	r3, #13
 80009fa:	d006      	beq.n	8000a0a <ConsoleReceiveString+0x82>
			&& ( PARAMETER_SEPARATER != charVal )
 80009fc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000a00:	2b20      	cmp	r3, #32
 8000a02:	d002      	beq.n	8000a0a <ConsoleReceiveString+0x82>
		&& ( i < STRING_MAX_STR_LENGTH ) )
 8000a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a06:	2b13      	cmp	r3, #19
 8000a08:	d9de      	bls.n	80009c8 <ConsoleReceiveString+0x40>
	}
	if ( i == STRING_MAX_STR_LENGTH)
 8000a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a0c:	2b14      	cmp	r3, #20
 8000a0e:	d102      	bne.n	8000a16 <ConsoleReceiveString+0x8e>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000a10:	2310      	movs	r3, #16
 8000a12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
	if ( COMMAND_SUCCESS == result )
 8000a16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d11e      	bne.n	8000a5c <ConsoleReceiveString+0xd4>
	{
		str[i] = NULL_CHAR;
 8000a1e:	f107 0214 	add.w	r2, r7, #20
 8000a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a24:	4413      	add	r3, r2
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
		while(str[j] != NULL_CHAR)
 8000a2a:	e00b      	b.n	8000a44 <ConsoleReceiveString+0xbc>
		{
			parameterString[j] = str[j];
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a30:	4413      	add	r3, r2
 8000a32:	f107 0114 	add.w	r1, r7, #20
 8000a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a38:	440a      	add	r2, r1
 8000a3a:	7812      	ldrb	r2, [r2, #0]
 8000a3c:	701a      	strb	r2, [r3, #0]
			j++;
 8000a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a40:	3301      	adds	r3, #1
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
		while(str[j] != NULL_CHAR)
 8000a44:	f107 0214 	add.w	r2, r7, #20
 8000a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a4a:	4413      	add	r3, r2
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d1ec      	bne.n	8000a2c <ConsoleReceiveString+0xa4>
		}
		parameterString[j] = NULL_CHAR;
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a56:	4413      	add	r3, r2
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8000a5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3738      	adds	r7, #56	; 0x38
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	460b      	mov	r3, r1
 8000a72:	607a      	str	r2, [r7, #4]
 8000a74:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000a7e:	f107 0218 	add.w	r2, r7, #24
 8000a82:	7afb      	ldrb	r3, [r7, #11]
 8000a84:	4619      	mov	r1, r3
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f7ff feee 	bl	8000868 <ConsoleParamFindN>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000a90:	7ffb      	ldrb	r3, [r7, #31]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d12c      	bne.n	8000af0 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
 8000a9a:	e01e      	b.n	8000ada <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000a9c:	7ffb      	ldrb	r3, [r7, #31]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10d      	bne.n	8000abe <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000aa2:	69ba      	ldr	r2, [r7, #24]
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	4413      	add	r3, r2
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	f107 0217 	add.w	r2, r7, #23
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 f8c5 	bl	8000c44 <ConsoleUtilHexCharToInt>
 8000aba:	4603      	mov	r3, r0
 8000abc:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000abe:	7ffb      	ldrb	r3, [r7, #31]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d107      	bne.n	8000ad4 <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000ac4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ac6:	011b      	lsls	r3, r3, #4
 8000ac8:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000aca:	7dfb      	ldrb	r3, [r7, #23]
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ad0:	4413      	add	r3, r2
 8000ad2:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000ad4:	6a3b      	ldr	r3, [r7, #32]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	623b      	str	r3, [r7, #32]
 8000ada:	6a3b      	ldr	r3, [r7, #32]
 8000adc:	2b03      	cmp	r3, #3
 8000ade:	d9dd      	bls.n	8000a9c <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000ae0:	7ffb      	ldrb	r3, [r7, #31]
 8000ae2:	2b11      	cmp	r3, #17
 8000ae4:	d101      	bne.n	8000aea <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000aee:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000af0:	7ffb      	ldrb	r3, [r7, #31]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3728      	adds	r7, #40	; 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000b04:	2300      	movs	r3, #0
 8000b06:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	e01b      	b.n	8000b46 <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000b0e:	7cfb      	ldrb	r3, [r7, #19]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d115      	bne.n	8000b40 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000b14:	88fa      	ldrh	r2, [r7, #6]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	f1c3 0303 	rsb	r3, r3, #3
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	fa42 f303 	asr.w	r3, r2, r3
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	f003 030f 	and.w	r3, r3, #15
 8000b28:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000b2a:	f107 020c 	add.w	r2, r7, #12
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	441a      	add	r2, r3
 8000b32:	7cbb      	ldrb	r3, [r7, #18]
 8000b34:	4611      	mov	r1, r2
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f8c5 	bl	8000cc6 <ConsoleUtilsIntToHexChar>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	3301      	adds	r3, #1
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	d9e0      	bls.n	8000b0e <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000b4c:	f107 020c 	add.w	r2, r7, #12
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	4413      	add	r3, r2
 8000b54:	2200      	movs	r2, #0
 8000b56:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000b58:	f107 030c 	add.w	r3, r7, #12
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 fb33 	bl	80011c8 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	da07      	bge.n	8000b96 <smallItoa+0x2a>
		isNegative = true;
 8000b86:	2301      	movs	r3, #1
 8000b88:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	425b      	negs	r3, r3
 8000b8e:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	3301      	adds	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000b9a:	e007      	b.n	8000bac <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ba4:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1f1      	bne.n	8000b9c <smallItoa+0x30>
	}
    
    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	fb93 f2f2 	sdiv	r2, r3, r2
 8000bd4:	6879      	ldr	r1, [r7, #4]
 8000bd6:	fb01 f202 	mul.w	r2, r1, r2
 8000bda:	1a9b      	subs	r3, r3, r2
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	68b9      	ldr	r1, [r7, #8]
 8000be2:	440b      	add	r3, r1
 8000be4:	3230      	adds	r2, #48	; 0x30
 8000be6:	b2d2      	uxtb	r2, r2
 8000be8:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bf2:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	1e5a      	subs	r2, r3, #1
 8000bf8:	617a      	str	r2, [r7, #20]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1e6      	bne.n	8000bcc <smallItoa+0x60>

	if (isNegative) {
 8000bfe:	7ffb      	ldrb	r3, [r7, #31]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d002      	beq.n	8000c0a <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	222d      	movs	r2, #45	; 0x2d
 8000c08:	701a      	strb	r2, [r3, #0]
	}
}
 8000c0a:	bf00      	nop
 8000c0c:	3724      	adds	r7, #36	; 0x24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b084      	sub	sp, #16
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000c20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c24:	f107 0108 	add.w	r1, r7, #8
 8000c28:	220a      	movs	r2, #10
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f7ff ff9e 	bl	8000b6c <smallItoa>
	ConsoleIoSendString(out);
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 fac7 	bl	80011c8 <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000c50:	2300      	movs	r3, #0
 8000c52:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b2f      	cmp	r3, #47	; 0x2f
 8000c58:	d908      	bls.n	8000c6c <ConsoleUtilHexCharToInt+0x28>
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	2b39      	cmp	r3, #57	; 0x39
 8000c5e:	d805      	bhi.n	8000c6c <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	3b30      	subs	r3, #48	; 0x30
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	701a      	strb	r2, [r3, #0]
 8000c6a:	e025      	b.n	8000cb8 <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	2b40      	cmp	r3, #64	; 0x40
 8000c70:	d908      	bls.n	8000c84 <ConsoleUtilHexCharToInt+0x40>
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	2b46      	cmp	r3, #70	; 0x46
 8000c76:	d805      	bhi.n	8000c84 <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	3b37      	subs	r3, #55	; 0x37
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	701a      	strb	r2, [r3, #0]
 8000c82:	e019      	b.n	8000cb8 <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	2b60      	cmp	r3, #96	; 0x60
 8000c88:	d908      	bls.n	8000c9c <ConsoleUtilHexCharToInt+0x58>
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b66      	cmp	r3, #102	; 0x66
 8000c8e:	d805      	bhi.n	8000c9c <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000c90:	79fb      	ldrb	r3, [r7, #7]
 8000c92:	3b57      	subs	r3, #87	; 0x57
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	e00d      	b.n	8000cb8 <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	2b0a      	cmp	r3, #10
 8000ca0:	d105      	bne.n	8000cae <ConsoleUtilHexCharToInt+0x6a>
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b0d      	cmp	r3, #13
 8000ca6:	d102      	bne.n	8000cae <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b20      	cmp	r3, #32
 8000cac:	d102      	bne.n	8000cb4 <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000cae:	2311      	movs	r3, #17
 8000cb0:	73fb      	strb	r3, [r7, #15]
 8000cb2:	e001      	b.n	8000cb8 <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b085      	sub	sp, #20
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	6039      	str	r1, [r7, #0]
 8000cd0:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b09      	cmp	r3, #9
 8000cda:	d805      	bhi.n	8000ce8 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	3330      	adds	r3, #48	; 0x30
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	701a      	strb	r2, [r3, #0]
 8000ce6:	e00d      	b.n	8000d04 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	2b09      	cmp	r3, #9
 8000cec:	d908      	bls.n	8000d00 <ConsoleUtilsIntToHexChar+0x3a>
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b0f      	cmp	r3, #15
 8000cf2:	d805      	bhi.n	8000d00 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	3337      	adds	r3, #55	; 0x37
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	701a      	strb	r2, [r3, #0]
 8000cfe:	e001      	b.n	8000d04 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000d00:	2310      	movs	r3, #16
 8000d02:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <ConsoleCommandComment>:
	{"buts",&ConsoleCommandButtonState, HELP("Prints the present state of the Blue user button")},
	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8000d30:	2300      	movs	r3, #0
 8000d32:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8000d34:	230e      	movs	r3, #14
 8000d36:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	e01e      	b.n	8000d7c <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 8000d3e:	4914      	ldr	r1, [pc, #80]	; (8000d90 <ConsoleCommandHelp+0x68>)
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	4613      	mov	r3, r2
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	4413      	add	r3, r2
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	440b      	add	r3, r1
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 fa3a 	bl	80011c8 <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8000d54:	480f      	ldr	r0, [pc, #60]	; (8000d94 <ConsoleCommandHelp+0x6c>)
 8000d56:	f000 fa37 	bl	80011c8 <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	4413      	add	r3, r2
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	3308      	adds	r3, #8
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <ConsoleCommandHelp+0x68>)
 8000d68:	4413      	add	r3, r2
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 fa2c 	bl	80011c8 <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 8000d70:	4809      	ldr	r0, [pc, #36]	; (8000d98 <ConsoleCommandHelp+0x70>)
 8000d72:	f000 fa29 	bl	80011c8 <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d3db      	bcc.n	8000d3e <ConsoleCommandHelp+0x16>
	}
	return result;
 8000d86:	7cfb      	ldrb	r3, [r7, #19]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	080066bc 	.word	0x080066bc
 8000d94:	08006550 	.word	0x08006550
 8000d98:	08006554 	.word	0x08006554

08000d9c <ConsoleCommandParamExampleInt16>:

static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	461a      	mov	r2, r3
 8000daa:	2101      	movs	r1, #1
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f7ff fd8d 	bl	80008cc <ConsoleReceiveParamInt16>
 8000db2:	4603      	mov	r3, r0
 8000db4:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d116      	bne.n	8000dea <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <ConsoleCommandParamExampleInt16+0x58>)
 8000dbe:	f000 fa03 	bl	80011c8 <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 8000dc2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff25 	bl	8000c16 <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 8000dcc:	480a      	ldr	r0, [pc, #40]	; (8000df8 <ConsoleCommandParamExampleInt16+0x5c>)
 8000dce:	f000 f9fb 	bl	80011c8 <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8000dd2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fe8e 	bl	8000afa <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 8000dde:	4807      	ldr	r0, [pc, #28]	; (8000dfc <ConsoleCommandParamExampleInt16+0x60>)
 8000de0:	f000 f9f2 	bl	80011c8 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000de4:	4806      	ldr	r0, [pc, #24]	; (8000e00 <ConsoleCommandParamExampleInt16+0x64>)
 8000de6:	f000 f9ef 	bl	80011c8 <ConsoleIoSendString>
	}
	return result;
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	08006558 	.word	0x08006558
 8000df8:	08006568 	.word	0x08006568
 8000dfc:	08006570 	.word	0x08006570
 8000e00:	08006554 	.word	0x08006554

08000e04 <ConsoleCommandSetWave>:

static eCommandResult_T ConsoleCommandSetWave(const char buffer[])
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result;
	char wave_str[WAVE_MAX_STR_LENGTH];
	result = ConsoleReceiveString(buffer, 1, wave_str);
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	461a      	mov	r2, r3
 8000e12:	2101      	movs	r1, #1
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff fdb7 	bl	8000988 <ConsoleReceiveString>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	75fb      	strb	r3, [r7, #23]
	if (strcmp(wave_str,"sine")==0)
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	491d      	ldr	r1, [pc, #116]	; (8000e98 <ConsoleCommandSetWave+0x94>)
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff f9fb 	bl	8000220 <strcmp>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d103      	bne.n	8000e38 <ConsoleCommandSetWave+0x34>
	{
		Wave = SINE;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <ConsoleCommandSetWave+0x98>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
 8000e36:	e01b      	b.n	8000e70 <ConsoleCommandSetWave+0x6c>
	}
	else if (strcmp(wave_str,"square")==0)
 8000e38:	f107 0308 	add.w	r3, r7, #8
 8000e3c:	4918      	ldr	r1, [pc, #96]	; (8000ea0 <ConsoleCommandSetWave+0x9c>)
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff f9ee 	bl	8000220 <strcmp>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d103      	bne.n	8000e52 <ConsoleCommandSetWave+0x4e>
	{
		Wave = SQUARE;
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <ConsoleCommandSetWave+0x98>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	e00e      	b.n	8000e70 <ConsoleCommandSetWave+0x6c>
	}
	else if (strcmp(wave_str,"sawtooth")==0)
 8000e52:	f107 0308 	add.w	r3, r7, #8
 8000e56:	4913      	ldr	r1, [pc, #76]	; (8000ea4 <ConsoleCommandSetWave+0xa0>)
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff f9e1 	bl	8000220 <strcmp>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d103      	bne.n	8000e6c <ConsoleCommandSetWave+0x68>
	{
		Wave = SAWTOOTH;
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <ConsoleCommandSetWave+0x98>)
 8000e66:	2202      	movs	r2, #2
 8000e68:	701a      	strb	r2, [r3, #0]
 8000e6a:	e001      	b.n	8000e70 <ConsoleCommandSetWave+0x6c>
	}
	else
	{
		result = COMMAND_ERROR;
 8000e6c:	23ff      	movs	r3, #255	; 0xff
 8000e6e:	75fb      	strb	r3, [r7, #23]
	}
	if ( COMMAND_SUCCESS == result )
 8000e70:	7dfb      	ldrb	r3, [r7, #23]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10a      	bne.n	8000e8c <ConsoleCommandSetWave+0x88>
	{
		ConsoleIoSendString("wave is ");
 8000e76:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <ConsoleCommandSetWave+0xa4>)
 8000e78:	f000 f9a6 	bl	80011c8 <ConsoleIoSendString>
		ConsoleIoSendString(wave_str);
 8000e7c:	f107 0308 	add.w	r3, r7, #8
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 f9a1 	bl	80011c8 <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8000e86:	4809      	ldr	r0, [pc, #36]	; (8000eac <ConsoleCommandSetWave+0xa8>)
 8000e88:	f000 f99e 	bl	80011c8 <ConsoleIoSendString>
	}
	return result;
 8000e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	08006574 	.word	0x08006574
 8000e9c:	2000092e 	.word	0x2000092e
 8000ea0:	0800657c 	.word	0x0800657c
 8000ea4:	08006584 	.word	0x08006584
 8000ea8:	08006590 	.word	0x08006590
 8000eac:	08006554 	.word	0x08006554

08000eb0 <ConsoleCommandSetFrequency>:

static eCommandResult_T ConsoleCommandSetFrequency(const char buffer[])
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	int16_t frequencyInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &frequencyInt);
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff fd03 	bl	80008cc <ConsoleReceiveParamInt16>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d10a      	bne.n	8000ee6 <ConsoleCommandSetFrequency+0x36>
	{
		ConsoleIoSendString("Frequency is ");
 8000ed0:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <ConsoleCommandSetFrequency+0x40>)
 8000ed2:	f000 f979 	bl	80011c8 <ConsoleIoSendString>
		ConsoleSendParamInt16(frequencyInt);
 8000ed6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fe9b 	bl	8000c16 <ConsoleSendParamInt16>
		ConsoleIoSendString(STR_ENDLINE);
 8000ee0:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <ConsoleCommandSetFrequency+0x44>)
 8000ee2:	f000 f971 	bl	80011c8 <ConsoleIoSendString>
	}
	return result;
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	0800659c 	.word	0x0800659c
 8000ef4:	08006554 	.word	0x08006554

08000ef8 <ConsoleCommandSetAmplitude>:

static eCommandResult_T ConsoleCommandSetAmplitude(const char buffer[])
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	int16_t amplitudeInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &amplitudeInt);
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	461a      	mov	r2, r3
 8000f06:	2101      	movs	r1, #1
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff fcdf 	bl	80008cc <ConsoleReceiveParamInt16>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10a      	bne.n	8000f2e <ConsoleCommandSetAmplitude+0x36>
	{
		ConsoleIoSendString("Amplitude is ");
 8000f18:	4807      	ldr	r0, [pc, #28]	; (8000f38 <ConsoleCommandSetAmplitude+0x40>)
 8000f1a:	f000 f955 	bl	80011c8 <ConsoleIoSendString>
		ConsoleSendParamInt16(amplitudeInt);
 8000f1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fe77 	bl	8000c16 <ConsoleSendParamInt16>
		ConsoleIoSendString(STR_ENDLINE);
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <ConsoleCommandSetAmplitude+0x44>)
 8000f2a:	f000 f94d 	bl	80011c8 <ConsoleIoSendString>
	}
	return result;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	080065ac 	.word	0x080065ac
 8000f3c:	08006554 	.word	0x08006554

08000f40 <ConsoleCommandParamExampleHexUint16>:
static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	2101      	movs	r1, #1
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff fd89 	bl	8000a68 <ConsoleReceiveParamHexUint16>
 8000f56:	4603      	mov	r3, r0
 8000f58:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d114      	bne.n	8000f8a <ConsoleCommandParamExampleHexUint16+0x4a>
	{
		ConsoleIoSendString("Parameter is 0x");
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <ConsoleCommandParamExampleHexUint16+0x54>)
 8000f62:	f000 f931 	bl	80011c8 <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 8000f66:	89bb      	ldrh	r3, [r7, #12]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fdc6 	bl	8000afa <ConsoleSendParamHexUint16>

		ConsoleIoSendString(" (");
 8000f6e:	480a      	ldr	r0, [pc, #40]	; (8000f98 <ConsoleCommandParamExampleHexUint16+0x58>)
 8000f70:	f000 f92a 	bl	80011c8 <ConsoleIoSendString>
		ConsoleSendParamInt16((int16_t)parameterUint16);
 8000f74:	89bb      	ldrh	r3, [r7, #12]
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fe4c 	bl	8000c16 <ConsoleSendParamInt16>
		ConsoleIoSendString(")");
 8000f7e:	4807      	ldr	r0, [pc, #28]	; (8000f9c <ConsoleCommandParamExampleHexUint16+0x5c>)
 8000f80:	f000 f922 	bl	80011c8 <ConsoleIoSendString>

		ConsoleIoSendString(STR_ENDLINE);
 8000f84:	4806      	ldr	r0, [pc, #24]	; (8000fa0 <ConsoleCommandParamExampleHexUint16+0x60>)
 8000f86:	f000 f91f 	bl	80011c8 <ConsoleIoSendString>
	}
	return result;
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	080065bc 	.word	0x080065bc
 8000f98:	080065cc 	.word	0x080065cc
 8000f9c:	08006570 	.word	0x08006570
 8000fa0:	08006554 	.word	0x08006554

08000fa4 <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000fac:	2300      	movs	r3, #0
 8000fae:	73fb      	strb	r3, [r7, #15]
    IGNORE_UNUSED_VARIABLE(buffer);
	ConsoleIoSendString(VERSION_STRING);
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <ConsoleCommandVer+0x24>)
 8000fb2:	f000 f909 	bl	80011c8 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <ConsoleCommandVer+0x28>)
 8000fb8:	f000 f906 	bl	80011c8 <ConsoleIoSendString>
	return result;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	080065d0 	.word	0x080065d0
 8000fcc:	08006554 	.word	0x08006554

08000fd0 <ConsoleCommandReadAccelX>:

static eCommandResult_T ConsoleCommandReadAccelX(const char buffer[])
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	73fb      	strb	r3, [r7, #15]
	IGNORE_UNUSED_VARIABLE(buffer);
	ConsoleIoSendString("x = 1");
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <ConsoleCommandReadAccelX+0x24>)
 8000fde:	f000 f8f3 	bl	80011c8 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <ConsoleCommandReadAccelX+0x28>)
 8000fe4:	f000 f8f0 	bl	80011c8 <ConsoleIoSendString>
	return result;
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	080065e8 	.word	0x080065e8
 8000ff8:	08006554 	.word	0x08006554

08000ffc <ConsoleCommandReadAccelY>:

static eCommandResult_T ConsoleCommandReadAccelY(const char buffer[])
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]
	IGNORE_UNUSED_VARIABLE(buffer);
	ConsoleIoSendString("y = 2");
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <ConsoleCommandReadAccelY+0x24>)
 800100a:	f000 f8dd 	bl	80011c8 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <ConsoleCommandReadAccelY+0x28>)
 8001010:	f000 f8da 	bl	80011c8 <ConsoleIoSendString>
	return result;
 8001014:	7bfb      	ldrb	r3, [r7, #15]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	080065f0 	.word	0x080065f0
 8001024:	08006554 	.word	0x08006554

08001028 <ConsoleCommandReadAccelZ>:

static eCommandResult_T ConsoleCommandReadAccelZ(const char buffer[])
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
	IGNORE_UNUSED_VARIABLE(buffer);
	ConsoleIoSendString("z = 3 ");
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <ConsoleCommandReadAccelZ+0x24>)
 8001036:	f000 f8c7 	bl	80011c8 <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <ConsoleCommandReadAccelZ+0x28>)
 800103c:	f000 f8c4 	bl	80011c8 <ConsoleIoSendString>
	return result;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	080065f8 	.word	0x080065f8
 8001050:	08006554 	.word	0x08006554

08001054 <ConsoleCommandLedsRose>:

static eCommandResult_T ConsoleCommandLedsRose(const char buffer[])
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
	IGNORE_UNUSED_VARIABLE(buffer);
	ConsoleIoSendString("LEDs should light in a circular pattern and then extinguish the same way ");
 8001060:	4806      	ldr	r0, [pc, #24]	; (800107c <ConsoleCommandLedsRose+0x28>)
 8001062:	f000 f8b1 	bl	80011c8 <ConsoleIoSendString>
	//LedRoseSet();
	HAL_Delay(50);
 8001066:	2032      	movs	r0, #50	; 0x32
 8001068:	f000 fe9e 	bl	8001da8 <HAL_Delay>
	//LedRoseToggle();
	ConsoleIoSendString(STR_ENDLINE);
 800106c:	4804      	ldr	r0, [pc, #16]	; (8001080 <ConsoleCommandLedsRose+0x2c>)
 800106e:	f000 f8ab 	bl	80011c8 <ConsoleIoSendString>
	return result;
 8001072:	7bfb      	ldrb	r3, [r7, #15]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	08006600 	.word	0x08006600
 8001080:	08006554 	.word	0x08006554

08001084 <ConsoleCommandButtonState>:


static eCommandResult_T ConsoleCommandButtonState(const char buffer[])
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]
	IGNORE_UNUSED_VARIABLE(buffer);
	ConsoleIoSendString("the present state of the Blue user button is: ");
 8001090:	4806      	ldr	r0, [pc, #24]	; (80010ac <ConsoleCommandButtonState+0x28>)
 8001092:	f000 f899 	bl	80011c8 <ConsoleIoSendString>
	if (1) {
		ConsoleIoSendString("DOWN, Depressed ");
 8001096:	4806      	ldr	r0, [pc, #24]	; (80010b0 <ConsoleCommandButtonState+0x2c>)
 8001098:	f000 f896 	bl	80011c8 <ConsoleIoSendString>
	}
	else {
		ConsoleIoSendString("UP, Unpressed ");
	}
	ConsoleIoSendString(STR_ENDLINE);
 800109c:	4805      	ldr	r0, [pc, #20]	; (80010b4 <ConsoleCommandButtonState+0x30>)
 800109e:	f000 f893 	bl	80011c8 <ConsoleIoSendString>
	return result;
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	0800664c 	.word	0x0800664c
 80010b0:	0800667c 	.word	0x0800667c
 80010b4:	08006554 	.word	0x08006554

080010b8 <ConsoleCommandsGetTable>:

const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 80010bc:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <ConsoleCommandsGetTable+0x10>)
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	080066bc 	.word	0x080066bc

080010cc <ConsoleIoInit>:
        return EOF;
}*/


eConsoleError ConsoleIoInit(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &ch, 1); // initiate reception
 80010d0:	2201      	movs	r2, #1
 80010d2:	4903      	ldr	r1, [pc, #12]	; (80010e0 <ConsoleIoInit+0x14>)
 80010d4:	4803      	ldr	r0, [pc, #12]	; (80010e4 <ConsoleIoInit+0x18>)
 80010d6:	f003 fbde 	bl	8004896 <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	20000181 	.word	0x20000181
 80010e4:	20000398 	.word	0x20000398

080010e8 <HAL_UART_RxCpltCallback>:

/* This RX interrupt gets triggered once x number of bytes are recieved*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

	//HAL_UART_Transmit_IT(&huart3,&ch,1); // echo

    //TODO: handle cases of buffer overflow gracefully
	rx_bufferio[rx_counter++] = ch; // load each character to buffer
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_UART_RxCpltCallback+0x48>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	1c5a      	adds	r2, r3, #1
 80010f6:	b2d1      	uxtb	r1, r2
 80010f8:	4a0d      	ldr	r2, [pc, #52]	; (8001130 <HAL_UART_RxCpltCallback+0x48>)
 80010fa:	7011      	strb	r1, [r2, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_UART_RxCpltCallback+0x4c>)
 8001100:	7819      	ldrb	r1, [r3, #0]
 8001102:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <HAL_UART_RxCpltCallback+0x50>)
 8001104:	5499      	strb	r1, [r3, r2]
    if(ch == '\r' || ch == '\n')
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <HAL_UART_RxCpltCallback+0x4c>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b0d      	cmp	r3, #13
 800110c:	d003      	beq.n	8001116 <HAL_UART_RxCpltCallback+0x2e>
 800110e:	4b09      	ldr	r3, [pc, #36]	; (8001134 <HAL_UART_RxCpltCallback+0x4c>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b0a      	cmp	r3, #10
 8001114:	d102      	bne.n	800111c <HAL_UART_RxCpltCallback+0x34>
        buffer_ready = 1; // if a new-line character or a carriage return character is received, set the relevant flag
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_UART_RxCpltCallback+0x54>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]

    HAL_UART_Receive_IT(huart, &ch, 1); // continue receiving character(s)
 800111c:	2201      	movs	r2, #1
 800111e:	4905      	ldr	r1, [pc, #20]	; (8001134 <HAL_UART_RxCpltCallback+0x4c>)
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f003 fbb8 	bl	8004896 <HAL_UART_Receive_IT>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000284 	.word	0x20000284
 8001134:	20000181 	.word	0x20000181
 8001138:	20000184 	.word	0x20000184
 800113c:	20000285 	.word	0x20000285

08001140 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	uart_tx_complete =1;
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <HAL_UART_TxCpltCallback+0x1c>)
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000000 	.word	0x20000000

08001160 <ConsoleIoReceive>:

//this is where the main edits went to make this code portable to STM32:
eConsoleError ConsoleIoReceive(uint8_t* buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
    if(buffer_ready) { // if a complete command is received
 800116c:	4b13      	ldr	r3, [pc, #76]	; (80011bc <ConsoleIoReceive+0x5c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d018      	beq.n	80011a6 <ConsoleIoReceive+0x46>
        buffer_ready = 0; // unset flag
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <ConsoleIoReceive+0x5c>)
 8001176:	2200      	movs	r2, #0
 8001178:	701a      	strb	r2, [r3, #0]
        memcpy(buffer,rx_bufferio,rx_counter); // copy the received command to library buffer
 800117a:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <ConsoleIoReceive+0x60>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	461a      	mov	r2, r3
 8001180:	4910      	ldr	r1, [pc, #64]	; (80011c4 <ConsoleIoReceive+0x64>)
 8001182:	68f8      	ldr	r0, [r7, #12]
 8001184:	f005 f97e 	bl	8006484 <memcpy>
        *readLength = rx_counter; // set appropriate length
 8001188:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <ConsoleIoReceive+0x60>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	601a      	str	r2, [r3, #0]

        memset(rx_bufferio,0,256); // clear receive buffer
 8001192:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001196:	2100      	movs	r1, #0
 8001198:	480a      	ldr	r0, [pc, #40]	; (80011c4 <ConsoleIoReceive+0x64>)
 800119a:	f005 f941 	bl	8006420 <memset>
        rx_counter = 0; // clear pointer so we can start from the beginning next time around
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <ConsoleIoReceive+0x60>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
 80011a4:	e005      	b.n	80011b2 <ConsoleIoReceive+0x52>
    } else {
        buffer[0] = '\n'; // if no command is received, send the '>'
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	220a      	movs	r2, #10
 80011aa:	701a      	strb	r2, [r3, #0]
        *readLength = 0;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
    }

    return CONSOLE_SUCCESS;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000285 	.word	0x20000285
 80011c0:	20000284 	.word	0x20000284
 80011c4:	20000184 	.word	0x20000184

080011c8 <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(buffer);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff f82f 	bl	8000234 <strlen>
 80011d6:	4603      	mov	r3, r0
 80011d8:	73fb      	strb	r3, [r7, #15]
	//uart_tx_complete = 0;
	//HAL_UART_Transmit_IT(&huart3, (uint8_t*)buffer, len);
	HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len,10000);
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	b29a      	uxth	r2, r3
 80011de:	f242 7310 	movw	r3, #10000	; 0x2710
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	4803      	ldr	r0, [pc, #12]	; (80011f4 <ConsoleIoSendString+0x2c>)
 80011e6:	f003 fad3 	bl	8004790 <HAL_UART_Transmit>
	//while (uart_tx_complete==0);
	return CONSOLE_SUCCESS;
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000398 	.word	0x20000398

080011f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011fc:	f000 fd77 	bl	8001cee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001200:	f000 f866 	bl	80012d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001204:	f000 f9e2 	bl	80015cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001208:	f000 f980 	bl	800150c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800120c:	f000 f9ae 	bl	800156c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM13_Init();
 8001210:	f000 f958 	bl	80014c4 <MX_TIM13_Init>
  MX_DAC_Init();
 8001214:	f000 f8ca 	bl	80013ac <MX_DAC_Init>
  MX_TIM11_Init();
 8001218:	f000 f930 	bl	800147c <MX_TIM11_Init>
  MX_SPI1_Init();
 800121c:	f000 f8f0 	bl	8001400 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // Start timer
  HAL_TIM_Base_Start_IT(&htim13);
 8001220:	4824      	ldr	r0, [pc, #144]	; (80012b4 <main+0xbc>)
 8001222:	f002 ffe9 	bl	80041f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8001226:	4824      	ldr	r0, [pc, #144]	; (80012b8 <main+0xc0>)
 8001228:	f002 ffe6 	bl	80041f8 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800122c:	2100      	movs	r1, #0
 800122e:	4823      	ldr	r0, [pc, #140]	; (80012bc <main+0xc4>)
 8001230:	f000 ff11 	bl	8002056 <HAL_DAC_Start>

  HAL_UART_Transmit(&huart3, "Main function\n\r" , strlen("Main function\n\r"),1000);
 8001234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001238:	220f      	movs	r2, #15
 800123a:	4921      	ldr	r1, [pc, #132]	; (80012c0 <main+0xc8>)
 800123c:	4821      	ldr	r0, [pc, #132]	; (80012c4 <main+0xcc>)
 800123e:	f003 faa7 	bl	8004790 <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ConsoleInit();
 8001242:	f7ff fa27 	bl	8000694 <ConsoleInit>
  while (1)
  {
	  ConsoleProcess();
 8001246:	f7ff fa53 	bl	80006f0 <ConsoleProcess>
	  if(BlinkSpeed == 0)
 800124a:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <main+0xd0>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10a      	bne.n	8001268 <main+0x70>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8001252:	2201      	movs	r2, #1
 8001254:	2101      	movs	r1, #1
 8001256:	481d      	ldr	r0, [pc, #116]	; (80012cc <main+0xd4>)
 8001258:	f001 f9e4 	bl	8002624 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2180      	movs	r1, #128	; 0x80
 8001260:	481a      	ldr	r0, [pc, #104]	; (80012cc <main+0xd4>)
 8001262:	f001 f9df 	bl	8002624 <HAL_GPIO_WritePin>
 8001266:	e01c      	b.n	80012a2 <main+0xaa>

	  }
	  else if(BlinkSpeed == 1)
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <main+0xd0>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d10a      	bne.n	8001286 <main+0x8e>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2101      	movs	r1, #1
 8001274:	4815      	ldr	r0, [pc, #84]	; (80012cc <main+0xd4>)
 8001276:	f001 f9d5 	bl	8002624 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 800127a:	2201      	movs	r2, #1
 800127c:	2180      	movs	r1, #128	; 0x80
 800127e:	4813      	ldr	r0, [pc, #76]	; (80012cc <main+0xd4>)
 8001280:	f001 f9d0 	bl	8002624 <HAL_GPIO_WritePin>
 8001284:	e00d      	b.n	80012a2 <main+0xaa>

	  }
	  else if(BlinkSpeed == 2)
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <main+0xd0>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d109      	bne.n	80012a2 <main+0xaa>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2101      	movs	r1, #1
 8001292:	480e      	ldr	r0, [pc, #56]	; (80012cc <main+0xd4>)
 8001294:	f001 f9c6 	bl	8002624 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8001298:	2200      	movs	r2, #0
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	480b      	ldr	r0, [pc, #44]	; (80012cc <main+0xd4>)
 800129e:	f001 f9c1 	bl	8002624 <HAL_GPIO_WritePin>
	  }
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //red
 80012a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012a6:	4809      	ldr	r0, [pc, #36]	; (80012cc <main+0xd4>)
 80012a8:	f001 f9d5 	bl	8002656 <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 80012ac:	2032      	movs	r0, #50	; 0x32
 80012ae:	f000 fd7b 	bl	8001da8 <HAL_Delay>
	  ConsoleProcess();
 80012b2:	e7c8      	b.n	8001246 <main+0x4e>
 80012b4:	2000034c 	.word	0x2000034c
 80012b8:	20000300 	.word	0x20000300
 80012bc:	20000288 	.word	0x20000288
 80012c0:	08006690 	.word	0x08006690
 80012c4:	20000398 	.word	0x20000398
 80012c8:	20000928 	.word	0x20000928
 80012cc:	40020400 	.word	0x40020400

080012d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b094      	sub	sp, #80	; 0x50
 80012d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d6:	f107 0320 	add.w	r3, r7, #32
 80012da:	2230      	movs	r2, #48	; 0x30
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f005 f89e 	bl	8006420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80012f4:	f001 fb12 	bl	800291c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f8:	4b2a      	ldr	r3, [pc, #168]	; (80013a4 <SystemClock_Config+0xd4>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	4a29      	ldr	r2, [pc, #164]	; (80013a4 <SystemClock_Config+0xd4>)
 80012fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001302:	6413      	str	r3, [r2, #64]	; 0x40
 8001304:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <SystemClock_Config+0xd4>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001310:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <SystemClock_Config+0xd8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a24      	ldr	r2, [pc, #144]	; (80013a8 <SystemClock_Config+0xd8>)
 8001316:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <SystemClock_Config+0xd8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001328:	2301      	movs	r3, #1
 800132a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800132c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001332:	2302      	movs	r3, #2
 8001334:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001336:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800133a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800133c:	2304      	movs	r3, #4
 800133e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001340:	23d8      	movs	r3, #216	; 0xd8
 8001342:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001344:	2302      	movs	r3, #2
 8001346:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001348:	2309      	movs	r3, #9
 800134a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134c:	f107 0320 	add.w	r3, r7, #32
 8001350:	4618      	mov	r0, r3
 8001352:	f001 fb43 	bl	80029dc <HAL_RCC_OscConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800135c:	f000 fa72 	bl	8001844 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001360:	f001 faec 	bl	800293c <HAL_PWREx_EnableOverDrive>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800136a:	f000 fa6b 	bl	8001844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136e:	230f      	movs	r3, #15
 8001370:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001372:	2302      	movs	r3, #2
 8001374:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800137a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800137e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001384:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	2107      	movs	r1, #7
 800138c:	4618      	mov	r0, r3
 800138e:	f001 fdc9 	bl	8002f24 <HAL_RCC_ClockConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001398:	f000 fa54 	bl	8001844 <Error_Handler>
  }
}
 800139c:	bf00      	nop
 800139e:	3750      	adds	r7, #80	; 0x50
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40007000 	.word	0x40007000

080013ac <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013b2:	463b      	mov	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <MX_DAC_Init+0x4c>)
 80013bc:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <MX_DAC_Init+0x50>)
 80013be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80013c0:	480d      	ldr	r0, [pc, #52]	; (80013f8 <MX_DAC_Init+0x4c>)
 80013c2:	f000 fe26 	bl	8002012 <HAL_DAC_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80013cc:	f000 fa3a 	bl	8001844 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80013d8:	463b      	mov	r3, r7
 80013da:	2200      	movs	r2, #0
 80013dc:	4619      	mov	r1, r3
 80013de:	4806      	ldr	r0, [pc, #24]	; (80013f8 <MX_DAC_Init+0x4c>)
 80013e0:	f000 fe8b 	bl	80020fa <HAL_DAC_ConfigChannel>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80013ea:	f000 fa2b 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000288 	.word	0x20000288
 80013fc:	40007400 	.word	0x40007400

08001400 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001404:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <MX_SPI1_Init+0x74>)
 8001406:	4a1c      	ldr	r2, [pc, #112]	; (8001478 <MX_SPI1_Init+0x78>)
 8001408:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <MX_SPI1_Init+0x74>)
 800140c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001410:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001412:	4b18      	ldr	r3, [pc, #96]	; (8001474 <MX_SPI1_Init+0x74>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <MX_SPI1_Init+0x74>)
 800141a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800141e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <MX_SPI1_Init+0x74>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001426:	4b13      	ldr	r3, [pc, #76]	; (8001474 <MX_SPI1_Init+0x74>)
 8001428:	2200      	movs	r2, #0
 800142a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <MX_SPI1_Init+0x74>)
 800142e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001432:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <MX_SPI1_Init+0x74>)
 8001436:	2218      	movs	r2, #24
 8001438:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_SPI1_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <MX_SPI1_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <MX_SPI1_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800144c:	4b09      	ldr	r3, [pc, #36]	; (8001474 <MX_SPI1_Init+0x74>)
 800144e:	2207      	movs	r2, #7
 8001450:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <MX_SPI1_Init+0x74>)
 8001454:	2200      	movs	r2, #0
 8001456:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_SPI1_Init+0x74>)
 800145a:	2208      	movs	r2, #8
 800145c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800145e:	4805      	ldr	r0, [pc, #20]	; (8001474 <MX_SPI1_Init+0x74>)
 8001460:	f002 fad0 	bl	8003a04 <HAL_SPI_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800146a:	f000 f9eb 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	2000029c 	.word	0x2000029c
 8001478:	40013000 	.word	0x40013000

0800147c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_TIM11_Init+0x40>)
 8001482:	4a0f      	ldr	r2, [pc, #60]	; (80014c0 <MX_TIM11_Init+0x44>)
 8001484:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 108-1;
 8001486:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <MX_TIM11_Init+0x40>)
 8001488:	226b      	movs	r2, #107	; 0x6b
 800148a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <MX_TIM11_Init+0x40>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2000-1;
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <MX_TIM11_Init+0x40>)
 8001494:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001498:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <MX_TIM11_Init+0x40>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_TIM11_Init+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_TIM11_Init+0x40>)
 80014a8:	f002 fe4e 	bl	8004148 <HAL_TIM_Base_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80014b2:	f000 f9c7 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000300 	.word	0x20000300
 80014c0:	40014800 	.word	0x40014800

080014c4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_TIM13_Init+0x40>)
 80014ca:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <MX_TIM13_Init+0x44>)
 80014cc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 108-1;
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_TIM13_Init+0x40>)
 80014d0:	226b      	movs	r2, #107	; 0x6b
 80014d2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_TIM13_Init+0x40>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <MX_TIM13_Init+0x40>)
 80014dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80014e0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_TIM13_Init+0x40>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_TIM13_Init+0x40>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_TIM13_Init+0x40>)
 80014f0:	f002 fe2a 	bl	8004148 <HAL_TIM_Base_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80014fa:	f000 f9a3 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000034c 	.word	0x2000034c
 8001508:	40001c00 	.word	0x40001c00

0800150c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <MX_USART3_UART_Init+0x58>)
 8001512:	4a15      	ldr	r2, [pc, #84]	; (8001568 <MX_USART3_UART_Init+0x5c>)
 8001514:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <MX_USART3_UART_Init+0x58>)
 8001518:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800151c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <MX_USART3_UART_Init+0x58>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <MX_USART3_UART_Init+0x58>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800152a:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <MX_USART3_UART_Init+0x58>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <MX_USART3_UART_Init+0x58>)
 8001532:	220c      	movs	r2, #12
 8001534:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <MX_USART3_UART_Init+0x58>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <MX_USART3_UART_Init+0x58>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001542:	4b08      	ldr	r3, [pc, #32]	; (8001564 <MX_USART3_UART_Init+0x58>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <MX_USART3_UART_Init+0x58>)
 800154a:	2200      	movs	r2, #0
 800154c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800154e:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_USART3_UART_Init+0x58>)
 8001550:	f003 f8d0 	bl	80046f4 <HAL_UART_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800155a:	f000 f973 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000398 	.word	0x20000398
 8001568:	40004800 	.word	0x40004800

0800156c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001572:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001576:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001578:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800157a:	2206      	movs	r2, #6
 800157c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800157e:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001580:	2202      	movs	r2, #2
 8001582:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001584:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001586:	2200      	movs	r2, #0
 8001588:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800158a:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800158c:	2202      	movs	r2, #2
 800158e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001590:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001592:	2201      	movs	r2, #1
 8001594:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001598:	2200      	movs	r2, #0
 800159a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015b4:	4804      	ldr	r0, [pc, #16]	; (80015c8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015b6:	f001 f868 	bl	800268a <HAL_PCD_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80015c0:	f000 f940 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000420 	.word	0x20000420

080015cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08c      	sub	sp, #48	; 0x30
 80015d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	60da      	str	r2, [r3, #12]
 80015e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e2:	4b47      	ldr	r3, [pc, #284]	; (8001700 <MX_GPIO_Init+0x134>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a46      	ldr	r2, [pc, #280]	; (8001700 <MX_GPIO_Init+0x134>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b44      	ldr	r3, [pc, #272]	; (8001700 <MX_GPIO_Init+0x134>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fa:	4b41      	ldr	r3, [pc, #260]	; (8001700 <MX_GPIO_Init+0x134>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a40      	ldr	r2, [pc, #256]	; (8001700 <MX_GPIO_Init+0x134>)
 8001600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b3e      	ldr	r3, [pc, #248]	; (8001700 <MX_GPIO_Init+0x134>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800160e:	617b      	str	r3, [r7, #20]
 8001610:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001612:	4b3b      	ldr	r3, [pc, #236]	; (8001700 <MX_GPIO_Init+0x134>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a3a      	ldr	r2, [pc, #232]	; (8001700 <MX_GPIO_Init+0x134>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b38      	ldr	r3, [pc, #224]	; (8001700 <MX_GPIO_Init+0x134>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	4b35      	ldr	r3, [pc, #212]	; (8001700 <MX_GPIO_Init+0x134>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	4a34      	ldr	r2, [pc, #208]	; (8001700 <MX_GPIO_Init+0x134>)
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
 8001636:	4b32      	ldr	r3, [pc, #200]	; (8001700 <MX_GPIO_Init+0x134>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001642:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <MX_GPIO_Init+0x134>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a2e      	ldr	r2, [pc, #184]	; (8001700 <MX_GPIO_Init+0x134>)
 8001648:	f043 0308 	orr.w	r3, r3, #8
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <MX_GPIO_Init+0x134>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800165a:	4b29      	ldr	r3, [pc, #164]	; (8001700 <MX_GPIO_Init+0x134>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a28      	ldr	r2, [pc, #160]	; (8001700 <MX_GPIO_Init+0x134>)
 8001660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b26      	ldr	r3, [pc, #152]	; (8001700 <MX_GPIO_Init+0x134>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|SPI_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	f244 01c1 	movw	r1, #16577	; 0x40c1
 8001678:	4822      	ldr	r0, [pc, #136]	; (8001704 <MX_GPIO_Init+0x138>)
 800167a:	f000 ffd3 	bl	8002624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	2140      	movs	r1, #64	; 0x40
 8001682:	4821      	ldr	r0, [pc, #132]	; (8001708 <MX_GPIO_Init+0x13c>)
 8001684:	f000 ffce 	bl	8002624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800168c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800168e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 031c 	add.w	r3, r7, #28
 800169c:	4619      	mov	r1, r3
 800169e:	481b      	ldr	r0, [pc, #108]	; (800170c <MX_GPIO_Init+0x140>)
 80016a0:	f000 fe0c 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin SPI_CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|SPI_CS_Pin|LD2_Pin;
 80016a4:	f244 03c1 	movw	r3, #16577	; 0x40c1
 80016a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	4811      	ldr	r0, [pc, #68]	; (8001704 <MX_GPIO_Init+0x138>)
 80016be:	f000 fdfd 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80016c2:	2340      	movs	r3, #64	; 0x40
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	480b      	ldr	r0, [pc, #44]	; (8001708 <MX_GPIO_Init+0x13c>)
 80016da:	f000 fdef 	bl	80022bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_GPIO_Init+0x13c>)
 80016f2:	f000 fde3 	bl	80022bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016f6:	bf00      	nop
 80016f8:	3730      	adds	r7, #48	; 0x30
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800
 8001704:	40020400 	.word	0x40020400
 8001708:	40021800 	.word	0x40021800
 800170c:	40020800 	.word	0x40020800

08001710 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* Timer13 interupt that fires every 5 ms to check push button press and handle debouncing*/
/* Timer11 interupt that fires every 1 ms */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

	if (htim == &htim13 )/* Timer13 interupt that fires every 5 ms*/
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a3d      	ldr	r2, [pc, #244]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d173      	bne.n	8001808 <HAL_TIM_PeriodElapsedCallback+0xf8>
	{
		if (!debounceRequest)
 8001720:	4b3c      	ldr	r3, [pc, #240]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d120      	bne.n	800176a <HAL_TIM_PeriodElapsedCallback+0x5a>
		{
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8001728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800172c:	483a      	ldr	r0, [pc, #232]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x108>)
 800172e:	f000 ff61 	bl	80025f4 <HAL_GPIO_ReadPin>
 8001732:	4603      	mov	r3, r0
 8001734:	2b01      	cmp	r3, #1
 8001736:	d134      	bne.n	80017a2 <HAL_TIM_PeriodElapsedCallback+0x92>
			{
				HAL_UART_Transmit(&huart3, "Button Pressed\n\r" , strlen("Button Pressed\n\r"),1000);
 8001738:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173c:	2210      	movs	r2, #16
 800173e:	4937      	ldr	r1, [pc, #220]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001740:	4837      	ldr	r0, [pc, #220]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001742:	f003 f825 	bl	8004790 <HAL_UART_Transmit>
				if(BlinkSpeed == 2)
 8001746:	4b37      	ldr	r3, [pc, #220]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d103      	bne.n	8001756 <HAL_TIM_PeriodElapsedCallback+0x46>
				{
					BlinkSpeed = 0;
 800174e:	4b35      	ldr	r3, [pc, #212]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001750:	2200      	movs	r2, #0
 8001752:	701a      	strb	r2, [r3, #0]
 8001754:	e005      	b.n	8001762 <HAL_TIM_PeriodElapsedCallback+0x52>
				}
				else
				{
					BlinkSpeed ++;
 8001756:	4b33      	ldr	r3, [pc, #204]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	3301      	adds	r3, #1
 800175c:	b2da      	uxtb	r2, r3
 800175e:	4b31      	ldr	r3, [pc, #196]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001760:	701a      	strb	r2, [r3, #0]

				}
				debounceRequest = 1;
 8001762:	4b2c      	ldr	r3, [pc, #176]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001764:	2201      	movs	r2, #1
 8001766:	701a      	strb	r2, [r3, #0]
 8001768:	e01b      	b.n	80017a2 <HAL_TIM_PeriodElapsedCallback+0x92>
			}
		}
		// Handle debounce
		else
		{
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 800176a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800176e:	482a      	ldr	r0, [pc, #168]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001770:	f000 ff40 	bl	80025f4 <HAL_GPIO_ReadPin>
 8001774:	4603      	mov	r3, r0
 8001776:	2b01      	cmp	r3, #1
 8001778:	d103      	bne.n	8001782 <HAL_TIM_PeriodElapsedCallback+0x72>
				debounceCount = 0;
 800177a:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	e00f      	b.n	80017a2 <HAL_TIM_PeriodElapsedCallback+0x92>
			else
			{
				debounceCount ++;
 8001782:	4b29      	ldr	r3, [pc, #164]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b27      	ldr	r3, [pc, #156]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800178c:	701a      	strb	r2, [r3, #0]
				if (debounceCount == 10)
 800178e:	4b26      	ldr	r3, [pc, #152]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b0a      	cmp	r3, #10
 8001794:	d105      	bne.n	80017a2 <HAL_TIM_PeriodElapsedCallback+0x92>
				{
					debounceCount = 0;
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
					debounceRequest = 0;
 800179c:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
				}
			}
		}


		spi_data = 0x3000|Value_DAC_SPI;
 80017a2:	4b22      	ldr	r3, [pc, #136]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	4b20      	ldr	r3, [pc, #128]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80017ae:	801a      	strh	r2, [r3, #0]
		//spi_data = 0x3000|0;
		HAL_StatusTypeDef errorcode;
		//spi_data[0]= 0x0F;
		//spi_data[1]= 0x30;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2140      	movs	r1, #64	; 0x40
 80017b4:	481f      	ldr	r0, [pc, #124]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80017b6:	f000 ff35 	bl	8002624 <HAL_GPIO_WritePin>
		errorcode = HAL_SPI_Transmit(&hspi1, (uint8_t*)&spi_data, 2, 100000);
 80017ba:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80017bc:	2202      	movs	r2, #2
 80017be:	491c      	ldr	r1, [pc, #112]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80017c0:	481e      	ldr	r0, [pc, #120]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80017c2:	f002 f9ca 	bl	8003b5a <HAL_SPI_Transmit>
 80017c6:	4603      	mov	r3, r0
 80017c8:	73fb      	strb	r3, [r7, #15]
		if (errorcode!= HAL_OK)
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d006      	beq.n	80017de <HAL_TIM_PeriodElapsedCallback+0xce>
		{
			HAL_UART_Transmit(&huart3, "error\n\r" , strlen("error\n\r"),1000);
 80017d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d4:	2207      	movs	r2, #7
 80017d6:	491a      	ldr	r1, [pc, #104]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80017d8:	4811      	ldr	r0, [pc, #68]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80017da:	f002 ffd9 	bl	8004790 <HAL_UART_Transmit>
		}
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80017de:	2201      	movs	r2, #1
 80017e0:	2140      	movs	r1, #64	; 0x40
 80017e2:	4814      	ldr	r0, [pc, #80]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80017e4:	f000 ff1e 	bl	8002624 <HAL_GPIO_WritePin>

		if (Value_DAC_SPI<4095)
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	f640 72fe 	movw	r2, #4094	; 0xffe
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d806      	bhi.n	8001802 <HAL_TIM_PeriodElapsedCallback+0xf2>
		{
			Value_DAC_SPI++;
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80017fe:	801a      	strh	r2, [r3, #0]
	{

	}


}
 8001800:	e002      	b.n	8001808 <HAL_TIM_PeriodElapsedCallback+0xf8>
			Value_DAC_SPI = 0;
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001804:	2200      	movs	r2, #0
 8001806:	801a      	strh	r2, [r3, #0]
}
 8001808:	bf00      	nop
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	2000034c 	.word	0x2000034c
 8001814:	20000929 	.word	0x20000929
 8001818:	40020800 	.word	0x40020800
 800181c:	080066a0 	.word	0x080066a0
 8001820:	20000398 	.word	0x20000398
 8001824:	20000928 	.word	0x20000928
 8001828:	2000092a 	.word	0x2000092a
 800182c:	20000002 	.word	0x20000002
 8001830:	2000092c 	.word	0x2000092c
 8001834:	40020400 	.word	0x40020400
 8001838:	000186a0 	.word	0x000186a0
 800183c:	2000029c 	.word	0x2000029c
 8001840:	080066b4 	.word	0x080066b4

08001844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001848:	b672      	cpsid	i
}
 800184a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800184c:	e7fe      	b.n	800184c <Error_Handler+0x8>
	...

08001850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <HAL_MspInit+0x44>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <HAL_MspInit+0x44>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <HAL_MspInit+0x44>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_MspInit+0x44>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	4a08      	ldr	r2, [pc, #32]	; (8001894 <HAL_MspInit+0x44>)
 8001874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001878:	6453      	str	r3, [r2, #68]	; 0x44
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_MspInit+0x44>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800

08001898 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a15      	ldr	r2, [pc, #84]	; (800190c <HAL_DAC_MspInit+0x74>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d123      	bne.n	8001902 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_DAC_MspInit+0x78>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	4a14      	ldr	r2, [pc, #80]	; (8001910 <HAL_DAC_MspInit+0x78>)
 80018c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80018c4:	6413      	str	r3, [r2, #64]	; 0x40
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_DAC_MspInit+0x78>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <HAL_DAC_MspInit+0x78>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <HAL_DAC_MspInit+0x78>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <HAL_DAC_MspInit+0x78>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018ea:	2310      	movs	r3, #16
 80018ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ee:	2303      	movs	r3, #3
 80018f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <HAL_DAC_MspInit+0x7c>)
 80018fe:	f000 fcdd 	bl	80022bc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001902:	bf00      	nop
 8001904:	3728      	adds	r7, #40	; 0x28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40007400 	.word	0x40007400
 8001910:	40023800 	.word	0x40023800
 8001914:	40020000 	.word	0x40020000

08001918 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a17      	ldr	r2, [pc, #92]	; (8001994 <HAL_SPI_MspInit+0x7c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d127      	bne.n	800198a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <HAL_SPI_MspInit+0x80>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a16      	ldr	r2, [pc, #88]	; (8001998 <HAL_SPI_MspInit+0x80>)
 8001940:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b14      	ldr	r3, [pc, #80]	; (8001998 <HAL_SPI_MspInit+0x80>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b11      	ldr	r3, [pc, #68]	; (8001998 <HAL_SPI_MspInit+0x80>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a10      	ldr	r2, [pc, #64]	; (8001998 <HAL_SPI_MspInit+0x80>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <HAL_SPI_MspInit+0x80>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800196a:	23e0      	movs	r3, #224	; 0xe0
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800197a:	2305      	movs	r3, #5
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <HAL_SPI_MspInit+0x84>)
 8001986:	f000 fc99 	bl	80022bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800198a:	bf00      	nop
 800198c:	3728      	adds	r7, #40	; 0x28
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40013000 	.word	0x40013000
 8001998:	40023800 	.word	0x40023800
 800199c:	40020000 	.word	0x40020000

080019a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a1a      	ldr	r2, [pc, #104]	; (8001a18 <HAL_TIM_Base_MspInit+0x78>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d114      	bne.n	80019dc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <HAL_TIM_Base_MspInit+0x7c>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a19      	ldr	r2, [pc, #100]	; (8001a1c <HAL_TIM_Base_MspInit+0x7c>)
 80019b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b17      	ldr	r3, [pc, #92]	; (8001a1c <HAL_TIM_Base_MspInit+0x7c>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2100      	movs	r1, #0
 80019ce:	201a      	movs	r0, #26
 80019d0:	f000 fae9 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80019d4:	201a      	movs	r0, #26
 80019d6:	f000 fb02 	bl	8001fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80019da:	e018      	b.n	8001a0e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM13)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <HAL_TIM_Base_MspInit+0x80>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d113      	bne.n	8001a0e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_TIM_Base_MspInit+0x7c>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <HAL_TIM_Base_MspInit+0x7c>)
 80019ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019f0:	6413      	str	r3, [r2, #64]	; 0x40
 80019f2:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_TIM_Base_MspInit+0x7c>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	202c      	movs	r0, #44	; 0x2c
 8001a04:	f000 facf 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001a08:	202c      	movs	r0, #44	; 0x2c
 8001a0a:	f000 fae8 	bl	8001fde <HAL_NVIC_EnableIRQ>
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40014800 	.word	0x40014800
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40001c00 	.word	0x40001c00

08001a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0aa      	sub	sp, #168	; 0xa8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	2280      	movs	r2, #128	; 0x80
 8001a42:	2100      	movs	r1, #0
 8001a44:	4618      	mov	r0, r3
 8001a46:	f004 fceb 	bl	8006420 <memset>
  if(huart->Instance==USART3)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a26      	ldr	r2, [pc, #152]	; (8001ae8 <HAL_UART_MspInit+0xc4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d144      	bne.n	8001ade <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a58:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4618      	mov	r0, r3
 8001a64:	f001 fc84 	bl	8003370 <HAL_RCCEx_PeriphCLKConfig>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a6e:	f7ff fee9 	bl	8001844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a72:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <HAL_UART_MspInit+0xc8>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a1d      	ldr	r2, [pc, #116]	; (8001aec <HAL_UART_MspInit+0xc8>)
 8001a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_UART_MspInit+0xc8>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_UART_MspInit+0xc8>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a17      	ldr	r2, [pc, #92]	; (8001aec <HAL_UART_MspInit+0xc8>)
 8001a90:	f043 0308 	orr.w	r3, r3, #8
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <HAL_UART_MspInit+0xc8>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001aa2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001abc:	2307      	movs	r3, #7
 8001abe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4809      	ldr	r0, [pc, #36]	; (8001af0 <HAL_UART_MspInit+0xcc>)
 8001aca:	f000 fbf7 	bl	80022bc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2027      	movs	r0, #39	; 0x27
 8001ad4:	f000 fa67 	bl	8001fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ad8:	2027      	movs	r0, #39	; 0x27
 8001ada:	f000 fa80 	bl	8001fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ade:	bf00      	nop
 8001ae0:	37a8      	adds	r7, #168	; 0xa8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40004800 	.word	0x40004800
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020c00 	.word	0x40020c00

08001af4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b0aa      	sub	sp, #168	; 0xa8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2280      	movs	r2, #128	; 0x80
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f004 fc83 	bl	8006420 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b22:	d159      	bne.n	8001bd8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001b24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	4618      	mov	r0, r3
 8001b36:	f001 fc1b 	bl	8003370 <HAL_RCCEx_PeriphCLKConfig>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001b40:	f7ff fe80 	bl	8001844 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b44:	4b26      	ldr	r3, [pc, #152]	; (8001be0 <HAL_PCD_MspInit+0xec>)
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	4a25      	ldr	r2, [pc, #148]	; (8001be0 <HAL_PCD_MspInit+0xec>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b50:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <HAL_PCD_MspInit+0xec>)
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b5c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001b60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b76:	230a      	movs	r3, #10
 8001b78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b80:	4619      	mov	r1, r3
 8001b82:	4818      	ldr	r0, [pc, #96]	; (8001be4 <HAL_PCD_MspInit+0xf0>)
 8001b84:	f000 fb9a 	bl	80022bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b9c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4810      	ldr	r0, [pc, #64]	; (8001be4 <HAL_PCD_MspInit+0xf0>)
 8001ba4:	f000 fb8a 	bl	80022bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ba8:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <HAL_PCD_MspInit+0xec>)
 8001baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bac:	4a0c      	ldr	r2, [pc, #48]	; (8001be0 <HAL_PCD_MspInit+0xec>)
 8001bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb2:	6353      	str	r3, [r2, #52]	; 0x34
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_PCD_MspInit+0xec>)
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <HAL_PCD_MspInit+0xec>)
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc4:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <HAL_PCD_MspInit+0xec>)
 8001bc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bca:	6453      	str	r3, [r2, #68]	; 0x44
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <HAL_PCD_MspInit+0xec>)
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001bd8:	bf00      	nop
 8001bda:	37a8      	adds	r7, #168	; 0xa8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020000 	.word	0x40020000

08001be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bec:	e7fe      	b.n	8001bec <NMI_Handler+0x4>

08001bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <HardFault_Handler+0x4>

08001bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <MemManage_Handler+0x4>

08001bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <BusFault_Handler+0x4>

08001c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <UsageFault_Handler+0x4>

08001c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c34:	f000 f898 	bl	8001d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001c42:	f002 fb51 	bl	80042e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000300 	.word	0x20000300

08001c50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <USART3_IRQHandler+0x10>)
 8001c56:	f002 fe63 	bl	8004920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000398 	.word	0x20000398

08001c64 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001c6a:	f002 fb3d 	bl	80042e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	2000034c 	.word	0x2000034c

08001c78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <SystemInit+0x20>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c82:	4a05      	ldr	r2, [pc, #20]	; (8001c98 <SystemInit+0x20>)
 8001c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ca0:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ca2:	490e      	ldr	r1, [pc, #56]	; (8001cdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ca4:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ca8:	e002      	b.n	8001cb0 <LoopCopyDataInit>

08001caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cae:	3304      	adds	r3, #4

08001cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cb4:	d3f9      	bcc.n	8001caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cb8:	4c0b      	ldr	r4, [pc, #44]	; (8001ce8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cbc:	e001      	b.n	8001cc2 <LoopFillZerobss>

08001cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cc0:	3204      	adds	r2, #4

08001cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cc4:	d3fb      	bcc.n	8001cbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cc6:	f7ff ffd7 	bl	8001c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cca:	f004 fbb7 	bl	800643c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cce:	f7ff fa93 	bl	80011f8 <main>
  bx  lr    
 8001cd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cd4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cdc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ce0:	08006bd8 	.word	0x08006bd8
  ldr r2, =_sbss
 8001ce4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001ce8:	20000a6c 	.word	0x20000a6c

08001cec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cec:	e7fe      	b.n	8001cec <ADC_IRQHandler>

08001cee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf2:	2003      	movs	r0, #3
 8001cf4:	f000 f94c 	bl	8001f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f000 f805 	bl	8001d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cfe:	f7ff fda7 	bl	8001850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <HAL_InitTick+0x54>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_InitTick+0x58>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 f967 	bl	8001ffa <HAL_SYSTICK_Config>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00e      	b.n	8001d54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b0f      	cmp	r3, #15
 8001d3a:	d80a      	bhi.n	8001d52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	f000 f92f 	bl	8001fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d48:	4a06      	ldr	r2, [pc, #24]	; (8001d64 <HAL_InitTick+0x5c>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e000      	b.n	8001d54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000004 	.word	0x20000004
 8001d60:	2000000c 	.word	0x2000000c
 8001d64:	20000008 	.word	0x20000008

08001d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_IncTick+0x20>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	461a      	mov	r2, r3
 8001d72:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <HAL_IncTick+0x24>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4413      	add	r3, r2
 8001d78:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <HAL_IncTick+0x24>)
 8001d7a:	6013      	str	r3, [r2, #0]
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	2000000c 	.word	0x2000000c
 8001d8c:	20000930 	.word	0x20000930

08001d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return uwTick;
 8001d94:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <HAL_GetTick+0x14>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20000930 	.word	0x20000930

08001da8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001db0:	f7ff ffee 	bl	8001d90 <HAL_GetTick>
 8001db4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc0:	d005      	beq.n	8001dce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <HAL_Delay+0x44>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4413      	add	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dce:	bf00      	nop
 8001dd0:	f7ff ffde 	bl	8001d90 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	68fa      	ldr	r2, [r7, #12]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d8f7      	bhi.n	8001dd0 <HAL_Delay+0x28>
  {
  }
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	2000000c 	.word	0x2000000c

08001df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <__NVIC_SetPriorityGrouping+0x40>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <__NVIC_SetPriorityGrouping+0x44>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1e:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <__NVIC_SetPriorityGrouping+0x40>)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	60d3      	str	r3, [r2, #12]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00
 8001e34:	05fa0000 	.word	0x05fa0000

08001e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <__NVIC_GetPriorityGrouping+0x18>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	0a1b      	lsrs	r3, r3, #8
 8001e42:	f003 0307 	and.w	r3, r3, #7
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	db0b      	blt.n	8001e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	f003 021f 	and.w	r2, r3, #31
 8001e6c:	4907      	ldr	r1, [pc, #28]	; (8001e8c <__NVIC_EnableIRQ+0x38>)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	2001      	movs	r0, #1
 8001e76:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000e100 	.word	0xe000e100

08001e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	6039      	str	r1, [r7, #0]
 8001e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	db0a      	blt.n	8001eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	490c      	ldr	r1, [pc, #48]	; (8001edc <__NVIC_SetPriority+0x4c>)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	0112      	lsls	r2, r2, #4
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb8:	e00a      	b.n	8001ed0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4908      	ldr	r1, [pc, #32]	; (8001ee0 <__NVIC_SetPriority+0x50>)
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	3b04      	subs	r3, #4
 8001ec8:	0112      	lsls	r2, r2, #4
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	440b      	add	r3, r1
 8001ece:	761a      	strb	r2, [r3, #24]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000e100 	.word	0xe000e100
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	; 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f1c3 0307 	rsb	r3, r3, #7
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	bf28      	it	cs
 8001f02:	2304      	movcs	r3, #4
 8001f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	2b06      	cmp	r3, #6
 8001f0c:	d902      	bls.n	8001f14 <NVIC_EncodePriority+0x30>
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3b03      	subs	r3, #3
 8001f12:	e000      	b.n	8001f16 <NVIC_EncodePriority+0x32>
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43da      	mvns	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	401a      	ands	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	43d9      	mvns	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	4313      	orrs	r3, r2
         );
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3724      	adds	r7, #36	; 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f5c:	d301      	bcc.n	8001f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00f      	b.n	8001f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <SysTick_Config+0x40>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f7ff ff8e 	bl	8001e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <SysTick_Config+0x40>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <SysTick_Config+0x40>)
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	e000e010 	.word	0xe000e010

08001f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff29 	bl	8001df0 <__NVIC_SetPriorityGrouping>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb8:	f7ff ff3e 	bl	8001e38 <__NVIC_GetPriorityGrouping>
 8001fbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	6978      	ldr	r0, [r7, #20]
 8001fc4:	f7ff ff8e 	bl	8001ee4 <NVIC_EncodePriority>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff ff5d 	bl	8001e90 <__NVIC_SetPriority>
}
 8001fd6:	bf00      	nop
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff31 	bl	8001e54 <__NVIC_EnableIRQ>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ffa2 	bl	8001f4c <SysTick_Config>
 8002008:	4603      	mov	r3, r0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d101      	bne.n	8002024 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e014      	b.n	800204e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	791b      	ldrb	r3, [r3, #4]
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d105      	bne.n	800203a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff fc2f 	bl	8001898 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2202      	movs	r2, #2
 800203e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
 800205e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	795b      	ldrb	r3, [r3, #5]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_DAC_Start+0x16>
 8002068:	2302      	movs	r3, #2
 800206a:	e040      	b.n	80020ee <HAL_DAC_Start+0x98>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2202      	movs	r2, #2
 8002076:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6819      	ldr	r1, [r3, #0]
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	2201      	movs	r2, #1
 8002086:	409a      	lsls	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10f      	bne.n	80020b6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80020a0:	2b3c      	cmp	r3, #60	; 0x3c
 80020a2:	d11d      	bne.n	80020e0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	e014      	b.n	80020e0 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	213c      	movs	r1, #60	; 0x3c
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d107      	bne.n	80020e0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0202 	orr.w	r2, r2, #2
 80020de:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b087      	sub	sp, #28
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	795b      	ldrb	r3, [r3, #5]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_DAC_ConfigChannel+0x18>
 800210e:	2302      	movs	r3, #2
 8002110:	e03c      	b.n	800218c <HAL_DAC_ConfigChannel+0x92>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2202      	movs	r2, #2
 800211c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	4013      	ands	r3, r2
 800213a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	4313      	orrs	r3, r2
 8002158:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6819      	ldr	r1, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	22c0      	movs	r2, #192	; 0xc0
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43da      	mvns	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	400a      	ands	r2, r1
 800217c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2201      	movs	r2, #1
 8002182:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	371c      	adds	r7, #28
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021a6:	f7ff fdf3 	bl	8001d90 <HAL_GetTick>
 80021aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d008      	beq.n	80021ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2280      	movs	r2, #128	; 0x80
 80021bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e052      	b.n	8002270 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0216 	bic.w	r2, r2, #22
 80021d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	695a      	ldr	r2, [r3, #20]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d103      	bne.n	80021fa <HAL_DMA_Abort+0x62>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d007      	beq.n	800220a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0208 	bic.w	r2, r2, #8
 8002208:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0201 	bic.w	r2, r2, #1
 8002218:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800221a:	e013      	b.n	8002244 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800221c:	f7ff fdb8 	bl	8001d90 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b05      	cmp	r3, #5
 8002228:	d90c      	bls.n	8002244 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2220      	movs	r2, #32
 800222e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2203      	movs	r2, #3
 8002234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e015      	b.n	8002270 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1e4      	bne.n	800221c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002256:	223f      	movs	r2, #63	; 0x3f
 8002258:	409a      	lsls	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d004      	beq.n	8002296 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2280      	movs	r2, #128	; 0x80
 8002290:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e00c      	b.n	80022b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2205      	movs	r2, #5
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0201 	bic.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	; 0x24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	e169      	b.n	80025b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80022dc:	2201      	movs	r2, #1
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	f040 8158 	bne.w	80025aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d005      	beq.n	8002312 <HAL_GPIO_Init+0x56>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d130      	bne.n	8002374 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	2203      	movs	r2, #3
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002348:	2201      	movs	r2, #1
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 0201 	and.w	r2, r3, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b03      	cmp	r3, #3
 800237e:	d017      	beq.n	80023b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2203      	movs	r2, #3
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d123      	bne.n	8002404 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	08da      	lsrs	r2, r3, #3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3208      	adds	r2, #8
 80023c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	220f      	movs	r2, #15
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	08da      	lsrs	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3208      	adds	r2, #8
 80023fe:	69b9      	ldr	r1, [r7, #24]
 8002400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2203      	movs	r2, #3
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0203 	and.w	r2, r3, #3
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80b2 	beq.w	80025aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002446:	4b60      	ldr	r3, [pc, #384]	; (80025c8 <HAL_GPIO_Init+0x30c>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	4a5f      	ldr	r2, [pc, #380]	; (80025c8 <HAL_GPIO_Init+0x30c>)
 800244c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002450:	6453      	str	r3, [r2, #68]	; 0x44
 8002452:	4b5d      	ldr	r3, [pc, #372]	; (80025c8 <HAL_GPIO_Init+0x30c>)
 8002454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800245e:	4a5b      	ldr	r2, [pc, #364]	; (80025cc <HAL_GPIO_Init+0x310>)
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	089b      	lsrs	r3, r3, #2
 8002464:	3302      	adds	r3, #2
 8002466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	220f      	movs	r2, #15
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a52      	ldr	r2, [pc, #328]	; (80025d0 <HAL_GPIO_Init+0x314>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d02b      	beq.n	80024e2 <HAL_GPIO_Init+0x226>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a51      	ldr	r2, [pc, #324]	; (80025d4 <HAL_GPIO_Init+0x318>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d025      	beq.n	80024de <HAL_GPIO_Init+0x222>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a50      	ldr	r2, [pc, #320]	; (80025d8 <HAL_GPIO_Init+0x31c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d01f      	beq.n	80024da <HAL_GPIO_Init+0x21e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4f      	ldr	r2, [pc, #316]	; (80025dc <HAL_GPIO_Init+0x320>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d019      	beq.n	80024d6 <HAL_GPIO_Init+0x21a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4e      	ldr	r2, [pc, #312]	; (80025e0 <HAL_GPIO_Init+0x324>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d013      	beq.n	80024d2 <HAL_GPIO_Init+0x216>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a4d      	ldr	r2, [pc, #308]	; (80025e4 <HAL_GPIO_Init+0x328>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00d      	beq.n	80024ce <HAL_GPIO_Init+0x212>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a4c      	ldr	r2, [pc, #304]	; (80025e8 <HAL_GPIO_Init+0x32c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d007      	beq.n	80024ca <HAL_GPIO_Init+0x20e>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a4b      	ldr	r2, [pc, #300]	; (80025ec <HAL_GPIO_Init+0x330>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d101      	bne.n	80024c6 <HAL_GPIO_Init+0x20a>
 80024c2:	2307      	movs	r3, #7
 80024c4:	e00e      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024c6:	2308      	movs	r3, #8
 80024c8:	e00c      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024ca:	2306      	movs	r3, #6
 80024cc:	e00a      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024ce:	2305      	movs	r3, #5
 80024d0:	e008      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024d2:	2304      	movs	r3, #4
 80024d4:	e006      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024d6:	2303      	movs	r3, #3
 80024d8:	e004      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024da:	2302      	movs	r3, #2
 80024dc:	e002      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_GPIO_Init+0x228>
 80024e2:	2300      	movs	r3, #0
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	f002 0203 	and.w	r2, r2, #3
 80024ea:	0092      	lsls	r2, r2, #2
 80024ec:	4093      	lsls	r3, r2
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024f4:	4935      	ldr	r1, [pc, #212]	; (80025cc <HAL_GPIO_Init+0x310>)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	3302      	adds	r3, #2
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002502:	4b3b      	ldr	r3, [pc, #236]	; (80025f0 <HAL_GPIO_Init+0x334>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002526:	4a32      	ldr	r2, [pc, #200]	; (80025f0 <HAL_GPIO_Init+0x334>)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800252c:	4b30      	ldr	r3, [pc, #192]	; (80025f0 <HAL_GPIO_Init+0x334>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002550:	4a27      	ldr	r2, [pc, #156]	; (80025f0 <HAL_GPIO_Init+0x334>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002556:	4b26      	ldr	r3, [pc, #152]	; (80025f0 <HAL_GPIO_Init+0x334>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800257a:	4a1d      	ldr	r2, [pc, #116]	; (80025f0 <HAL_GPIO_Init+0x334>)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <HAL_GPIO_Init+0x334>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a4:	4a12      	ldr	r2, [pc, #72]	; (80025f0 <HAL_GPIO_Init+0x334>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3301      	adds	r3, #1
 80025ae:	61fb      	str	r3, [r7, #28]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	2b0f      	cmp	r3, #15
 80025b4:	f67f ae92 	bls.w	80022dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	3724      	adds	r7, #36	; 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40013800 	.word	0x40013800
 80025d0:	40020000 	.word	0x40020000
 80025d4:	40020400 	.word	0x40020400
 80025d8:	40020800 	.word	0x40020800
 80025dc:	40020c00 	.word	0x40020c00
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40021400 	.word	0x40021400
 80025e8:	40021800 	.word	0x40021800
 80025ec:	40021c00 	.word	0x40021c00
 80025f0:	40013c00 	.word	0x40013c00

080025f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	887b      	ldrh	r3, [r7, #2]
 8002606:	4013      	ands	r3, r2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
 8002610:	e001      	b.n	8002616 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002612:	2300      	movs	r3, #0
 8002614:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002616:	7bfb      	ldrb	r3, [r7, #15]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	807b      	strh	r3, [r7, #2]
 8002630:	4613      	mov	r3, r2
 8002632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002634:	787b      	ldrb	r3, [r7, #1]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800263a:	887a      	ldrh	r2, [r7, #2]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002640:	e003      	b.n	800264a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002642:	887b      	ldrh	r3, [r7, #2]
 8002644:	041a      	lsls	r2, r3, #16
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	619a      	str	r2, [r3, #24]
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002656:	b480      	push	{r7}
 8002658:	b085      	sub	sp, #20
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
 800265e:	460b      	mov	r3, r1
 8002660:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002668:	887a      	ldrh	r2, [r7, #2]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4013      	ands	r3, r2
 800266e:	041a      	lsls	r2, r3, #16
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	43d9      	mvns	r1, r3
 8002674:	887b      	ldrh	r3, [r7, #2]
 8002676:	400b      	ands	r3, r1
 8002678:	431a      	orrs	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	619a      	str	r2, [r3, #24]
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800268a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800268c:	b08f      	sub	sp, #60	; 0x3c
 800268e:	af0a      	add	r7, sp, #40	; 0x28
 8002690:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e116      	b.n	80028ca <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d106      	bne.n	80026bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7ff fa1c 	bl	8001af4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2203      	movs	r2, #3
 80026c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d102      	bne.n	80026d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f003 fb64 	bl	8005da8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	687e      	ldr	r6, [r7, #4]
 80026e8:	466d      	mov	r5, sp
 80026ea:	f106 0410 	add.w	r4, r6, #16
 80026ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80026fe:	1d33      	adds	r3, r6, #4
 8002700:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002702:	6838      	ldr	r0, [r7, #0]
 8002704:	f003 fac8 	bl	8005c98 <USB_CoreInit>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d005      	beq.n	800271a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2202      	movs	r2, #2
 8002712:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0d7      	b.n	80028ca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2100      	movs	r1, #0
 8002720:	4618      	mov	r0, r3
 8002722:	f003 fb52 	bl	8005dca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002726:	2300      	movs	r3, #0
 8002728:	73fb      	strb	r3, [r7, #15]
 800272a:	e04a      	b.n	80027c2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800272c:	7bfa      	ldrb	r2, [r7, #15]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	4413      	add	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	333d      	adds	r3, #61	; 0x3d
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	333c      	adds	r3, #60	; 0x3c
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	b298      	uxth	r0, r3
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	3344      	adds	r3, #68	; 0x44
 8002768:	4602      	mov	r2, r0
 800276a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800276c:	7bfa      	ldrb	r2, [r7, #15]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	3340      	adds	r3, #64	; 0x40
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002780:	7bfa      	ldrb	r2, [r7, #15]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	3348      	adds	r3, #72	; 0x48
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002794:	7bfa      	ldrb	r2, [r7, #15]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4413      	add	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	334c      	adds	r3, #76	; 0x4c
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027a8:	7bfa      	ldrb	r2, [r7, #15]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4413      	add	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	3354      	adds	r3, #84	; 0x54
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	3301      	adds	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
 80027c2:	7bfa      	ldrb	r2, [r7, #15]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d3af      	bcc.n	800272c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027cc:	2300      	movs	r3, #0
 80027ce:	73fb      	strb	r3, [r7, #15]
 80027d0:	e044      	b.n	800285c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80027d2:	7bfa      	ldrb	r2, [r7, #15]
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	4413      	add	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027e8:	7bfa      	ldrb	r2, [r7, #15]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027fa:	7bfa      	ldrb	r2, [r7, #15]
 80027fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027fe:	7bfa      	ldrb	r2, [r7, #15]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002814:	7bfa      	ldrb	r2, [r7, #15]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800282a:	7bfa      	ldrb	r2, [r7, #15]
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002840:	7bfa      	ldrb	r2, [r7, #15]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002856:	7bfb      	ldrb	r3, [r7, #15]
 8002858:	3301      	adds	r3, #1
 800285a:	73fb      	strb	r3, [r7, #15]
 800285c:	7bfa      	ldrb	r2, [r7, #15]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	429a      	cmp	r2, r3
 8002864:	d3b5      	bcc.n	80027d2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	687e      	ldr	r6, [r7, #4]
 800286e:	466d      	mov	r5, sp
 8002870:	f106 0410 	add.w	r4, r6, #16
 8002874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002878:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800287a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800287c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002880:	e885 0003 	stmia.w	r5, {r0, r1}
 8002884:	1d33      	adds	r3, r6, #4
 8002886:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002888:	6838      	ldr	r0, [r7, #0]
 800288a:	f003 faeb 	bl	8005e64 <USB_DevInit>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e014      	b.n	80028ca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d102      	bne.n	80028be <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f80b 	bl	80028d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f003 fcb9 	bl	800623a <USB_DevDisconnect>

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080028d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002902:	4b05      	ldr	r3, [pc, #20]	; (8002918 <HAL_PCDEx_ActivateLPM+0x44>)
 8002904:	4313      	orrs	r3, r2
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	10000003 	.word	0x10000003

0800291c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002920:	4b05      	ldr	r3, [pc, #20]	; (8002938 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a04      	ldr	r2, [pc, #16]	; (8002938 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292a:	6013      	str	r3, [r2, #0]
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40007000 	.word	0x40007000

0800293c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002946:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	4a22      	ldr	r2, [pc, #136]	; (80029d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800294c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002950:	6413      	str	r3, [r2, #64]	; 0x40
 8002952:	4b20      	ldr	r3, [pc, #128]	; (80029d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800295e:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1d      	ldr	r2, [pc, #116]	; (80029d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002968:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800296a:	f7ff fa11 	bl	8001d90 <HAL_GetTick>
 800296e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002970:	e009      	b.n	8002986 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002972:	f7ff fa0d 	bl	8001d90 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002980:	d901      	bls.n	8002986 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e022      	b.n	80029cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002986:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002992:	d1ee      	bne.n	8002972 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002994:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a0f      	ldr	r2, [pc, #60]	; (80029d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800299a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029a0:	f7ff f9f6 	bl	8001d90 <HAL_GetTick>
 80029a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029a6:	e009      	b.n	80029bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029a8:	f7ff f9f2 	bl	8001d90 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029b6:	d901      	bls.n	80029bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e007      	b.n	80029cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029bc:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80029c8:	d1ee      	bne.n	80029a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40007000 	.word	0x40007000

080029dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80029e4:	2300      	movs	r3, #0
 80029e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e291      	b.n	8002f16 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8087 	beq.w	8002b0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a00:	4b96      	ldr	r3, [pc, #600]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d00c      	beq.n	8002a26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a0c:	4b93      	ldr	r3, [pc, #588]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d112      	bne.n	8002a3e <HAL_RCC_OscConfig+0x62>
 8002a18:	4b90      	ldr	r3, [pc, #576]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a24:	d10b      	bne.n	8002a3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a26:	4b8d      	ldr	r3, [pc, #564]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d06c      	beq.n	8002b0c <HAL_RCC_OscConfig+0x130>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d168      	bne.n	8002b0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e26b      	b.n	8002f16 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a46:	d106      	bne.n	8002a56 <HAL_RCC_OscConfig+0x7a>
 8002a48:	4b84      	ldr	r3, [pc, #528]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a83      	ldr	r2, [pc, #524]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	e02e      	b.n	8002ab4 <HAL_RCC_OscConfig+0xd8>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x9c>
 8002a5e:	4b7f      	ldr	r3, [pc, #508]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a7e      	ldr	r2, [pc, #504]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b7c      	ldr	r3, [pc, #496]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a7b      	ldr	r2, [pc, #492]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a74:	6013      	str	r3, [r2, #0]
 8002a76:	e01d      	b.n	8002ab4 <HAL_RCC_OscConfig+0xd8>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCC_OscConfig+0xc0>
 8002a82:	4b76      	ldr	r3, [pc, #472]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a75      	ldr	r2, [pc, #468]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	4b73      	ldr	r3, [pc, #460]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a72      	ldr	r2, [pc, #456]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e00b      	b.n	8002ab4 <HAL_RCC_OscConfig+0xd8>
 8002a9c:	4b6f      	ldr	r3, [pc, #444]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a6e      	ldr	r2, [pc, #440]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa6:	6013      	str	r3, [r2, #0]
 8002aa8:	4b6c      	ldr	r3, [pc, #432]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a6b      	ldr	r2, [pc, #428]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d013      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abc:	f7ff f968 	bl	8001d90 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac4:	f7ff f964 	bl	8001d90 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b64      	cmp	r3, #100	; 0x64
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e21f      	b.n	8002f16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad6:	4b61      	ldr	r3, [pc, #388]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f0      	beq.n	8002ac4 <HAL_RCC_OscConfig+0xe8>
 8002ae2:	e014      	b.n	8002b0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7ff f954 	bl	8001d90 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aec:	f7ff f950 	bl	8001d90 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e20b      	b.n	8002f16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002afe:	4b57      	ldr	r3, [pc, #348]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x110>
 8002b0a:	e000      	b.n	8002b0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d069      	beq.n	8002bee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b1a:	4b50      	ldr	r3, [pc, #320]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00b      	beq.n	8002b3e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b26:	4b4d      	ldr	r3, [pc, #308]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 030c 	and.w	r3, r3, #12
 8002b2e:	2b08      	cmp	r3, #8
 8002b30:	d11c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x190>
 8002b32:	4b4a      	ldr	r3, [pc, #296]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d116      	bne.n	8002b6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b3e:	4b47      	ldr	r3, [pc, #284]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d005      	beq.n	8002b56 <HAL_RCC_OscConfig+0x17a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d001      	beq.n	8002b56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e1df      	b.n	8002f16 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b56:	4b41      	ldr	r3, [pc, #260]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	493d      	ldr	r1, [pc, #244]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6a:	e040      	b.n	8002bee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d023      	beq.n	8002bbc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b74:	4b39      	ldr	r3, [pc, #228]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a38      	ldr	r2, [pc, #224]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7ff f906 	bl	8001d90 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b88:	f7ff f902 	bl	8001d90 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e1bd      	b.n	8002f16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9a:	4b30      	ldr	r3, [pc, #192]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f0      	beq.n	8002b88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba6:	4b2d      	ldr	r3, [pc, #180]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4929      	ldr	r1, [pc, #164]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]
 8002bba:	e018      	b.n	8002bee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bbc:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a26      	ldr	r2, [pc, #152]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002bc2:	f023 0301 	bic.w	r3, r3, #1
 8002bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7ff f8e2 	bl	8001d90 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd0:	f7ff f8de 	bl	8001d90 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e199      	b.n	8002f16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be2:	4b1e      	ldr	r3, [pc, #120]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d038      	beq.n	8002c6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d019      	beq.n	8002c36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c02:	4b16      	ldr	r3, [pc, #88]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c06:	4a15      	ldr	r2, [pc, #84]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0e:	f7ff f8bf 	bl	8001d90 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c16:	f7ff f8bb 	bl	8001d90 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e176      	b.n	8002f16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x23a>
 8002c34:	e01a      	b.n	8002c6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c36:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002c38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3a:	4a08      	ldr	r2, [pc, #32]	; (8002c5c <HAL_RCC_OscConfig+0x280>)
 8002c3c:	f023 0301 	bic.w	r3, r3, #1
 8002c40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c42:	f7ff f8a5 	bl	8001d90 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c48:	e00a      	b.n	8002c60 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c4a:	f7ff f8a1 	bl	8001d90 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d903      	bls.n	8002c60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e15c      	b.n	8002f16 <HAL_RCC_OscConfig+0x53a>
 8002c5c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c60:	4b91      	ldr	r3, [pc, #580]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1ee      	bne.n	8002c4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80a4 	beq.w	8002dc2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c7a:	4b8b      	ldr	r3, [pc, #556]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10d      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c86:	4b88      	ldr	r3, [pc, #544]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	4a87      	ldr	r2, [pc, #540]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c90:	6413      	str	r3, [r2, #64]	; 0x40
 8002c92:	4b85      	ldr	r3, [pc, #532]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ca2:	4b82      	ldr	r3, [pc, #520]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d118      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002cae:	4b7f      	ldr	r3, [pc, #508]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a7e      	ldr	r2, [pc, #504]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cba:	f7ff f869 	bl	8001d90 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc2:	f7ff f865 	bl	8001d90 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b64      	cmp	r3, #100	; 0x64
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e120      	b.n	8002f16 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd4:	4b75      	ldr	r3, [pc, #468]	; (8002eac <HAL_RCC_OscConfig+0x4d0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d106      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x31a>
 8002ce8:	4b6f      	ldr	r3, [pc, #444]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cec:	4a6e      	ldr	r2, [pc, #440]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8002cf4:	e02d      	b.n	8002d52 <HAL_RCC_OscConfig+0x376>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x33c>
 8002cfe:	4b6a      	ldr	r3, [pc, #424]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d02:	4a69      	ldr	r2, [pc, #420]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002d04:	f023 0301 	bic.w	r3, r3, #1
 8002d08:	6713      	str	r3, [r2, #112]	; 0x70
 8002d0a:	4b67      	ldr	r3, [pc, #412]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0e:	4a66      	ldr	r2, [pc, #408]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002d10:	f023 0304 	bic.w	r3, r3, #4
 8002d14:	6713      	str	r3, [r2, #112]	; 0x70
 8002d16:	e01c      	b.n	8002d52 <HAL_RCC_OscConfig+0x376>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b05      	cmp	r3, #5
 8002d1e:	d10c      	bne.n	8002d3a <HAL_RCC_OscConfig+0x35e>
 8002d20:	4b61      	ldr	r3, [pc, #388]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	4a60      	ldr	r2, [pc, #384]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002d26:	f043 0304 	orr.w	r3, r3, #4
 8002d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2c:	4b5e      	ldr	r3, [pc, #376]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a5d      	ldr	r2, [pc, #372]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
 8002d38:	e00b      	b.n	8002d52 <HAL_RCC_OscConfig+0x376>
 8002d3a:	4b5b      	ldr	r3, [pc, #364]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	4a5a      	ldr	r2, [pc, #360]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002d40:	f023 0301 	bic.w	r3, r3, #1
 8002d44:	6713      	str	r3, [r2, #112]	; 0x70
 8002d46:	4b58      	ldr	r3, [pc, #352]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	4a57      	ldr	r2, [pc, #348]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002d4c:	f023 0304 	bic.w	r3, r3, #4
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d015      	beq.n	8002d86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5a:	f7ff f819 	bl	8001d90 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d60:	e00a      	b.n	8002d78 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d62:	f7ff f815 	bl	8001d90 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e0ce      	b.n	8002f16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d78:	4b4b      	ldr	r3, [pc, #300]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0ee      	beq.n	8002d62 <HAL_RCC_OscConfig+0x386>
 8002d84:	e014      	b.n	8002db0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d86:	f7ff f803 	bl	8001d90 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8e:	f7fe ffff 	bl	8001d90 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e0b8      	b.n	8002f16 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da4:	4b40      	ldr	r3, [pc, #256]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1ee      	bne.n	8002d8e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002db0:	7dfb      	ldrb	r3, [r7, #23]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d105      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db6:	4b3c      	ldr	r3, [pc, #240]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	4a3b      	ldr	r2, [pc, #236]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 80a4 	beq.w	8002f14 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dcc:	4b36      	ldr	r3, [pc, #216]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 030c 	and.w	r3, r3, #12
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d06b      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d149      	bne.n	8002e74 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de0:	4b31      	ldr	r3, [pc, #196]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a30      	ldr	r2, [pc, #192]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002de6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dec:	f7fe ffd0 	bl	8001d90 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fe ffcc 	bl	8001d90 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e087      	b.n	8002f16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e06:	4b28      	ldr	r3, [pc, #160]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69da      	ldr	r2, [r3, #28]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	019b      	lsls	r3, r3, #6
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	085b      	lsrs	r3, r3, #1
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	041b      	lsls	r3, r3, #16
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	061b      	lsls	r3, r3, #24
 8002e36:	4313      	orrs	r3, r2
 8002e38:	4a1b      	ldr	r2, [pc, #108]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002e3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e3e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a18      	ldr	r2, [pc, #96]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fe ffa0 	bl	8001d90 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fe ff9c 	bl	8001d90 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e057      	b.n	8002f16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0f0      	beq.n	8002e54 <HAL_RCC_OscConfig+0x478>
 8002e72:	e04f      	b.n	8002f14 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a0b      	ldr	r2, [pc, #44]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fe ff86 	bl	8001d90 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e88:	f7fe ff82 	bl	8001d90 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e03d      	b.n	8002f16 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e9a:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <HAL_RCC_OscConfig+0x4cc>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x4ac>
 8002ea6:	e035      	b.n	8002f14 <HAL_RCC_OscConfig+0x538>
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	; (8002f20 <HAL_RCC_OscConfig+0x544>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d028      	beq.n	8002f10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d121      	bne.n	8002f10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d11a      	bne.n	8002f10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ee6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d111      	bne.n	8002f10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	085b      	lsrs	r3, r3, #1
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d107      	bne.n	8002f10 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023800 	.word	0x40023800

08002f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0d0      	b.n	80030de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f3c:	4b6a      	ldr	r3, [pc, #424]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d910      	bls.n	8002f6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4a:	4b67      	ldr	r3, [pc, #412]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 020f 	bic.w	r2, r3, #15
 8002f52:	4965      	ldr	r1, [pc, #404]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5a:	4b63      	ldr	r3, [pc, #396]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0b8      	b.n	80030de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d020      	beq.n	8002fba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f84:	4b59      	ldr	r3, [pc, #356]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4a58      	ldr	r2, [pc, #352]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 8002f8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f8e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f9c:	4b53      	ldr	r3, [pc, #332]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	4a52      	ldr	r2, [pc, #328]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 8002fa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fa6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa8:	4b50      	ldr	r3, [pc, #320]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	494d      	ldr	r1, [pc, #308]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d040      	beq.n	8003048 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	4b47      	ldr	r3, [pc, #284]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d115      	bne.n	8003006 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e07f      	b.n	80030de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe6:	4b41      	ldr	r3, [pc, #260]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e073      	b.n	80030de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff6:	4b3d      	ldr	r3, [pc, #244]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e06b      	b.n	80030de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003006:	4b39      	ldr	r3, [pc, #228]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f023 0203 	bic.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4936      	ldr	r1, [pc, #216]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 8003014:	4313      	orrs	r3, r2
 8003016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003018:	f7fe feba 	bl	8001d90 <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	e00a      	b.n	8003036 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003020:	f7fe feb6 	bl	8001d90 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	; 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e053      	b.n	80030de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	4b2d      	ldr	r3, [pc, #180]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 020c 	and.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	429a      	cmp	r2, r3
 8003046:	d1eb      	bne.n	8003020 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003048:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d210      	bcs.n	8003078 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b24      	ldr	r3, [pc, #144]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 020f 	bic.w	r2, r3, #15
 800305e:	4922      	ldr	r1, [pc, #136]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b20      	ldr	r3, [pc, #128]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e032      	b.n	80030de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003084:	4b19      	ldr	r3, [pc, #100]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4916      	ldr	r1, [pc, #88]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 8003092:	4313      	orrs	r3, r2
 8003094:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d009      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030a2:	4b12      	ldr	r3, [pc, #72]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	490e      	ldr	r1, [pc, #56]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030b6:	f000 f821 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 80030ba:	4602      	mov	r2, r0
 80030bc:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	490a      	ldr	r1, [pc, #40]	; (80030f0 <HAL_RCC_ClockConfig+0x1cc>)
 80030c8:	5ccb      	ldrb	r3, [r1, r3]
 80030ca:	fa22 f303 	lsr.w	r3, r2, r3
 80030ce:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <HAL_RCC_ClockConfig+0x1d0>)
 80030d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <HAL_RCC_ClockConfig+0x1d4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe fe16 	bl	8001d08 <HAL_InitTick>

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40023c00 	.word	0x40023c00
 80030ec:	40023800 	.word	0x40023800
 80030f0:	08006aac 	.word	0x08006aac
 80030f4:	20000004 	.word	0x20000004
 80030f8:	20000008 	.word	0x20000008

080030fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003100:	b094      	sub	sp, #80	; 0x50
 8003102:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	647b      	str	r3, [r7, #68]	; 0x44
 8003108:	2300      	movs	r3, #0
 800310a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800310c:	2300      	movs	r3, #0
 800310e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003114:	4b79      	ldr	r3, [pc, #484]	; (80032fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 030c 	and.w	r3, r3, #12
 800311c:	2b08      	cmp	r3, #8
 800311e:	d00d      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0x40>
 8003120:	2b08      	cmp	r3, #8
 8003122:	f200 80e1 	bhi.w	80032e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x34>
 800312a:	2b04      	cmp	r3, #4
 800312c:	d003      	beq.n	8003136 <HAL_RCC_GetSysClockFreq+0x3a>
 800312e:	e0db      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003130:	4b73      	ldr	r3, [pc, #460]	; (8003300 <HAL_RCC_GetSysClockFreq+0x204>)
 8003132:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003134:	e0db      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003136:	4b73      	ldr	r3, [pc, #460]	; (8003304 <HAL_RCC_GetSysClockFreq+0x208>)
 8003138:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800313a:	e0d8      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800313c:	4b6f      	ldr	r3, [pc, #444]	; (80032fc <HAL_RCC_GetSysClockFreq+0x200>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003144:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003146:	4b6d      	ldr	r3, [pc, #436]	; (80032fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d063      	beq.n	800321a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003152:	4b6a      	ldr	r3, [pc, #424]	; (80032fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	099b      	lsrs	r3, r3, #6
 8003158:	2200      	movs	r2, #0
 800315a:	63bb      	str	r3, [r7, #56]	; 0x38
 800315c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800315e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003164:	633b      	str	r3, [r7, #48]	; 0x30
 8003166:	2300      	movs	r3, #0
 8003168:	637b      	str	r3, [r7, #52]	; 0x34
 800316a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800316e:	4622      	mov	r2, r4
 8003170:	462b      	mov	r3, r5
 8003172:	f04f 0000 	mov.w	r0, #0
 8003176:	f04f 0100 	mov.w	r1, #0
 800317a:	0159      	lsls	r1, r3, #5
 800317c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003180:	0150      	lsls	r0, r2, #5
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4621      	mov	r1, r4
 8003188:	1a51      	subs	r1, r2, r1
 800318a:	6139      	str	r1, [r7, #16]
 800318c:	4629      	mov	r1, r5
 800318e:	eb63 0301 	sbc.w	r3, r3, r1
 8003192:	617b      	str	r3, [r7, #20]
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	f04f 0300 	mov.w	r3, #0
 800319c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031a0:	4659      	mov	r1, fp
 80031a2:	018b      	lsls	r3, r1, #6
 80031a4:	4651      	mov	r1, sl
 80031a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031aa:	4651      	mov	r1, sl
 80031ac:	018a      	lsls	r2, r1, #6
 80031ae:	4651      	mov	r1, sl
 80031b0:	ebb2 0801 	subs.w	r8, r2, r1
 80031b4:	4659      	mov	r1, fp
 80031b6:	eb63 0901 	sbc.w	r9, r3, r1
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031ce:	4690      	mov	r8, r2
 80031d0:	4699      	mov	r9, r3
 80031d2:	4623      	mov	r3, r4
 80031d4:	eb18 0303 	adds.w	r3, r8, r3
 80031d8:	60bb      	str	r3, [r7, #8]
 80031da:	462b      	mov	r3, r5
 80031dc:	eb49 0303 	adc.w	r3, r9, r3
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031ee:	4629      	mov	r1, r5
 80031f0:	024b      	lsls	r3, r1, #9
 80031f2:	4621      	mov	r1, r4
 80031f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031f8:	4621      	mov	r1, r4
 80031fa:	024a      	lsls	r2, r1, #9
 80031fc:	4610      	mov	r0, r2
 80031fe:	4619      	mov	r1, r3
 8003200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003202:	2200      	movs	r2, #0
 8003204:	62bb      	str	r3, [r7, #40]	; 0x28
 8003206:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003208:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800320c:	f7fd f81a 	bl	8000244 <__aeabi_uldivmod>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4613      	mov	r3, r2
 8003216:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003218:	e058      	b.n	80032cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800321a:	4b38      	ldr	r3, [pc, #224]	; (80032fc <HAL_RCC_GetSysClockFreq+0x200>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	099b      	lsrs	r3, r3, #6
 8003220:	2200      	movs	r2, #0
 8003222:	4618      	mov	r0, r3
 8003224:	4611      	mov	r1, r2
 8003226:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800322a:	623b      	str	r3, [r7, #32]
 800322c:	2300      	movs	r3, #0
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
 8003230:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003234:	4642      	mov	r2, r8
 8003236:	464b      	mov	r3, r9
 8003238:	f04f 0000 	mov.w	r0, #0
 800323c:	f04f 0100 	mov.w	r1, #0
 8003240:	0159      	lsls	r1, r3, #5
 8003242:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003246:	0150      	lsls	r0, r2, #5
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4641      	mov	r1, r8
 800324e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003252:	4649      	mov	r1, r9
 8003254:	eb63 0b01 	sbc.w	fp, r3, r1
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003264:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003268:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800326c:	ebb2 040a 	subs.w	r4, r2, sl
 8003270:	eb63 050b 	sbc.w	r5, r3, fp
 8003274:	f04f 0200 	mov.w	r2, #0
 8003278:	f04f 0300 	mov.w	r3, #0
 800327c:	00eb      	lsls	r3, r5, #3
 800327e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003282:	00e2      	lsls	r2, r4, #3
 8003284:	4614      	mov	r4, r2
 8003286:	461d      	mov	r5, r3
 8003288:	4643      	mov	r3, r8
 800328a:	18e3      	adds	r3, r4, r3
 800328c:	603b      	str	r3, [r7, #0]
 800328e:	464b      	mov	r3, r9
 8003290:	eb45 0303 	adc.w	r3, r5, r3
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032a2:	4629      	mov	r1, r5
 80032a4:	028b      	lsls	r3, r1, #10
 80032a6:	4621      	mov	r1, r4
 80032a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032ac:	4621      	mov	r1, r4
 80032ae:	028a      	lsls	r2, r1, #10
 80032b0:	4610      	mov	r0, r2
 80032b2:	4619      	mov	r1, r3
 80032b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032b6:	2200      	movs	r2, #0
 80032b8:	61bb      	str	r3, [r7, #24]
 80032ba:	61fa      	str	r2, [r7, #28]
 80032bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032c0:	f7fc ffc0 	bl	8000244 <__aeabi_uldivmod>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4613      	mov	r3, r2
 80032ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_RCC_GetSysClockFreq+0x200>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	0c1b      	lsrs	r3, r3, #16
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	3301      	adds	r3, #1
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80032dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032e6:	e002      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <HAL_RCC_GetSysClockFreq+0x204>)
 80032ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80032ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3750      	adds	r7, #80	; 0x50
 80032f4:	46bd      	mov	sp, r7
 80032f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800
 8003300:	00f42400 	.word	0x00f42400
 8003304:	007a1200 	.word	0x007a1200

08003308 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800330c:	4b03      	ldr	r3, [pc, #12]	; (800331c <HAL_RCC_GetHCLKFreq+0x14>)
 800330e:	681b      	ldr	r3, [r3, #0]
}
 8003310:	4618      	mov	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20000004 	.word	0x20000004

08003320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003324:	f7ff fff0 	bl	8003308 <HAL_RCC_GetHCLKFreq>
 8003328:	4602      	mov	r2, r0
 800332a:	4b05      	ldr	r3, [pc, #20]	; (8003340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	0a9b      	lsrs	r3, r3, #10
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	4903      	ldr	r1, [pc, #12]	; (8003344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003336:	5ccb      	ldrb	r3, [r1, r3]
 8003338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800333c:	4618      	mov	r0, r3
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40023800 	.word	0x40023800
 8003344:	08006abc 	.word	0x08006abc

08003348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800334c:	f7ff ffdc 	bl	8003308 <HAL_RCC_GetHCLKFreq>
 8003350:	4602      	mov	r2, r0
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	0b5b      	lsrs	r3, r3, #13
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	4903      	ldr	r1, [pc, #12]	; (800336c <HAL_RCC_GetPCLK2Freq+0x24>)
 800335e:	5ccb      	ldrb	r3, [r1, r3]
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003364:	4618      	mov	r0, r3
 8003366:	bd80      	pop	{r7, pc}
 8003368:	40023800 	.word	0x40023800
 800336c:	08006abc 	.word	0x08006abc

08003370 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800337c:	2300      	movs	r3, #0
 800337e:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8003380:	2300      	movs	r3, #0
 8003382:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d012      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003394:	4b65      	ldr	r3, [pc, #404]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	4a64      	ldr	r2, [pc, #400]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800339a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800339e:	6093      	str	r3, [r2, #8]
 80033a0:	4b62      	ldr	r3, [pc, #392]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	4960      	ldr	r1, [pc, #384]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 80033b6:	2301      	movs	r3, #1
 80033b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d017      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033c6:	4b59      	ldr	r3, [pc, #356]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d4:	4955      	ldr	r1, [pc, #340]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033e4:	d101      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80033e6:	2301      	movs	r3, #1
 80033e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80033f2:	2301      	movs	r3, #1
 80033f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d017      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003402:	4b4a      	ldr	r3, [pc, #296]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003408:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	4946      	ldr	r1, [pc, #280]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003420:	d101      	bne.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8003422:	2301      	movs	r3, #1
 8003424:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800342e:	2301      	movs	r3, #1
 8003430:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 808b 	beq.w	8003556 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003440:	4b3a      	ldr	r3, [pc, #232]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	4a39      	ldr	r2, [pc, #228]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800344a:	6413      	str	r3, [r2, #64]	; 0x40
 800344c:	4b37      	ldr	r3, [pc, #220]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003458:	4b35      	ldr	r3, [pc, #212]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a34      	ldr	r2, [pc, #208]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800345e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003462:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003464:	f7fe fc94 	bl	8001d90 <HAL_GetTick>
 8003468:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800346a:	e008      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346c:	f7fe fc90 	bl	8001d90 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	; 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e2bc      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800347e:	4b2c      	ldr	r3, [pc, #176]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800348a:	4b28      	ldr	r3, [pc, #160]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003492:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d035      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d02e      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034a8:	4b20      	ldr	r3, [pc, #128]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034b2:	4b1e      	ldr	r3, [pc, #120]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	4a1d      	ldr	r2, [pc, #116]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034be:	4b1b      	ldr	r3, [pc, #108]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	4a1a      	ldr	r2, [pc, #104]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80034ca:	4a18      	ldr	r2, [pc, #96]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80034d0:	4b16      	ldr	r3, [pc, #88]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d114      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034dc:	f7fe fc58 	bl	8001d90 <HAL_GetTick>
 80034e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e2:	e00a      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e4:	f7fe fc54 	bl	8001d90 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e27e      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fa:	4b0c      	ldr	r3, [pc, #48]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0ee      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003512:	d111      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003520:	4b04      	ldr	r3, [pc, #16]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003522:	400b      	ands	r3, r1
 8003524:	4901      	ldr	r1, [pc, #4]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003526:	4313      	orrs	r3, r2
 8003528:	608b      	str	r3, [r1, #8]
 800352a:	e00b      	b.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800352c:	40023800 	.word	0x40023800
 8003530:	40007000 	.word	0x40007000
 8003534:	0ffffcff 	.word	0x0ffffcff
 8003538:	4ba4      	ldr	r3, [pc, #656]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	4aa3      	ldr	r2, [pc, #652]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800353e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003542:	6093      	str	r3, [r2, #8]
 8003544:	4ba1      	ldr	r3, [pc, #644]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003546:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003550:	499e      	ldr	r1, [pc, #632]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003552:	4313      	orrs	r3, r2
 8003554:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0310 	and.w	r3, r3, #16
 800355e:	2b00      	cmp	r3, #0
 8003560:	d010      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003562:	4b9a      	ldr	r3, [pc, #616]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003568:	4a98      	ldr	r2, [pc, #608]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800356a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800356e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003572:	4b96      	ldr	r3, [pc, #600]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003574:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	4993      	ldr	r1, [pc, #588]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003590:	4b8e      	ldr	r3, [pc, #568]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003596:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359e:	498b      	ldr	r1, [pc, #556]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80035b2:	4b86      	ldr	r3, [pc, #536]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c0:	4982      	ldr	r1, [pc, #520]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035d4:	4b7d      	ldr	r3, [pc, #500]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035e2:	497a      	ldr	r1, [pc, #488]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035f6:	4b75      	ldr	r3, [pc, #468]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80035f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fc:	f023 0203 	bic.w	r2, r3, #3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003604:	4971      	ldr	r1, [pc, #452]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003618:	4b6c      	ldr	r3, [pc, #432]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800361e:	f023 020c 	bic.w	r2, r3, #12
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	4969      	ldr	r1, [pc, #420]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800363a:	4b64      	ldr	r3, [pc, #400]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800363c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003640:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003648:	4960      	ldr	r1, [pc, #384]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800365c:	4b5b      	ldr	r3, [pc, #364]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800366a:	4958      	ldr	r1, [pc, #352]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800367e:	4b53      	ldr	r3, [pc, #332]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003684:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368c:	494f      	ldr	r1, [pc, #316]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80036a0:	4b4a      	ldr	r3, [pc, #296]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ae:	4947      	ldr	r1, [pc, #284]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80036c2:	4b42      	ldr	r3, [pc, #264]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d0:	493e      	ldr	r1, [pc, #248]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80036e4:	4b39      	ldr	r3, [pc, #228]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f2:	4936      	ldr	r1, [pc, #216]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d011      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003706:	4b31      	ldr	r3, [pc, #196]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003714:	492d      	ldr	r1, [pc, #180]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003720:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003724:	d101      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8003726:	2301      	movs	r3, #1
 8003728:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003736:	4b25      	ldr	r3, [pc, #148]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003744:	4921      	ldr	r1, [pc, #132]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003746:	4313      	orrs	r3, r2
 8003748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003758:	4b1c      	ldr	r3, [pc, #112]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800375a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003766:	4919      	ldr	r1, [pc, #100]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003768:	4313      	orrs	r3, r2
 800376a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800377a:	4b14      	ldr	r3, [pc, #80]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003780:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003788:	4910      	ldr	r1, [pc, #64]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d006      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 809d 	beq.w	80038de <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a08      	ldr	r2, [pc, #32]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80037aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b0:	f7fe faee 	bl	8001d90 <HAL_GetTick>
 80037b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037b6:	e00b      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80037b8:	f7fe faea 	bl	8001d90 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b64      	cmp	r3, #100	; 0x64
 80037c4:	d904      	bls.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e116      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80037d0:	4b8b      	ldr	r3, [pc, #556]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1ed      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d017      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d113      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037f0:	4b83      	ldr	r3, [pc, #524]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80037f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037f6:	0e1b      	lsrs	r3, r3, #24
 80037f8:	f003 030f 	and.w	r3, r3, #15
 80037fc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	019a      	lsls	r2, r3, #6
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	061b      	lsls	r3, r3, #24
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	071b      	lsls	r3, r3, #28
 8003810:	497b      	ldr	r1, [pc, #492]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d004      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003828:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800382c:	d00a      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003836:	2b00      	cmp	r3, #0
 8003838:	d024      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003842:	d11f      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003844:	4b6e      	ldr	r3, [pc, #440]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800384a:	0f1b      	lsrs	r3, r3, #28
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	019a      	lsls	r2, r3, #6
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	061b      	lsls	r3, r3, #24
 800385e:	431a      	orrs	r2, r3
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	071b      	lsls	r3, r3, #28
 8003864:	4966      	ldr	r1, [pc, #408]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800386c:	4b64      	ldr	r3, [pc, #400]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800386e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003872:	f023 021f 	bic.w	r2, r3, #31
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	3b01      	subs	r3, #1
 800387c:	4960      	ldr	r1, [pc, #384]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00d      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	019a      	lsls	r2, r3, #6
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	061b      	lsls	r3, r3, #24
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	071b      	lsls	r3, r3, #28
 80038a4:	4956      	ldr	r1, [pc, #344]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038ac:	4b54      	ldr	r3, [pc, #336]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a53      	ldr	r2, [pc, #332]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b8:	f7fe fa6a 	bl	8001d90 <HAL_GetTick>
 80038bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038c0:	f7fe fa66 	bl	8001d90 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	; 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e092      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038d2:	4b4b      	ldr	r3, [pc, #300]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	f040 8088 	bne.w	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80038e6:	4b46      	ldr	r3, [pc, #280]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a45      	ldr	r2, [pc, #276]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80038ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f2:	f7fe fa4d 	bl	8001d90 <HAL_GetTick>
 80038f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038fa:	f7fe fa49 	bl	8001d90 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b64      	cmp	r3, #100	; 0x64
 8003906:	d901      	bls.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e075      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800390c:	4b3c      	ldr	r3, [pc, #240]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003918:	d0ef      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003936:	2b00      	cmp	r3, #0
 8003938:	d024      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	2b00      	cmp	r3, #0
 8003940:	d120      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003942:	4b2f      	ldr	r3, [pc, #188]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003948:	0c1b      	lsrs	r3, r3, #16
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	019a      	lsls	r2, r3, #6
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	041b      	lsls	r3, r3, #16
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	061b      	lsls	r3, r3, #24
 8003962:	4927      	ldr	r1, [pc, #156]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800396a:	4b25      	ldr	r3, [pc, #148]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800396c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003970:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	3b01      	subs	r3, #1
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	4920      	ldr	r1, [pc, #128]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d018      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003998:	d113      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800399a:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800399c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a0:	0e1b      	lsrs	r3, r3, #24
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	019a      	lsls	r2, r3, #6
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	041b      	lsls	r3, r3, #16
 80039b4:	431a      	orrs	r2, r3
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	061b      	lsls	r3, r3, #24
 80039ba:	4911      	ldr	r1, [pc, #68]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039c2:	4b0f      	ldr	r3, [pc, #60]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a0e      	ldr	r2, [pc, #56]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80039c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039ce:	f7fe f9df 	bl	8001d90 <HAL_GetTick>
 80039d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039d4:	e008      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039d6:	f7fe f9db 	bl	8001d90 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b64      	cmp	r3, #100	; 0x64
 80039e2:	d901      	bls.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e007      	b.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f4:	d1ef      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3720      	adds	r7, #32
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40023800 	.word	0x40023800

08003a04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e09d      	b.n	8003b52 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d108      	bne.n	8003a30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a26:	d009      	beq.n	8003a3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	61da      	str	r2, [r3, #28]
 8003a2e:	e005      	b.n	8003a3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f7fd ff5e 	bl	8001918 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a7c:	d902      	bls.n	8003a84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
 8003a82:	e002      	b.n	8003a8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a92:	d007      	beq.n	8003aa4 <HAL_SPI_Init+0xa0>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a9c:	d002      	beq.n	8003aa4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae6:	ea42 0103 	orr.w	r1, r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	0c1b      	lsrs	r3, r3, #16
 8003b00:	f003 0204 	and.w	r2, r3, #4
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b20:	ea42 0103 	orr.w	r1, r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	69da      	ldr	r2, [r3, #28]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b088      	sub	sp, #32
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	603b      	str	r3, [r7, #0]
 8003b66:	4613      	mov	r3, r2
 8003b68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_SPI_Transmit+0x22>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e158      	b.n	8003e2e <HAL_SPI_Transmit+0x2d4>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b84:	f7fe f904 	bl	8001d90 <HAL_GetTick>
 8003b88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b8a:	88fb      	ldrh	r3, [r7, #6]
 8003b8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d002      	beq.n	8003ba0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b9e:	e13d      	b.n	8003e1c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <HAL_SPI_Transmit+0x52>
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d102      	bne.n	8003bb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bb0:	e134      	b.n	8003e1c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	88fa      	ldrh	r2, [r7, #6]
 8003bca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	88fa      	ldrh	r2, [r7, #6]
 8003bd0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bfc:	d10f      	bne.n	8003c1e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c28:	2b40      	cmp	r3, #64	; 0x40
 8003c2a:	d007      	beq.n	8003c3c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c44:	d94b      	bls.n	8003cde <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HAL_SPI_Transmit+0xfa>
 8003c4e:	8afb      	ldrh	r3, [r7, #22]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d13e      	bne.n	8003cd2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c58:	881a      	ldrh	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c64:	1c9a      	adds	r2, r3, #2
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c78:	e02b      	b.n	8003cd2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d112      	bne.n	8003cae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	881a      	ldrh	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	1c9a      	adds	r2, r3, #2
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cac:	e011      	b.n	8003cd2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cae:	f7fe f86f 	bl	8001d90 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d803      	bhi.n	8003cc6 <HAL_SPI_Transmit+0x16c>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc4:	d102      	bne.n	8003ccc <HAL_SPI_Transmit+0x172>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d102      	bne.n	8003cd2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cd0:	e0a4      	b.n	8003e1c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1ce      	bne.n	8003c7a <HAL_SPI_Transmit+0x120>
 8003cdc:	e07c      	b.n	8003dd8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <HAL_SPI_Transmit+0x192>
 8003ce6:	8afb      	ldrh	r3, [r7, #22]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d170      	bne.n	8003dce <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d912      	bls.n	8003d1c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	881a      	ldrh	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d06:	1c9a      	adds	r2, r3, #2
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b02      	subs	r3, #2
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d1a:	e058      	b.n	8003dce <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	330c      	adds	r3, #12
 8003d26:	7812      	ldrb	r2, [r2, #0]
 8003d28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003d42:	e044      	b.n	8003dce <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d12b      	bne.n	8003daa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d912      	bls.n	8003d82 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d60:	881a      	ldrh	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	1c9a      	adds	r2, r3, #2
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b02      	subs	r3, #2
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d80:	e025      	b.n	8003dce <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	330c      	adds	r3, #12
 8003d8c:	7812      	ldrb	r2, [r2, #0]
 8003d8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003da8:	e011      	b.n	8003dce <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003daa:	f7fd fff1 	bl	8001d90 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d803      	bhi.n	8003dc2 <HAL_SPI_Transmit+0x268>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc0:	d102      	bne.n	8003dc8 <HAL_SPI_Transmit+0x26e>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d102      	bne.n	8003dce <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003dcc:	e026      	b.n	8003e1c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1b5      	bne.n	8003d44 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	6839      	ldr	r1, [r7, #0]
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 f949 	bl	8004074 <SPI_EndRxTxTransaction>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10a      	bne.n	8003e0c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	77fb      	strb	r3, [r7, #31]
 8003e18:	e000      	b.n	8003e1c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003e1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	4613      	mov	r3, r2
 8003e46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e48:	f7fd ffa2 	bl	8001d90 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	4413      	add	r3, r2
 8003e56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e58:	f7fd ff9a 	bl	8001d90 <HAL_GetTick>
 8003e5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e5e:	4b39      	ldr	r3, [pc, #228]	; (8003f44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	015b      	lsls	r3, r3, #5
 8003e64:	0d1b      	lsrs	r3, r3, #20
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	fb02 f303 	mul.w	r3, r2, r3
 8003e6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e6e:	e054      	b.n	8003f1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e76:	d050      	beq.n	8003f1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e78:	f7fd ff8a 	bl	8001d90 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	69fa      	ldr	r2, [r7, #28]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d902      	bls.n	8003e8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d13d      	bne.n	8003f0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea6:	d111      	bne.n	8003ecc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eb0:	d004      	beq.n	8003ebc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eba:	d107      	bne.n	8003ecc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed4:	d10f      	bne.n	8003ef6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ef4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e017      	b.n	8003f3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f10:	2300      	movs	r3, #0
 8003f12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4013      	ands	r3, r2
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	bf0c      	ite	eq
 8003f2a:	2301      	moveq	r3, #1
 8003f2c:	2300      	movne	r3, #0
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	461a      	mov	r2, r3
 8003f32:	79fb      	ldrb	r3, [r7, #7]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d19b      	bne.n	8003e70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20000004 	.word	0x20000004

08003f48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08a      	sub	sp, #40	; 0x28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f5a:	f7fd ff19 	bl	8001d90 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f62:	1a9b      	subs	r3, r3, r2
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	4413      	add	r3, r2
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003f6a:	f7fd ff11 	bl	8001d90 <HAL_GetTick>
 8003f6e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	330c      	adds	r3, #12
 8003f76:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f78:	4b3d      	ldr	r3, [pc, #244]	; (8004070 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	00da      	lsls	r2, r3, #3
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	0d1b      	lsrs	r3, r3, #20
 8003f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f90:	e060      	b.n	8004054 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f98:	d107      	bne.n	8003faa <SPI_WaitFifoStateUntilTimeout+0x62>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d104      	bne.n	8003faa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003fa8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb0:	d050      	beq.n	8004054 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fb2:	f7fd feed 	bl	8001d90 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d902      	bls.n	8003fc8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d13d      	bne.n	8004044 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fd6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fe0:	d111      	bne.n	8004006 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fea:	d004      	beq.n	8003ff6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff4:	d107      	bne.n	8004006 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004004:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800400e:	d10f      	bne.n	8004030 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800402e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e010      	b.n	8004066 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	3b01      	subs	r3, #1
 8004052:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	4013      	ands	r3, r2
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	429a      	cmp	r2, r3
 8004062:	d196      	bne.n	8003f92 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3728      	adds	r7, #40	; 0x28
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20000004 	.word	0x20000004

08004074 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af02      	add	r7, sp, #8
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2200      	movs	r2, #0
 8004088:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f7ff ff5b 	bl	8003f48 <SPI_WaitFifoStateUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d007      	beq.n	80040a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e046      	b.n	8004136 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040a8:	4b25      	ldr	r3, [pc, #148]	; (8004140 <SPI_EndRxTxTransaction+0xcc>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a25      	ldr	r2, [pc, #148]	; (8004144 <SPI_EndRxTxTransaction+0xd0>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	0d5b      	lsrs	r3, r3, #21
 80040b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040b8:	fb02 f303 	mul.w	r3, r2, r3
 80040bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040c6:	d112      	bne.n	80040ee <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2200      	movs	r2, #0
 80040d0:	2180      	movs	r1, #128	; 0x80
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f7ff feb0 	bl	8003e38 <SPI_WaitFlagStateUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d016      	beq.n	800410c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e2:	f043 0220 	orr.w	r2, r3, #32
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e023      	b.n	8004136 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004104:	2b80      	cmp	r3, #128	; 0x80
 8004106:	d0f2      	beq.n	80040ee <SPI_EndRxTxTransaction+0x7a>
 8004108:	e000      	b.n	800410c <SPI_EndRxTxTransaction+0x98>
        break;
 800410a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2200      	movs	r2, #0
 8004114:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f7ff ff15 	bl	8003f48 <SPI_WaitFifoStateUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d007      	beq.n	8004134 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004128:	f043 0220 	orr.w	r2, r3, #32
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e000      	b.n	8004136 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20000004 	.word	0x20000004
 8004144:	165e9f81 	.word	0x165e9f81

08004148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e049      	b.n	80041ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fd fc16 	bl	80019a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	3304      	adds	r3, #4
 8004184:	4619      	mov	r1, r3
 8004186:	4610      	mov	r0, r2
 8004188:	f000 f9f6 	bl	8004578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	d001      	beq.n	8004210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e054      	b.n	80042ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a26      	ldr	r2, [pc, #152]	; (80042c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d022      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423a:	d01d      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a22      	ldr	r2, [pc, #136]	; (80042cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d018      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a21      	ldr	r2, [pc, #132]	; (80042d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d013      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a1f      	ldr	r2, [pc, #124]	; (80042d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00e      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a1e      	ldr	r2, [pc, #120]	; (80042d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d009      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1c      	ldr	r2, [pc, #112]	; (80042dc <HAL_TIM_Base_Start_IT+0xe4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d004      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1b      	ldr	r2, [pc, #108]	; (80042e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d115      	bne.n	80042a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <HAL_TIM_Base_Start_IT+0xec>)
 8004280:	4013      	ands	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b06      	cmp	r3, #6
 8004288:	d015      	beq.n	80042b6 <HAL_TIM_Base_Start_IT+0xbe>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004290:	d011      	beq.n	80042b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 0201 	orr.w	r2, r2, #1
 80042a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a2:	e008      	b.n	80042b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0201 	orr.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	e000      	b.n	80042b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40010000 	.word	0x40010000
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800
 80042d4:	40000c00 	.word	0x40000c00
 80042d8:	40010400 	.word	0x40010400
 80042dc:	40014000 	.word	0x40014000
 80042e0:	40001800 	.word	0x40001800
 80042e4:	00010007 	.word	0x00010007

080042e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d122      	bne.n	8004344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b02      	cmp	r3, #2
 800430a:	d11b      	bne.n	8004344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f06f 0202 	mvn.w	r2, #2
 8004314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f905 	bl	800453a <HAL_TIM_IC_CaptureCallback>
 8004330:	e005      	b.n	800433e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f8f7 	bl	8004526 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f908 	bl	800454e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b04      	cmp	r3, #4
 8004350:	d122      	bne.n	8004398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b04      	cmp	r3, #4
 800435e:	d11b      	bne.n	8004398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0204 	mvn.w	r2, #4
 8004368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2202      	movs	r2, #2
 800436e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f8db 	bl	800453a <HAL_TIM_IC_CaptureCallback>
 8004384:	e005      	b.n	8004392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f8cd 	bl	8004526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f8de 	bl	800454e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d122      	bne.n	80043ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d11b      	bne.n	80043ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0208 	mvn.w	r2, #8
 80043bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2204      	movs	r2, #4
 80043c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f8b1 	bl	800453a <HAL_TIM_IC_CaptureCallback>
 80043d8:	e005      	b.n	80043e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f8a3 	bl	8004526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f8b4 	bl	800454e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d122      	bne.n	8004440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	2b10      	cmp	r3, #16
 8004406:	d11b      	bne.n	8004440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0210 	mvn.w	r2, #16
 8004410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2208      	movs	r2, #8
 8004416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f887 	bl	800453a <HAL_TIM_IC_CaptureCallback>
 800442c:	e005      	b.n	800443a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f879 	bl	8004526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f88a 	bl	800454e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b01      	cmp	r3, #1
 800444c:	d10e      	bne.n	800446c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b01      	cmp	r3, #1
 800445a:	d107      	bne.n	800446c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0201 	mvn.w	r2, #1
 8004464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fd f952 	bl	8001710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004476:	2b80      	cmp	r3, #128	; 0x80
 8004478:	d10e      	bne.n	8004498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004484:	2b80      	cmp	r3, #128	; 0x80
 8004486:	d107      	bne.n	8004498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f91a 	bl	80046cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a6:	d10e      	bne.n	80044c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b2:	2b80      	cmp	r3, #128	; 0x80
 80044b4:	d107      	bne.n	80044c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f90d 	bl	80046e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d0:	2b40      	cmp	r3, #64	; 0x40
 80044d2:	d10e      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044de:	2b40      	cmp	r3, #64	; 0x40
 80044e0:	d107      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f838 	bl	8004562 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d10e      	bne.n	800451e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b20      	cmp	r3, #32
 800450c:	d107      	bne.n	800451e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f06f 0220 	mvn.w	r2, #32
 8004516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f8cd 	bl	80046b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800451e:	bf00      	nop
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
	...

08004578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a40      	ldr	r2, [pc, #256]	; (800468c <TIM_Base_SetConfig+0x114>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d013      	beq.n	80045b8 <TIM_Base_SetConfig+0x40>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004596:	d00f      	beq.n	80045b8 <TIM_Base_SetConfig+0x40>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a3d      	ldr	r2, [pc, #244]	; (8004690 <TIM_Base_SetConfig+0x118>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d00b      	beq.n	80045b8 <TIM_Base_SetConfig+0x40>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a3c      	ldr	r2, [pc, #240]	; (8004694 <TIM_Base_SetConfig+0x11c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d007      	beq.n	80045b8 <TIM_Base_SetConfig+0x40>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a3b      	ldr	r2, [pc, #236]	; (8004698 <TIM_Base_SetConfig+0x120>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d003      	beq.n	80045b8 <TIM_Base_SetConfig+0x40>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a3a      	ldr	r2, [pc, #232]	; (800469c <TIM_Base_SetConfig+0x124>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d108      	bne.n	80045ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a2f      	ldr	r2, [pc, #188]	; (800468c <TIM_Base_SetConfig+0x114>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d02b      	beq.n	800462a <TIM_Base_SetConfig+0xb2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d8:	d027      	beq.n	800462a <TIM_Base_SetConfig+0xb2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a2c      	ldr	r2, [pc, #176]	; (8004690 <TIM_Base_SetConfig+0x118>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d023      	beq.n	800462a <TIM_Base_SetConfig+0xb2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a2b      	ldr	r2, [pc, #172]	; (8004694 <TIM_Base_SetConfig+0x11c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d01f      	beq.n	800462a <TIM_Base_SetConfig+0xb2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a2a      	ldr	r2, [pc, #168]	; (8004698 <TIM_Base_SetConfig+0x120>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d01b      	beq.n	800462a <TIM_Base_SetConfig+0xb2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a29      	ldr	r2, [pc, #164]	; (800469c <TIM_Base_SetConfig+0x124>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d017      	beq.n	800462a <TIM_Base_SetConfig+0xb2>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a28      	ldr	r2, [pc, #160]	; (80046a0 <TIM_Base_SetConfig+0x128>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d013      	beq.n	800462a <TIM_Base_SetConfig+0xb2>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a27      	ldr	r2, [pc, #156]	; (80046a4 <TIM_Base_SetConfig+0x12c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d00f      	beq.n	800462a <TIM_Base_SetConfig+0xb2>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a26      	ldr	r2, [pc, #152]	; (80046a8 <TIM_Base_SetConfig+0x130>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d00b      	beq.n	800462a <TIM_Base_SetConfig+0xb2>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a25      	ldr	r2, [pc, #148]	; (80046ac <TIM_Base_SetConfig+0x134>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d007      	beq.n	800462a <TIM_Base_SetConfig+0xb2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a24      	ldr	r2, [pc, #144]	; (80046b0 <TIM_Base_SetConfig+0x138>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d003      	beq.n	800462a <TIM_Base_SetConfig+0xb2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a23      	ldr	r2, [pc, #140]	; (80046b4 <TIM_Base_SetConfig+0x13c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d108      	bne.n	800463c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a0a      	ldr	r2, [pc, #40]	; (800468c <TIM_Base_SetConfig+0x114>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d003      	beq.n	8004670 <TIM_Base_SetConfig+0xf8>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a0c      	ldr	r2, [pc, #48]	; (800469c <TIM_Base_SetConfig+0x124>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d103      	bne.n	8004678 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	615a      	str	r2, [r3, #20]
}
 800467e:	bf00      	nop
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40010000 	.word	0x40010000
 8004690:	40000400 	.word	0x40000400
 8004694:	40000800 	.word	0x40000800
 8004698:	40000c00 	.word	0x40000c00
 800469c:	40010400 	.word	0x40010400
 80046a0:	40014000 	.word	0x40014000
 80046a4:	40014400 	.word	0x40014400
 80046a8:	40014800 	.word	0x40014800
 80046ac:	40001800 	.word	0x40001800
 80046b0:	40001c00 	.word	0x40001c00
 80046b4:	40002000 	.word	0x40002000

080046b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e040      	b.n	8004788 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7fd f984 	bl	8001a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2224      	movs	r2, #36	; 0x24
 8004720:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0201 	bic.w	r2, r2, #1
 8004730:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 fbdc 	bl	8004ef0 <UART_SetConfig>
 8004738:	4603      	mov	r3, r0
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e022      	b.n	8004788 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fe34 	bl	80053b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800475e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800476e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 febb 	bl	80054fc <UART_CheckIdleState>
 8004786:	4603      	mov	r3, r0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08a      	sub	sp, #40	; 0x28
 8004794:	af02      	add	r7, sp, #8
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	603b      	str	r3, [r7, #0]
 800479c:	4613      	mov	r3, r2
 800479e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047a4:	2b20      	cmp	r3, #32
 80047a6:	d171      	bne.n	800488c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d002      	beq.n	80047b4 <HAL_UART_Transmit+0x24>
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e06a      	b.n	800488e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2221      	movs	r2, #33	; 0x21
 80047c4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047c6:	f7fd fae3 	bl	8001d90 <HAL_GetTick>
 80047ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	88fa      	ldrh	r2, [r7, #6]
 80047d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	88fa      	ldrh	r2, [r7, #6]
 80047d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e4:	d108      	bne.n	80047f8 <HAL_UART_Transmit+0x68>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d104      	bne.n	80047f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	61bb      	str	r3, [r7, #24]
 80047f6:	e003      	b.n	8004800 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004800:	e02c      	b.n	800485c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2200      	movs	r2, #0
 800480a:	2180      	movs	r1, #128	; 0x80
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 feac 	bl	800556a <UART_WaitOnFlagUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e038      	b.n	800488e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10b      	bne.n	800483a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004830:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	3302      	adds	r3, #2
 8004836:	61bb      	str	r3, [r7, #24]
 8004838:	e007      	b.n	800484a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	781a      	ldrb	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	3301      	adds	r3, #1
 8004848:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004850:	b29b      	uxth	r3, r3
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004862:	b29b      	uxth	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1cc      	bne.n	8004802 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2200      	movs	r2, #0
 8004870:	2140      	movs	r1, #64	; 0x40
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 fe79 	bl	800556a <UART_WaitOnFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e005      	b.n	800488e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2220      	movs	r2, #32
 8004886:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	e000      	b.n	800488e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800488c:	2302      	movs	r3, #2
  }
}
 800488e:	4618      	mov	r0, r3
 8004890:	3720      	adds	r7, #32
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b08a      	sub	sp, #40	; 0x28
 800489a:	af00      	add	r7, sp, #0
 800489c:	60f8      	str	r0, [r7, #12]
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	4613      	mov	r3, r2
 80048a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d132      	bne.n	8004914 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_UART_Receive_IT+0x24>
 80048b4:	88fb      	ldrh	r3, [r7, #6]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e02b      	b.n	8004916 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2200      	movs	r2, #0
 80048c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d018      	beq.n	8004904 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	e853 3f00 	ldrex	r3, [r3]
 80048de:	613b      	str	r3, [r7, #16]
   return(result);
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048e6:	627b      	str	r3, [r7, #36]	; 0x24
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	461a      	mov	r2, r3
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	623b      	str	r3, [r7, #32]
 80048f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f4:	69f9      	ldr	r1, [r7, #28]
 80048f6:	6a3a      	ldr	r2, [r7, #32]
 80048f8:	e841 2300 	strex	r3, r2, [r1]
 80048fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e6      	bne.n	80048d2 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004904:	88fb      	ldrh	r3, [r7, #6]
 8004906:	461a      	mov	r2, r3
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 fef4 	bl	80056f8 <UART_Start_Receive_IT>
 8004910:	4603      	mov	r3, r0
 8004912:	e000      	b.n	8004916 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004914:	2302      	movs	r3, #2
  }
}
 8004916:	4618      	mov	r0, r3
 8004918:	3728      	adds	r7, #40	; 0x28
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b0ba      	sub	sp, #232	; 0xe8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004946:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800494a:	f640 030f 	movw	r3, #2063	; 0x80f
 800494e:	4013      	ands	r3, r2
 8004950:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004958:	2b00      	cmp	r3, #0
 800495a:	d115      	bne.n	8004988 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800495c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00f      	beq.n	8004988 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b00      	cmp	r3, #0
 8004972:	d009      	beq.n	8004988 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 8297 	beq.w	8004eac <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	4798      	blx	r3
      }
      return;
 8004986:	e291      	b.n	8004eac <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004988:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8117 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d106      	bne.n	80049ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800499e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80049a2:	4b85      	ldr	r3, [pc, #532]	; (8004bb8 <HAL_UART_IRQHandler+0x298>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 810a 	beq.w	8004bc0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d011      	beq.n	80049dc <HAL_UART_IRQHandler+0xbc>
 80049b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00b      	beq.n	80049dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2201      	movs	r2, #1
 80049ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049d2:	f043 0201 	orr.w	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d011      	beq.n	8004a0c <HAL_UART_IRQHandler+0xec>
 80049e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00b      	beq.n	8004a0c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2202      	movs	r2, #2
 80049fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a02:	f043 0204 	orr.w	r2, r3, #4
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d011      	beq.n	8004a3c <HAL_UART_IRQHandler+0x11c>
 8004a18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00b      	beq.n	8004a3c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2204      	movs	r2, #4
 8004a2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a32:	f043 0202 	orr.w	r2, r3, #2
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d017      	beq.n	8004a78 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a4c:	f003 0320 	and.w	r3, r3, #32
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d105      	bne.n	8004a60 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a58:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00b      	beq.n	8004a78 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2208      	movs	r2, #8
 8004a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a6e:	f043 0208 	orr.w	r2, r3, #8
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d012      	beq.n	8004aaa <HAL_UART_IRQHandler+0x18a>
 8004a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00c      	beq.n	8004aaa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa0:	f043 0220 	orr.w	r2, r3, #32
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 81fd 	beq.w	8004eb0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00d      	beq.n	8004ade <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d005      	beq.n	8004b02 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004afa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d04f      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 febe 	bl	8005884 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b12:	2b40      	cmp	r3, #64	; 0x40
 8004b14:	d141      	bne.n	8004b9a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b24:	e853 3f00 	ldrex	r3, [r3]
 8004b28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3308      	adds	r3, #8
 8004b3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004b42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004b46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004b4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1d9      	bne.n	8004b16 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d013      	beq.n	8004b92 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b6e:	4a13      	ldr	r2, [pc, #76]	; (8004bbc <HAL_UART_IRQHandler+0x29c>)
 8004b70:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fd fb7e 	bl	8002278 <HAL_DMA_Abort_IT>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d017      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b90:	e00f      	b.n	8004bb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f996 	bl	8004ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b98:	e00b      	b.n	8004bb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f992 	bl	8004ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba0:	e007      	b.n	8004bb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f98e 	bl	8004ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004bb0:	e17e      	b.n	8004eb0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb2:	bf00      	nop
    return;
 8004bb4:	e17c      	b.n	8004eb0 <HAL_UART_IRQHandler+0x590>
 8004bb6:	bf00      	nop
 8004bb8:	04000120 	.word	0x04000120
 8004bbc:	0800594d 	.word	0x0800594d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	f040 814c 	bne.w	8004e62 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bce:	f003 0310 	and.w	r3, r3, #16
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 8145 	beq.w	8004e62 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 813e 	beq.w	8004e62 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2210      	movs	r2, #16
 8004bec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf8:	2b40      	cmp	r3, #64	; 0x40
 8004bfa:	f040 80b6 	bne.w	8004d6a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 8150 	beq.w	8004eb4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	f080 8148 	bcs.w	8004eb4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004c2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c38:	f000 8086 	beq.w	8004d48 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004c6a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004c72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1da      	bne.n	8004c3c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3308      	adds	r3, #8
 8004c8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c90:	e853 3f00 	ldrex	r3, [r3]
 8004c94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c98:	f023 0301 	bic.w	r3, r3, #1
 8004c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004caa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004cae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004cb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004cbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e1      	bne.n	8004c86 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3308      	adds	r3, #8
 8004ce2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ce6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ce8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004cec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004cee:	e841 2300 	strex	r3, r2, [r1]
 8004cf2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1e3      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d10:	e853 3f00 	ldrex	r3, [r3]
 8004d14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d18:	f023 0310 	bic.w	r3, r3, #16
 8004d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	461a      	mov	r2, r3
 8004d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004d2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e4      	bne.n	8004d08 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fd fa28 	bl	8002198 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	4619      	mov	r1, r3
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f8b8 	bl	8004ed8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d68:	e0a4      	b.n	8004eb4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 8096 	beq.w	8004eb8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004d8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 8091 	beq.w	8004eb8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9e:	e853 3f00 	ldrex	r3, [r3]
 8004da2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004daa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004db8:	647b      	str	r3, [r7, #68]	; 0x44
 8004dba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004dbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dc0:	e841 2300 	strex	r3, r2, [r1]
 8004dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e4      	bne.n	8004d96 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	623b      	str	r3, [r7, #32]
   return(result);
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3308      	adds	r3, #8
 8004dec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004df0:	633a      	str	r2, [r7, #48]	; 0x30
 8004df2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004df8:	e841 2300 	strex	r3, r2, [r1]
 8004dfc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e3      	bne.n	8004dcc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	e853 3f00 	ldrex	r3, [r3]
 8004e24:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f023 0310 	bic.w	r3, r3, #16
 8004e2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	461a      	mov	r2, r3
 8004e36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004e3a:	61fb      	str	r3, [r7, #28]
 8004e3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3e:	69b9      	ldr	r1, [r7, #24]
 8004e40:	69fa      	ldr	r2, [r7, #28]
 8004e42:	e841 2300 	strex	r3, r2, [r1]
 8004e46:	617b      	str	r3, [r7, #20]
   return(result);
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1e4      	bne.n	8004e18 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2202      	movs	r2, #2
 8004e52:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e58:	4619      	mov	r1, r3
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f83c 	bl	8004ed8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e60:	e02a      	b.n	8004eb8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00e      	beq.n	8004e8c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d008      	beq.n	8004e8c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d01c      	beq.n	8004ebc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	4798      	blx	r3
    }
    return;
 8004e8a:	e017      	b.n	8004ebc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d012      	beq.n	8004ebe <HAL_UART_IRQHandler+0x59e>
 8004e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00c      	beq.n	8004ebe <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fd67 	bl	8005978 <UART_EndTransmit_IT>
    return;
 8004eaa:	e008      	b.n	8004ebe <HAL_UART_IRQHandler+0x59e>
      return;
 8004eac:	bf00      	nop
 8004eae:	e006      	b.n	8004ebe <HAL_UART_IRQHandler+0x59e>
    return;
 8004eb0:	bf00      	nop
 8004eb2:	e004      	b.n	8004ebe <HAL_UART_IRQHandler+0x59e>
      return;
 8004eb4:	bf00      	nop
 8004eb6:	e002      	b.n	8004ebe <HAL_UART_IRQHandler+0x59e>
      return;
 8004eb8:	bf00      	nop
 8004eba:	e000      	b.n	8004ebe <HAL_UART_IRQHandler+0x59e>
    return;
 8004ebc:	bf00      	nop
  }

}
 8004ebe:	37e8      	adds	r7, #232	; 0xe8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	4ba6      	ldr	r3, [pc, #664]	; (80051b4 <UART_SetConfig+0x2c4>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	6979      	ldr	r1, [r7, #20]
 8004f24:	430b      	orrs	r3, r1
 8004f26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a94      	ldr	r2, [pc, #592]	; (80051b8 <UART_SetConfig+0x2c8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d120      	bne.n	8004fae <UART_SetConfig+0xbe>
 8004f6c:	4b93      	ldr	r3, [pc, #588]	; (80051bc <UART_SetConfig+0x2cc>)
 8004f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d816      	bhi.n	8004fa8 <UART_SetConfig+0xb8>
 8004f7a:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <UART_SetConfig+0x90>)
 8004f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f80:	08004f91 	.word	0x08004f91
 8004f84:	08004f9d 	.word	0x08004f9d
 8004f88:	08004f97 	.word	0x08004f97
 8004f8c:	08004fa3 	.word	0x08004fa3
 8004f90:	2301      	movs	r3, #1
 8004f92:	77fb      	strb	r3, [r7, #31]
 8004f94:	e150      	b.n	8005238 <UART_SetConfig+0x348>
 8004f96:	2302      	movs	r3, #2
 8004f98:	77fb      	strb	r3, [r7, #31]
 8004f9a:	e14d      	b.n	8005238 <UART_SetConfig+0x348>
 8004f9c:	2304      	movs	r3, #4
 8004f9e:	77fb      	strb	r3, [r7, #31]
 8004fa0:	e14a      	b.n	8005238 <UART_SetConfig+0x348>
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	77fb      	strb	r3, [r7, #31]
 8004fa6:	e147      	b.n	8005238 <UART_SetConfig+0x348>
 8004fa8:	2310      	movs	r3, #16
 8004faa:	77fb      	strb	r3, [r7, #31]
 8004fac:	e144      	b.n	8005238 <UART_SetConfig+0x348>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a83      	ldr	r2, [pc, #524]	; (80051c0 <UART_SetConfig+0x2d0>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d132      	bne.n	800501e <UART_SetConfig+0x12e>
 8004fb8:	4b80      	ldr	r3, [pc, #512]	; (80051bc <UART_SetConfig+0x2cc>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbe:	f003 030c 	and.w	r3, r3, #12
 8004fc2:	2b0c      	cmp	r3, #12
 8004fc4:	d828      	bhi.n	8005018 <UART_SetConfig+0x128>
 8004fc6:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <UART_SetConfig+0xdc>)
 8004fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fcc:	08005001 	.word	0x08005001
 8004fd0:	08005019 	.word	0x08005019
 8004fd4:	08005019 	.word	0x08005019
 8004fd8:	08005019 	.word	0x08005019
 8004fdc:	0800500d 	.word	0x0800500d
 8004fe0:	08005019 	.word	0x08005019
 8004fe4:	08005019 	.word	0x08005019
 8004fe8:	08005019 	.word	0x08005019
 8004fec:	08005007 	.word	0x08005007
 8004ff0:	08005019 	.word	0x08005019
 8004ff4:	08005019 	.word	0x08005019
 8004ff8:	08005019 	.word	0x08005019
 8004ffc:	08005013 	.word	0x08005013
 8005000:	2300      	movs	r3, #0
 8005002:	77fb      	strb	r3, [r7, #31]
 8005004:	e118      	b.n	8005238 <UART_SetConfig+0x348>
 8005006:	2302      	movs	r3, #2
 8005008:	77fb      	strb	r3, [r7, #31]
 800500a:	e115      	b.n	8005238 <UART_SetConfig+0x348>
 800500c:	2304      	movs	r3, #4
 800500e:	77fb      	strb	r3, [r7, #31]
 8005010:	e112      	b.n	8005238 <UART_SetConfig+0x348>
 8005012:	2308      	movs	r3, #8
 8005014:	77fb      	strb	r3, [r7, #31]
 8005016:	e10f      	b.n	8005238 <UART_SetConfig+0x348>
 8005018:	2310      	movs	r3, #16
 800501a:	77fb      	strb	r3, [r7, #31]
 800501c:	e10c      	b.n	8005238 <UART_SetConfig+0x348>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a68      	ldr	r2, [pc, #416]	; (80051c4 <UART_SetConfig+0x2d4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d120      	bne.n	800506a <UART_SetConfig+0x17a>
 8005028:	4b64      	ldr	r3, [pc, #400]	; (80051bc <UART_SetConfig+0x2cc>)
 800502a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005032:	2b30      	cmp	r3, #48	; 0x30
 8005034:	d013      	beq.n	800505e <UART_SetConfig+0x16e>
 8005036:	2b30      	cmp	r3, #48	; 0x30
 8005038:	d814      	bhi.n	8005064 <UART_SetConfig+0x174>
 800503a:	2b20      	cmp	r3, #32
 800503c:	d009      	beq.n	8005052 <UART_SetConfig+0x162>
 800503e:	2b20      	cmp	r3, #32
 8005040:	d810      	bhi.n	8005064 <UART_SetConfig+0x174>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <UART_SetConfig+0x15c>
 8005046:	2b10      	cmp	r3, #16
 8005048:	d006      	beq.n	8005058 <UART_SetConfig+0x168>
 800504a:	e00b      	b.n	8005064 <UART_SetConfig+0x174>
 800504c:	2300      	movs	r3, #0
 800504e:	77fb      	strb	r3, [r7, #31]
 8005050:	e0f2      	b.n	8005238 <UART_SetConfig+0x348>
 8005052:	2302      	movs	r3, #2
 8005054:	77fb      	strb	r3, [r7, #31]
 8005056:	e0ef      	b.n	8005238 <UART_SetConfig+0x348>
 8005058:	2304      	movs	r3, #4
 800505a:	77fb      	strb	r3, [r7, #31]
 800505c:	e0ec      	b.n	8005238 <UART_SetConfig+0x348>
 800505e:	2308      	movs	r3, #8
 8005060:	77fb      	strb	r3, [r7, #31]
 8005062:	e0e9      	b.n	8005238 <UART_SetConfig+0x348>
 8005064:	2310      	movs	r3, #16
 8005066:	77fb      	strb	r3, [r7, #31]
 8005068:	e0e6      	b.n	8005238 <UART_SetConfig+0x348>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a56      	ldr	r2, [pc, #344]	; (80051c8 <UART_SetConfig+0x2d8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d120      	bne.n	80050b6 <UART_SetConfig+0x1c6>
 8005074:	4b51      	ldr	r3, [pc, #324]	; (80051bc <UART_SetConfig+0x2cc>)
 8005076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800507e:	2bc0      	cmp	r3, #192	; 0xc0
 8005080:	d013      	beq.n	80050aa <UART_SetConfig+0x1ba>
 8005082:	2bc0      	cmp	r3, #192	; 0xc0
 8005084:	d814      	bhi.n	80050b0 <UART_SetConfig+0x1c0>
 8005086:	2b80      	cmp	r3, #128	; 0x80
 8005088:	d009      	beq.n	800509e <UART_SetConfig+0x1ae>
 800508a:	2b80      	cmp	r3, #128	; 0x80
 800508c:	d810      	bhi.n	80050b0 <UART_SetConfig+0x1c0>
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <UART_SetConfig+0x1a8>
 8005092:	2b40      	cmp	r3, #64	; 0x40
 8005094:	d006      	beq.n	80050a4 <UART_SetConfig+0x1b4>
 8005096:	e00b      	b.n	80050b0 <UART_SetConfig+0x1c0>
 8005098:	2300      	movs	r3, #0
 800509a:	77fb      	strb	r3, [r7, #31]
 800509c:	e0cc      	b.n	8005238 <UART_SetConfig+0x348>
 800509e:	2302      	movs	r3, #2
 80050a0:	77fb      	strb	r3, [r7, #31]
 80050a2:	e0c9      	b.n	8005238 <UART_SetConfig+0x348>
 80050a4:	2304      	movs	r3, #4
 80050a6:	77fb      	strb	r3, [r7, #31]
 80050a8:	e0c6      	b.n	8005238 <UART_SetConfig+0x348>
 80050aa:	2308      	movs	r3, #8
 80050ac:	77fb      	strb	r3, [r7, #31]
 80050ae:	e0c3      	b.n	8005238 <UART_SetConfig+0x348>
 80050b0:	2310      	movs	r3, #16
 80050b2:	77fb      	strb	r3, [r7, #31]
 80050b4:	e0c0      	b.n	8005238 <UART_SetConfig+0x348>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a44      	ldr	r2, [pc, #272]	; (80051cc <UART_SetConfig+0x2dc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d125      	bne.n	800510c <UART_SetConfig+0x21c>
 80050c0:	4b3e      	ldr	r3, [pc, #248]	; (80051bc <UART_SetConfig+0x2cc>)
 80050c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ce:	d017      	beq.n	8005100 <UART_SetConfig+0x210>
 80050d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050d4:	d817      	bhi.n	8005106 <UART_SetConfig+0x216>
 80050d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050da:	d00b      	beq.n	80050f4 <UART_SetConfig+0x204>
 80050dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e0:	d811      	bhi.n	8005106 <UART_SetConfig+0x216>
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <UART_SetConfig+0x1fe>
 80050e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ea:	d006      	beq.n	80050fa <UART_SetConfig+0x20a>
 80050ec:	e00b      	b.n	8005106 <UART_SetConfig+0x216>
 80050ee:	2300      	movs	r3, #0
 80050f0:	77fb      	strb	r3, [r7, #31]
 80050f2:	e0a1      	b.n	8005238 <UART_SetConfig+0x348>
 80050f4:	2302      	movs	r3, #2
 80050f6:	77fb      	strb	r3, [r7, #31]
 80050f8:	e09e      	b.n	8005238 <UART_SetConfig+0x348>
 80050fa:	2304      	movs	r3, #4
 80050fc:	77fb      	strb	r3, [r7, #31]
 80050fe:	e09b      	b.n	8005238 <UART_SetConfig+0x348>
 8005100:	2308      	movs	r3, #8
 8005102:	77fb      	strb	r3, [r7, #31]
 8005104:	e098      	b.n	8005238 <UART_SetConfig+0x348>
 8005106:	2310      	movs	r3, #16
 8005108:	77fb      	strb	r3, [r7, #31]
 800510a:	e095      	b.n	8005238 <UART_SetConfig+0x348>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a2f      	ldr	r2, [pc, #188]	; (80051d0 <UART_SetConfig+0x2e0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d125      	bne.n	8005162 <UART_SetConfig+0x272>
 8005116:	4b29      	ldr	r3, [pc, #164]	; (80051bc <UART_SetConfig+0x2cc>)
 8005118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005120:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005124:	d017      	beq.n	8005156 <UART_SetConfig+0x266>
 8005126:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800512a:	d817      	bhi.n	800515c <UART_SetConfig+0x26c>
 800512c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005130:	d00b      	beq.n	800514a <UART_SetConfig+0x25a>
 8005132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005136:	d811      	bhi.n	800515c <UART_SetConfig+0x26c>
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <UART_SetConfig+0x254>
 800513c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005140:	d006      	beq.n	8005150 <UART_SetConfig+0x260>
 8005142:	e00b      	b.n	800515c <UART_SetConfig+0x26c>
 8005144:	2301      	movs	r3, #1
 8005146:	77fb      	strb	r3, [r7, #31]
 8005148:	e076      	b.n	8005238 <UART_SetConfig+0x348>
 800514a:	2302      	movs	r3, #2
 800514c:	77fb      	strb	r3, [r7, #31]
 800514e:	e073      	b.n	8005238 <UART_SetConfig+0x348>
 8005150:	2304      	movs	r3, #4
 8005152:	77fb      	strb	r3, [r7, #31]
 8005154:	e070      	b.n	8005238 <UART_SetConfig+0x348>
 8005156:	2308      	movs	r3, #8
 8005158:	77fb      	strb	r3, [r7, #31]
 800515a:	e06d      	b.n	8005238 <UART_SetConfig+0x348>
 800515c:	2310      	movs	r3, #16
 800515e:	77fb      	strb	r3, [r7, #31]
 8005160:	e06a      	b.n	8005238 <UART_SetConfig+0x348>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a1b      	ldr	r2, [pc, #108]	; (80051d4 <UART_SetConfig+0x2e4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d138      	bne.n	80051de <UART_SetConfig+0x2ee>
 800516c:	4b13      	ldr	r3, [pc, #76]	; (80051bc <UART_SetConfig+0x2cc>)
 800516e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005172:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005176:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800517a:	d017      	beq.n	80051ac <UART_SetConfig+0x2bc>
 800517c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005180:	d82a      	bhi.n	80051d8 <UART_SetConfig+0x2e8>
 8005182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005186:	d00b      	beq.n	80051a0 <UART_SetConfig+0x2b0>
 8005188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800518c:	d824      	bhi.n	80051d8 <UART_SetConfig+0x2e8>
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <UART_SetConfig+0x2aa>
 8005192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005196:	d006      	beq.n	80051a6 <UART_SetConfig+0x2b6>
 8005198:	e01e      	b.n	80051d8 <UART_SetConfig+0x2e8>
 800519a:	2300      	movs	r3, #0
 800519c:	77fb      	strb	r3, [r7, #31]
 800519e:	e04b      	b.n	8005238 <UART_SetConfig+0x348>
 80051a0:	2302      	movs	r3, #2
 80051a2:	77fb      	strb	r3, [r7, #31]
 80051a4:	e048      	b.n	8005238 <UART_SetConfig+0x348>
 80051a6:	2304      	movs	r3, #4
 80051a8:	77fb      	strb	r3, [r7, #31]
 80051aa:	e045      	b.n	8005238 <UART_SetConfig+0x348>
 80051ac:	2308      	movs	r3, #8
 80051ae:	77fb      	strb	r3, [r7, #31]
 80051b0:	e042      	b.n	8005238 <UART_SetConfig+0x348>
 80051b2:	bf00      	nop
 80051b4:	efff69f3 	.word	0xefff69f3
 80051b8:	40011000 	.word	0x40011000
 80051bc:	40023800 	.word	0x40023800
 80051c0:	40004400 	.word	0x40004400
 80051c4:	40004800 	.word	0x40004800
 80051c8:	40004c00 	.word	0x40004c00
 80051cc:	40005000 	.word	0x40005000
 80051d0:	40011400 	.word	0x40011400
 80051d4:	40007800 	.word	0x40007800
 80051d8:	2310      	movs	r3, #16
 80051da:	77fb      	strb	r3, [r7, #31]
 80051dc:	e02c      	b.n	8005238 <UART_SetConfig+0x348>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a72      	ldr	r2, [pc, #456]	; (80053ac <UART_SetConfig+0x4bc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d125      	bne.n	8005234 <UART_SetConfig+0x344>
 80051e8:	4b71      	ldr	r3, [pc, #452]	; (80053b0 <UART_SetConfig+0x4c0>)
 80051ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80051f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80051f6:	d017      	beq.n	8005228 <UART_SetConfig+0x338>
 80051f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80051fc:	d817      	bhi.n	800522e <UART_SetConfig+0x33e>
 80051fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005202:	d00b      	beq.n	800521c <UART_SetConfig+0x32c>
 8005204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005208:	d811      	bhi.n	800522e <UART_SetConfig+0x33e>
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <UART_SetConfig+0x326>
 800520e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005212:	d006      	beq.n	8005222 <UART_SetConfig+0x332>
 8005214:	e00b      	b.n	800522e <UART_SetConfig+0x33e>
 8005216:	2300      	movs	r3, #0
 8005218:	77fb      	strb	r3, [r7, #31]
 800521a:	e00d      	b.n	8005238 <UART_SetConfig+0x348>
 800521c:	2302      	movs	r3, #2
 800521e:	77fb      	strb	r3, [r7, #31]
 8005220:	e00a      	b.n	8005238 <UART_SetConfig+0x348>
 8005222:	2304      	movs	r3, #4
 8005224:	77fb      	strb	r3, [r7, #31]
 8005226:	e007      	b.n	8005238 <UART_SetConfig+0x348>
 8005228:	2308      	movs	r3, #8
 800522a:	77fb      	strb	r3, [r7, #31]
 800522c:	e004      	b.n	8005238 <UART_SetConfig+0x348>
 800522e:	2310      	movs	r3, #16
 8005230:	77fb      	strb	r3, [r7, #31]
 8005232:	e001      	b.n	8005238 <UART_SetConfig+0x348>
 8005234:	2310      	movs	r3, #16
 8005236:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005240:	d15b      	bne.n	80052fa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005242:	7ffb      	ldrb	r3, [r7, #31]
 8005244:	2b08      	cmp	r3, #8
 8005246:	d828      	bhi.n	800529a <UART_SetConfig+0x3aa>
 8005248:	a201      	add	r2, pc, #4	; (adr r2, 8005250 <UART_SetConfig+0x360>)
 800524a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524e:	bf00      	nop
 8005250:	08005275 	.word	0x08005275
 8005254:	0800527d 	.word	0x0800527d
 8005258:	08005285 	.word	0x08005285
 800525c:	0800529b 	.word	0x0800529b
 8005260:	0800528b 	.word	0x0800528b
 8005264:	0800529b 	.word	0x0800529b
 8005268:	0800529b 	.word	0x0800529b
 800526c:	0800529b 	.word	0x0800529b
 8005270:	08005293 	.word	0x08005293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005274:	f7fe f854 	bl	8003320 <HAL_RCC_GetPCLK1Freq>
 8005278:	61b8      	str	r0, [r7, #24]
        break;
 800527a:	e013      	b.n	80052a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800527c:	f7fe f864 	bl	8003348 <HAL_RCC_GetPCLK2Freq>
 8005280:	61b8      	str	r0, [r7, #24]
        break;
 8005282:	e00f      	b.n	80052a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005284:	4b4b      	ldr	r3, [pc, #300]	; (80053b4 <UART_SetConfig+0x4c4>)
 8005286:	61bb      	str	r3, [r7, #24]
        break;
 8005288:	e00c      	b.n	80052a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800528a:	f7fd ff37 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 800528e:	61b8      	str	r0, [r7, #24]
        break;
 8005290:	e008      	b.n	80052a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005296:	61bb      	str	r3, [r7, #24]
        break;
 8005298:	e004      	b.n	80052a4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	77bb      	strb	r3, [r7, #30]
        break;
 80052a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d074      	beq.n	8005394 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	005a      	lsls	r2, r3, #1
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	085b      	lsrs	r3, r3, #1
 80052b4:	441a      	add	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80052be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b0f      	cmp	r3, #15
 80052c4:	d916      	bls.n	80052f4 <UART_SetConfig+0x404>
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052cc:	d212      	bcs.n	80052f4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f023 030f 	bic.w	r3, r3, #15
 80052d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	085b      	lsrs	r3, r3, #1
 80052dc:	b29b      	uxth	r3, r3
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	89fb      	ldrh	r3, [r7, #14]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	89fa      	ldrh	r2, [r7, #14]
 80052f0:	60da      	str	r2, [r3, #12]
 80052f2:	e04f      	b.n	8005394 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	77bb      	strb	r3, [r7, #30]
 80052f8:	e04c      	b.n	8005394 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052fa:	7ffb      	ldrb	r3, [r7, #31]
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d828      	bhi.n	8005352 <UART_SetConfig+0x462>
 8005300:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <UART_SetConfig+0x418>)
 8005302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005306:	bf00      	nop
 8005308:	0800532d 	.word	0x0800532d
 800530c:	08005335 	.word	0x08005335
 8005310:	0800533d 	.word	0x0800533d
 8005314:	08005353 	.word	0x08005353
 8005318:	08005343 	.word	0x08005343
 800531c:	08005353 	.word	0x08005353
 8005320:	08005353 	.word	0x08005353
 8005324:	08005353 	.word	0x08005353
 8005328:	0800534b 	.word	0x0800534b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800532c:	f7fd fff8 	bl	8003320 <HAL_RCC_GetPCLK1Freq>
 8005330:	61b8      	str	r0, [r7, #24]
        break;
 8005332:	e013      	b.n	800535c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005334:	f7fe f808 	bl	8003348 <HAL_RCC_GetPCLK2Freq>
 8005338:	61b8      	str	r0, [r7, #24]
        break;
 800533a:	e00f      	b.n	800535c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800533c:	4b1d      	ldr	r3, [pc, #116]	; (80053b4 <UART_SetConfig+0x4c4>)
 800533e:	61bb      	str	r3, [r7, #24]
        break;
 8005340:	e00c      	b.n	800535c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005342:	f7fd fedb 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 8005346:	61b8      	str	r0, [r7, #24]
        break;
 8005348:	e008      	b.n	800535c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800534a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800534e:	61bb      	str	r3, [r7, #24]
        break;
 8005350:	e004      	b.n	800535c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	77bb      	strb	r3, [r7, #30]
        break;
 800535a:	bf00      	nop
    }

    if (pclk != 0U)
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d018      	beq.n	8005394 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	085a      	lsrs	r2, r3, #1
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	441a      	add	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	fbb2 f3f3 	udiv	r3, r2, r3
 8005374:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b0f      	cmp	r3, #15
 800537a:	d909      	bls.n	8005390 <UART_SetConfig+0x4a0>
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005382:	d205      	bcs.n	8005390 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	b29a      	uxth	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	60da      	str	r2, [r3, #12]
 800538e:	e001      	b.n	8005394 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80053a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3720      	adds	r7, #32
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	40007c00 	.word	0x40007c00
 80053b0:	40023800 	.word	0x40023800
 80053b4:	00f42400 	.word	0x00f42400

080053b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00a      	beq.n	8005448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00a      	beq.n	800546a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	f003 0320 	and.w	r3, r3, #32
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01a      	beq.n	80054ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054b6:	d10a      	bne.n	80054ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	605a      	str	r2, [r3, #4]
  }
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af02      	add	r7, sp, #8
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800550c:	f7fc fc40 	bl	8001d90 <HAL_GetTick>
 8005510:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b08      	cmp	r3, #8
 800551e:	d10e      	bne.n	800553e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f81b 	bl	800556a <UART_WaitOnFlagUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e011      	b.n	8005562 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2220      	movs	r2, #32
 8005542:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b09c      	sub	sp, #112	; 0x70
 800556e:	af00      	add	r7, sp, #0
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	603b      	str	r3, [r7, #0]
 8005576:	4613      	mov	r3, r2
 8005578:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800557a:	e0a7      	b.n	80056cc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800557c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800557e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005582:	f000 80a3 	beq.w	80056cc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005586:	f7fc fc03 	bl	8001d90 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005592:	429a      	cmp	r2, r3
 8005594:	d302      	bcc.n	800559c <UART_WaitOnFlagUntilTimeout+0x32>
 8005596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005598:	2b00      	cmp	r3, #0
 800559a:	d13f      	bne.n	800561c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055b0:	667b      	str	r3, [r7, #100]	; 0x64
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	461a      	mov	r2, r3
 80055b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e6      	bne.n	800559c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3308      	adds	r3, #8
 80055d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	f023 0301 	bic.w	r3, r3, #1
 80055e4:	663b      	str	r3, [r7, #96]	; 0x60
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3308      	adds	r3, #8
 80055ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80055f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e5      	bne.n	80055ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2220      	movs	r2, #32
 8005606:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e068      	b.n	80056ee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0304 	and.w	r3, r3, #4
 8005626:	2b00      	cmp	r3, #0
 8005628:	d050      	beq.n	80056cc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005638:	d148      	bne.n	80056cc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005642:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005654:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005658:	66fb      	str	r3, [r7, #108]	; 0x6c
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005662:	637b      	str	r3, [r7, #52]	; 0x34
 8005664:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005668:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e6      	bne.n	8005644 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3308      	adds	r3, #8
 800567c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	613b      	str	r3, [r7, #16]
   return(result);
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f023 0301 	bic.w	r3, r3, #1
 800568c:	66bb      	str	r3, [r7, #104]	; 0x68
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3308      	adds	r3, #8
 8005694:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005696:	623a      	str	r2, [r7, #32]
 8005698:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	69f9      	ldr	r1, [r7, #28]
 800569c:	6a3a      	ldr	r2, [r7, #32]
 800569e:	e841 2300 	strex	r3, r2, [r1]
 80056a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e5      	bne.n	8005676 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2220      	movs	r2, #32
 80056ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2220      	movs	r2, #32
 80056b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e010      	b.n	80056ee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	69da      	ldr	r2, [r3, #28]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	4013      	ands	r3, r2
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	429a      	cmp	r2, r3
 80056da:	bf0c      	ite	eq
 80056dc:	2301      	moveq	r3, #1
 80056de:	2300      	movne	r3, #0
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	461a      	mov	r2, r3
 80056e4:	79fb      	ldrb	r3, [r7, #7]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	f43f af48 	beq.w	800557c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3770      	adds	r7, #112	; 0x70
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
	...

080056f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b097      	sub	sp, #92	; 0x5c
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	4613      	mov	r3, r2
 8005704:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	88fa      	ldrh	r2, [r7, #6]
 8005710:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	88fa      	ldrh	r2, [r7, #6]
 8005718:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800572a:	d10e      	bne.n	800574a <UART_Start_Receive_IT+0x52>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d105      	bne.n	8005740 <UART_Start_Receive_IT+0x48>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f240 12ff 	movw	r2, #511	; 0x1ff
 800573a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800573e:	e02d      	b.n	800579c <UART_Start_Receive_IT+0xa4>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	22ff      	movs	r2, #255	; 0xff
 8005744:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005748:	e028      	b.n	800579c <UART_Start_Receive_IT+0xa4>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10d      	bne.n	800576e <UART_Start_Receive_IT+0x76>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d104      	bne.n	8005764 <UART_Start_Receive_IT+0x6c>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	22ff      	movs	r2, #255	; 0xff
 800575e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005762:	e01b      	b.n	800579c <UART_Start_Receive_IT+0xa4>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	227f      	movs	r2, #127	; 0x7f
 8005768:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800576c:	e016      	b.n	800579c <UART_Start_Receive_IT+0xa4>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005776:	d10d      	bne.n	8005794 <UART_Start_Receive_IT+0x9c>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d104      	bne.n	800578a <UART_Start_Receive_IT+0x92>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	227f      	movs	r2, #127	; 0x7f
 8005784:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005788:	e008      	b.n	800579c <UART_Start_Receive_IT+0xa4>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	223f      	movs	r2, #63	; 0x3f
 800578e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005792:	e003      	b.n	800579c <UART_Start_Receive_IT+0xa4>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2222      	movs	r2, #34	; 0x22
 80057a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3308      	adds	r3, #8
 80057b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b6:	e853 3f00 	ldrex	r3, [r3]
 80057ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	657b      	str	r3, [r7, #84]	; 0x54
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	3308      	adds	r3, #8
 80057ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80057ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e5      	bne.n	80057ac <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e8:	d107      	bne.n	80057fa <UART_Start_Receive_IT+0x102>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d103      	bne.n	80057fa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4a21      	ldr	r2, [pc, #132]	; (800587c <UART_Start_Receive_IT+0x184>)
 80057f6:	669a      	str	r2, [r3, #104]	; 0x68
 80057f8:	e002      	b.n	8005800 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4a20      	ldr	r2, [pc, #128]	; (8005880 <UART_Start_Receive_IT+0x188>)
 80057fe:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d019      	beq.n	800583c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005810:	e853 3f00 	ldrex	r3, [r3]
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800581c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005826:	637b      	str	r3, [r7, #52]	; 0x34
 8005828:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800582c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800582e:	e841 2300 	strex	r3, r2, [r1]
 8005832:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e6      	bne.n	8005808 <UART_Start_Receive_IT+0x110>
 800583a:	e018      	b.n	800586e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	e853 3f00 	ldrex	r3, [r3]
 8005848:	613b      	str	r3, [r7, #16]
   return(result);
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f043 0320 	orr.w	r3, r3, #32
 8005850:	653b      	str	r3, [r7, #80]	; 0x50
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800585a:	623b      	str	r3, [r7, #32]
 800585c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	69f9      	ldr	r1, [r7, #28]
 8005860:	6a3a      	ldr	r2, [r7, #32]
 8005862:	e841 2300 	strex	r3, r2, [r1]
 8005866:	61bb      	str	r3, [r7, #24]
   return(result);
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1e6      	bne.n	800583c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	375c      	adds	r7, #92	; 0x5c
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr
 800587c:	08005b33 	.word	0x08005b33
 8005880:	080059cd 	.word	0x080059cd

08005884 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005884:	b480      	push	{r7}
 8005886:	b095      	sub	sp, #84	; 0x54
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005894:	e853 3f00 	ldrex	r3, [r3]
 8005898:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800589a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058aa:	643b      	str	r3, [r7, #64]	; 0x40
 80058ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e6      	bne.n	800588c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3308      	adds	r3, #8
 80058c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	f023 0301 	bic.w	r3, r3, #1
 80058d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3308      	adds	r3, #8
 80058dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e5      	bne.n	80058be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d118      	bne.n	800592c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	e853 3f00 	ldrex	r3, [r3]
 8005906:	60bb      	str	r3, [r7, #8]
   return(result);
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f023 0310 	bic.w	r3, r3, #16
 800590e:	647b      	str	r3, [r7, #68]	; 0x44
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	461a      	mov	r2, r3
 8005916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005918:	61bb      	str	r3, [r7, #24]
 800591a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	6979      	ldr	r1, [r7, #20]
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	613b      	str	r3, [r7, #16]
   return(result);
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e6      	bne.n	80058fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2220      	movs	r2, #32
 8005930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005940:	bf00      	nop
 8005942:	3754      	adds	r7, #84	; 0x54
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005958:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f7ff faaa 	bl	8004ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005970:	bf00      	nop
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	60bb      	str	r3, [r7, #8]
   return(result);
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005994:	61fb      	str	r3, [r7, #28]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	61bb      	str	r3, [r7, #24]
 80059a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6979      	ldr	r1, [r7, #20]
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	613b      	str	r3, [r7, #16]
   return(result);
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e6      	bne.n	8005980 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7fb fbbe 	bl	8001140 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059c4:	bf00      	nop
 80059c6:	3720      	adds	r7, #32
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b096      	sub	sp, #88	; 0x58
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059da:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059e4:	2b22      	cmp	r3, #34	; 0x22
 80059e6:	f040 8098 	bne.w	8005b1a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80059f4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80059f8:	b2d9      	uxtb	r1, r3
 80059fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a04:	400a      	ands	r2, r1
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0e:	1c5a      	adds	r2, r3, #1
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d17b      	bne.n	8005b2a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3a:	e853 3f00 	ldrex	r3, [r3]
 8005a3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a46:	653b      	str	r3, [r7, #80]	; 0x50
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a50:	647b      	str	r3, [r7, #68]	; 0x44
 8005a52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a58:	e841 2300 	strex	r3, r2, [r1]
 8005a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e6      	bne.n	8005a32 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3308      	adds	r3, #8
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	e853 3f00 	ldrex	r3, [r3]
 8005a72:	623b      	str	r3, [r7, #32]
   return(result);
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	f023 0301 	bic.w	r3, r3, #1
 8005a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3308      	adds	r3, #8
 8005a82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a84:	633a      	str	r2, [r7, #48]	; 0x30
 8005a86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a8c:	e841 2300 	strex	r3, r2, [r1]
 8005a90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1e5      	bne.n	8005a64 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d12e      	bne.n	8005b12 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	e853 3f00 	ldrex	r3, [r3]
 8005ac6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f023 0310 	bic.w	r3, r3, #16
 8005ace:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ad8:	61fb      	str	r3, [r7, #28]
 8005ada:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005adc:	69b9      	ldr	r1, [r7, #24]
 8005ade:	69fa      	ldr	r2, [r7, #28]
 8005ae0:	e841 2300 	strex	r3, r2, [r1]
 8005ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1e6      	bne.n	8005aba <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	2b10      	cmp	r3, #16
 8005af8:	d103      	bne.n	8005b02 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2210      	movs	r2, #16
 8005b00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005b08:	4619      	mov	r1, r3
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7ff f9e4 	bl	8004ed8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b10:	e00b      	b.n	8005b2a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fb fae8 	bl	80010e8 <HAL_UART_RxCpltCallback>
}
 8005b18:	e007      	b.n	8005b2a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	699a      	ldr	r2, [r3, #24]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 0208 	orr.w	r2, r2, #8
 8005b28:	619a      	str	r2, [r3, #24]
}
 8005b2a:	bf00      	nop
 8005b2c:	3758      	adds	r7, #88	; 0x58
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b096      	sub	sp, #88	; 0x58
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b40:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b4a:	2b22      	cmp	r3, #34	; 0x22
 8005b4c:	f040 8098 	bne.w	8005c80 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005b60:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005b64:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005b68:	4013      	ands	r3, r2
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b6e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b74:	1c9a      	adds	r2, r3, #2
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d17b      	bne.n	8005c90 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb6:	643b      	str	r3, [r7, #64]	; 0x40
 8005bb8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e6      	bne.n	8005b98 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3308      	adds	r3, #8
 8005bd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	f023 0301 	bic.w	r3, r3, #1
 8005be0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3308      	adds	r3, #8
 8005be8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e5      	bne.n	8005bca <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2220      	movs	r2, #32
 8005c02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d12e      	bne.n	8005c78 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f023 0310 	bic.w	r3, r3, #16
 8005c34:	647b      	str	r3, [r7, #68]	; 0x44
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c3e:	61bb      	str	r3, [r7, #24]
 8005c40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	6979      	ldr	r1, [r7, #20]
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e6      	bne.n	8005c20 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69db      	ldr	r3, [r3, #28]
 8005c58:	f003 0310 	and.w	r3, r3, #16
 8005c5c:	2b10      	cmp	r3, #16
 8005c5e:	d103      	bne.n	8005c68 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2210      	movs	r2, #16
 8005c66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005c6e:	4619      	mov	r1, r3
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7ff f931 	bl	8004ed8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c76:	e00b      	b.n	8005c90 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7fb fa35 	bl	80010e8 <HAL_UART_RxCpltCallback>
}
 8005c7e:	e007      	b.n	8005c90 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699a      	ldr	r2, [r3, #24]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0208 	orr.w	r2, r2, #8
 8005c8e:	619a      	str	r2, [r3, #24]
}
 8005c90:	bf00      	nop
 8005c92:	3758      	adds	r7, #88	; 0x58
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c98:	b084      	sub	sp, #16
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	f107 001c 	add.w	r0, r7, #28
 8005ca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d126      	bne.n	8005cfe <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	4b38      	ldr	r3, [pc, #224]	; (8005da4 <USB_CoreInit+0x10c>)
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f043 0210 	orr.w	r2, r3, #16
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d105      	bne.n	8005cf2 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fad0 	bl	8006298 <USB_CoreReset>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	73fb      	strb	r3, [r7, #15]
 8005cfc:	e03a      	b.n	8005d74 <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d126      	bne.n	8005d52 <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	4b23      	ldr	r3, [pc, #140]	; (8005da4 <USB_CoreInit+0x10c>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f023 0210 	bic.w	r2, r3, #16
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8005d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d105      	bne.n	8005d46 <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 faa6 	bl	8006298 <USB_CoreReset>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	73fb      	strb	r3, [r7, #15]
 8005d50:	e010      	b.n	8005d74 <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fa9a 	bl	8006298 <USB_CoreReset>
 8005d64:	4603      	mov	r3, r0
 8005d66:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d10b      	bne.n	8005d92 <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f043 0206 	orr.w	r2, r3, #6
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f043 0220 	orr.w	r2, r3, #32
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d9e:	b004      	add	sp, #16
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	ffbdffbf 	.word	0xffbdffbf

08005da8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f023 0201 	bic.w	r2, r3, #1
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b084      	sub	sp, #16
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005de6:	78fb      	ldrb	r3, [r7, #3]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d115      	bne.n	8005e18 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005df8:	2001      	movs	r0, #1
 8005dfa:	f7fb ffd5 	bl	8001da8 <HAL_Delay>
      ms++;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3301      	adds	r3, #1
 8005e02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fa39 	bl	800627c <USB_GetMode>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d01e      	beq.n	8005e4e <USB_SetCurrentMode+0x84>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b31      	cmp	r3, #49	; 0x31
 8005e14:	d9f0      	bls.n	8005df8 <USB_SetCurrentMode+0x2e>
 8005e16:	e01a      	b.n	8005e4e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d115      	bne.n	8005e4a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e2a:	2001      	movs	r0, #1
 8005e2c:	f7fb ffbc 	bl	8001da8 <HAL_Delay>
      ms++;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	3301      	adds	r3, #1
 8005e34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fa20 	bl	800627c <USB_GetMode>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d005      	beq.n	8005e4e <USB_SetCurrentMode+0x84>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2b31      	cmp	r3, #49	; 0x31
 8005e46:	d9f0      	bls.n	8005e2a <USB_SetCurrentMode+0x60>
 8005e48:	e001      	b.n	8005e4e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e005      	b.n	8005e5a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2b32      	cmp	r3, #50	; 0x32
 8005e52:	d101      	bne.n	8005e58 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e000      	b.n	8005e5a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
	...

08005e64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e64:	b084      	sub	sp, #16
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b086      	sub	sp, #24
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e7e:	2300      	movs	r3, #0
 8005e80:	613b      	str	r3, [r7, #16]
 8005e82:	e009      	b.n	8005e98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	3340      	adds	r3, #64	; 0x40
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	2200      	movs	r2, #0
 8005e90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	3301      	adds	r3, #1
 8005e96:	613b      	str	r3, [r7, #16]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	2b0e      	cmp	r3, #14
 8005e9c:	d9f2      	bls.n	8005e84 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d11c      	bne.n	8005ede <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eb2:	f043 0302 	orr.w	r3, r3, #2
 8005eb6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	e005      	b.n	8005eea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efc:	4619      	mov	r1, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f04:	461a      	mov	r2, r3
 8005f06:	680b      	ldr	r3, [r1, #0]
 8005f08:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d10c      	bne.n	8005f2a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d104      	bne.n	8005f20 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f16:	2100      	movs	r1, #0
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f975 	bl	8006208 <USB_SetDevSpeed>
 8005f1e:	e018      	b.n	8005f52 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f20:	2101      	movs	r1, #1
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f970 	bl	8006208 <USB_SetDevSpeed>
 8005f28:	e013      	b.n	8005f52 <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d10c      	bne.n	8005f4a <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d104      	bne.n	8005f40 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f36:	2100      	movs	r1, #0
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f965 	bl	8006208 <USB_SetDevSpeed>
 8005f3e:	e008      	b.n	8005f52 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f40:	2101      	movs	r1, #1
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f960 	bl	8006208 <USB_SetDevSpeed>
 8005f48:	e003      	b.n	8005f52 <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f4a:	2103      	movs	r1, #3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f95b 	bl	8006208 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f52:	2110      	movs	r1, #16
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f8f3 	bl	8006140 <USB_FlushTxFifo>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f91f 	bl	80061a8 <USB_FlushRxFifo>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d001      	beq.n	8005f74 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f86:	461a      	mov	r2, r3
 8005f88:	2300      	movs	r3, #0
 8005f8a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f92:	461a      	mov	r2, r3
 8005f94:	2300      	movs	r3, #0
 8005f96:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f98:	2300      	movs	r3, #0
 8005f9a:	613b      	str	r3, [r7, #16]
 8005f9c:	e043      	b.n	8006026 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fb4:	d118      	bne.n	8005fe8 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10a      	bne.n	8005fd2 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc8:	461a      	mov	r2, r3
 8005fca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fce:	6013      	str	r3, [r2, #0]
 8005fd0:	e013      	b.n	8005ffa <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	e008      	b.n	8005ffa <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006006:	461a      	mov	r2, r3
 8006008:	2300      	movs	r3, #0
 800600a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006018:	461a      	mov	r2, r3
 800601a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800601e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	3301      	adds	r3, #1
 8006024:	613b      	str	r3, [r7, #16]
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	429a      	cmp	r2, r3
 800602c:	d3b7      	bcc.n	8005f9e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800602e:	2300      	movs	r3, #0
 8006030:	613b      	str	r3, [r7, #16]
 8006032:	e043      	b.n	80060bc <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006046:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800604a:	d118      	bne.n	800607e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10a      	bne.n	8006068 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	4413      	add	r3, r2
 800605a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800605e:	461a      	mov	r2, r3
 8006060:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	e013      	b.n	8006090 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006074:	461a      	mov	r2, r3
 8006076:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800607a:	6013      	str	r3, [r2, #0]
 800607c:	e008      	b.n	8006090 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608a:	461a      	mov	r2, r3
 800608c:	2300      	movs	r3, #0
 800608e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609c:	461a      	mov	r2, r3
 800609e:	2300      	movs	r3, #0
 80060a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ae:	461a      	mov	r2, r3
 80060b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	3301      	adds	r3, #1
 80060ba:	613b      	str	r3, [r7, #16]
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d3b7      	bcc.n	8006034 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80060e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d105      	bne.n	80060f8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	f043 0210 	orr.w	r2, r3, #16
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	699a      	ldr	r2, [r3, #24]
 80060fc:	4b0e      	ldr	r3, [pc, #56]	; (8006138 <USB_DevInit+0x2d4>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d005      	beq.n	8006116 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	f043 0208 	orr.w	r2, r3, #8
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006118:	2b01      	cmp	r3, #1
 800611a:	d105      	bne.n	8006128 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	699a      	ldr	r2, [r3, #24]
 8006120:	4b06      	ldr	r3, [pc, #24]	; (800613c <USB_DevInit+0x2d8>)
 8006122:	4313      	orrs	r3, r2
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006128:	7dfb      	ldrb	r3, [r7, #23]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006134:	b004      	add	sp, #16
 8006136:	4770      	bx	lr
 8006138:	803c3800 	.word	0x803c3800
 800613c:	40000004 	.word	0x40000004

08006140 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3301      	adds	r3, #1
 8006152:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4a13      	ldr	r2, [pc, #76]	; (80061a4 <USB_FlushTxFifo+0x64>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d901      	bls.n	8006160 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e01b      	b.n	8006198 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	2b00      	cmp	r3, #0
 8006166:	daf2      	bge.n	800614e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	019b      	lsls	r3, r3, #6
 8006170:	f043 0220 	orr.w	r2, r3, #32
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	3301      	adds	r3, #1
 800617c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4a08      	ldr	r2, [pc, #32]	; (80061a4 <USB_FlushTxFifo+0x64>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d901      	bls.n	800618a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e006      	b.n	8006198 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b20      	cmp	r3, #32
 8006194:	d0f0      	beq.n	8006178 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr
 80061a4:	00030d40 	.word	0x00030d40

080061a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	3301      	adds	r3, #1
 80061b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4a11      	ldr	r2, [pc, #68]	; (8006204 <USB_FlushRxFifo+0x5c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d901      	bls.n	80061c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e018      	b.n	80061f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	daf2      	bge.n	80061b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2210      	movs	r2, #16
 80061d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3301      	adds	r3, #1
 80061dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4a08      	ldr	r2, [pc, #32]	; (8006204 <USB_FlushRxFifo+0x5c>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d901      	bls.n	80061ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e006      	b.n	80061f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	f003 0310 	and.w	r3, r3, #16
 80061f2:	2b10      	cmp	r3, #16
 80061f4:	d0f0      	beq.n	80061d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3714      	adds	r7, #20
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	00030d40 	.word	0x00030d40

08006208 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	78fb      	ldrb	r3, [r7, #3]
 8006222:	68f9      	ldr	r1, [r7, #12]
 8006224:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006228:	4313      	orrs	r3, r2
 800622a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800623a:	b480      	push	{r7}
 800623c:	b085      	sub	sp, #20
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006254:	f023 0303 	bic.w	r3, r3, #3
 8006258:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006268:	f043 0302 	orr.w	r3, r3, #2
 800626c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	f003 0301 	and.w	r3, r3, #1
}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	3301      	adds	r3, #1
 80062a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4a13      	ldr	r2, [pc, #76]	; (80062fc <USB_CoreReset+0x64>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d901      	bls.n	80062b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e01b      	b.n	80062ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	daf2      	bge.n	80062a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f043 0201 	orr.w	r2, r3, #1
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3301      	adds	r3, #1
 80062d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4a09      	ldr	r2, [pc, #36]	; (80062fc <USB_CoreReset+0x64>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d901      	bls.n	80062e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e006      	b.n	80062ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d0f0      	beq.n	80062ce <USB_CoreReset+0x36>

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	00030d40 	.word	0x00030d40

08006300 <atoi>:
 8006300:	220a      	movs	r2, #10
 8006302:	2100      	movs	r1, #0
 8006304:	f000 b882 	b.w	800640c <strtol>

08006308 <_strtol_l.constprop.0>:
 8006308:	2b01      	cmp	r3, #1
 800630a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800630e:	d001      	beq.n	8006314 <_strtol_l.constprop.0+0xc>
 8006310:	2b24      	cmp	r3, #36	; 0x24
 8006312:	d906      	bls.n	8006322 <_strtol_l.constprop.0+0x1a>
 8006314:	f000 f88c 	bl	8006430 <__errno>
 8006318:	2316      	movs	r3, #22
 800631a:	6003      	str	r3, [r0, #0]
 800631c:	2000      	movs	r0, #0
 800631e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006322:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006408 <_strtol_l.constprop.0+0x100>
 8006326:	460d      	mov	r5, r1
 8006328:	462e      	mov	r6, r5
 800632a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800632e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006332:	f017 0708 	ands.w	r7, r7, #8
 8006336:	d1f7      	bne.n	8006328 <_strtol_l.constprop.0+0x20>
 8006338:	2c2d      	cmp	r4, #45	; 0x2d
 800633a:	d132      	bne.n	80063a2 <_strtol_l.constprop.0+0x9a>
 800633c:	782c      	ldrb	r4, [r5, #0]
 800633e:	2701      	movs	r7, #1
 8006340:	1cb5      	adds	r5, r6, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d05b      	beq.n	80063fe <_strtol_l.constprop.0+0xf6>
 8006346:	2b10      	cmp	r3, #16
 8006348:	d109      	bne.n	800635e <_strtol_l.constprop.0+0x56>
 800634a:	2c30      	cmp	r4, #48	; 0x30
 800634c:	d107      	bne.n	800635e <_strtol_l.constprop.0+0x56>
 800634e:	782c      	ldrb	r4, [r5, #0]
 8006350:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006354:	2c58      	cmp	r4, #88	; 0x58
 8006356:	d14d      	bne.n	80063f4 <_strtol_l.constprop.0+0xec>
 8006358:	786c      	ldrb	r4, [r5, #1]
 800635a:	2310      	movs	r3, #16
 800635c:	3502      	adds	r5, #2
 800635e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006362:	f108 38ff 	add.w	r8, r8, #4294967295
 8006366:	f04f 0e00 	mov.w	lr, #0
 800636a:	fbb8 f9f3 	udiv	r9, r8, r3
 800636e:	4676      	mov	r6, lr
 8006370:	fb03 8a19 	mls	sl, r3, r9, r8
 8006374:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006378:	f1bc 0f09 	cmp.w	ip, #9
 800637c:	d816      	bhi.n	80063ac <_strtol_l.constprop.0+0xa4>
 800637e:	4664      	mov	r4, ip
 8006380:	42a3      	cmp	r3, r4
 8006382:	dd24      	ble.n	80063ce <_strtol_l.constprop.0+0xc6>
 8006384:	f1be 3fff 	cmp.w	lr, #4294967295
 8006388:	d008      	beq.n	800639c <_strtol_l.constprop.0+0x94>
 800638a:	45b1      	cmp	r9, r6
 800638c:	d31c      	bcc.n	80063c8 <_strtol_l.constprop.0+0xc0>
 800638e:	d101      	bne.n	8006394 <_strtol_l.constprop.0+0x8c>
 8006390:	45a2      	cmp	sl, r4
 8006392:	db19      	blt.n	80063c8 <_strtol_l.constprop.0+0xc0>
 8006394:	fb06 4603 	mla	r6, r6, r3, r4
 8006398:	f04f 0e01 	mov.w	lr, #1
 800639c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063a0:	e7e8      	b.n	8006374 <_strtol_l.constprop.0+0x6c>
 80063a2:	2c2b      	cmp	r4, #43	; 0x2b
 80063a4:	bf04      	itt	eq
 80063a6:	782c      	ldrbeq	r4, [r5, #0]
 80063a8:	1cb5      	addeq	r5, r6, #2
 80063aa:	e7ca      	b.n	8006342 <_strtol_l.constprop.0+0x3a>
 80063ac:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80063b0:	f1bc 0f19 	cmp.w	ip, #25
 80063b4:	d801      	bhi.n	80063ba <_strtol_l.constprop.0+0xb2>
 80063b6:	3c37      	subs	r4, #55	; 0x37
 80063b8:	e7e2      	b.n	8006380 <_strtol_l.constprop.0+0x78>
 80063ba:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80063be:	f1bc 0f19 	cmp.w	ip, #25
 80063c2:	d804      	bhi.n	80063ce <_strtol_l.constprop.0+0xc6>
 80063c4:	3c57      	subs	r4, #87	; 0x57
 80063c6:	e7db      	b.n	8006380 <_strtol_l.constprop.0+0x78>
 80063c8:	f04f 3eff 	mov.w	lr, #4294967295
 80063cc:	e7e6      	b.n	800639c <_strtol_l.constprop.0+0x94>
 80063ce:	f1be 3fff 	cmp.w	lr, #4294967295
 80063d2:	d105      	bne.n	80063e0 <_strtol_l.constprop.0+0xd8>
 80063d4:	2322      	movs	r3, #34	; 0x22
 80063d6:	6003      	str	r3, [r0, #0]
 80063d8:	4646      	mov	r6, r8
 80063da:	b942      	cbnz	r2, 80063ee <_strtol_l.constprop.0+0xe6>
 80063dc:	4630      	mov	r0, r6
 80063de:	e79e      	b.n	800631e <_strtol_l.constprop.0+0x16>
 80063e0:	b107      	cbz	r7, 80063e4 <_strtol_l.constprop.0+0xdc>
 80063e2:	4276      	negs	r6, r6
 80063e4:	2a00      	cmp	r2, #0
 80063e6:	d0f9      	beq.n	80063dc <_strtol_l.constprop.0+0xd4>
 80063e8:	f1be 0f00 	cmp.w	lr, #0
 80063ec:	d000      	beq.n	80063f0 <_strtol_l.constprop.0+0xe8>
 80063ee:	1e69      	subs	r1, r5, #1
 80063f0:	6011      	str	r1, [r2, #0]
 80063f2:	e7f3      	b.n	80063dc <_strtol_l.constprop.0+0xd4>
 80063f4:	2430      	movs	r4, #48	; 0x30
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1b1      	bne.n	800635e <_strtol_l.constprop.0+0x56>
 80063fa:	2308      	movs	r3, #8
 80063fc:	e7af      	b.n	800635e <_strtol_l.constprop.0+0x56>
 80063fe:	2c30      	cmp	r4, #48	; 0x30
 8006400:	d0a5      	beq.n	800634e <_strtol_l.constprop.0+0x46>
 8006402:	230a      	movs	r3, #10
 8006404:	e7ab      	b.n	800635e <_strtol_l.constprop.0+0x56>
 8006406:	bf00      	nop
 8006408:	08006ac5 	.word	0x08006ac5

0800640c <strtol>:
 800640c:	4613      	mov	r3, r2
 800640e:	460a      	mov	r2, r1
 8006410:	4601      	mov	r1, r0
 8006412:	4802      	ldr	r0, [pc, #8]	; (800641c <strtol+0x10>)
 8006414:	6800      	ldr	r0, [r0, #0]
 8006416:	f7ff bf77 	b.w	8006308 <_strtol_l.constprop.0>
 800641a:	bf00      	nop
 800641c:	2000005c 	.word	0x2000005c

08006420 <memset>:
 8006420:	4402      	add	r2, r0
 8006422:	4603      	mov	r3, r0
 8006424:	4293      	cmp	r3, r2
 8006426:	d100      	bne.n	800642a <memset+0xa>
 8006428:	4770      	bx	lr
 800642a:	f803 1b01 	strb.w	r1, [r3], #1
 800642e:	e7f9      	b.n	8006424 <memset+0x4>

08006430 <__errno>:
 8006430:	4b01      	ldr	r3, [pc, #4]	; (8006438 <__errno+0x8>)
 8006432:	6818      	ldr	r0, [r3, #0]
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	2000005c 	.word	0x2000005c

0800643c <__libc_init_array>:
 800643c:	b570      	push	{r4, r5, r6, lr}
 800643e:	4d0d      	ldr	r5, [pc, #52]	; (8006474 <__libc_init_array+0x38>)
 8006440:	4c0d      	ldr	r4, [pc, #52]	; (8006478 <__libc_init_array+0x3c>)
 8006442:	1b64      	subs	r4, r4, r5
 8006444:	10a4      	asrs	r4, r4, #2
 8006446:	2600      	movs	r6, #0
 8006448:	42a6      	cmp	r6, r4
 800644a:	d109      	bne.n	8006460 <__libc_init_array+0x24>
 800644c:	4d0b      	ldr	r5, [pc, #44]	; (800647c <__libc_init_array+0x40>)
 800644e:	4c0c      	ldr	r4, [pc, #48]	; (8006480 <__libc_init_array+0x44>)
 8006450:	f000 f826 	bl	80064a0 <_init>
 8006454:	1b64      	subs	r4, r4, r5
 8006456:	10a4      	asrs	r4, r4, #2
 8006458:	2600      	movs	r6, #0
 800645a:	42a6      	cmp	r6, r4
 800645c:	d105      	bne.n	800646a <__libc_init_array+0x2e>
 800645e:	bd70      	pop	{r4, r5, r6, pc}
 8006460:	f855 3b04 	ldr.w	r3, [r5], #4
 8006464:	4798      	blx	r3
 8006466:	3601      	adds	r6, #1
 8006468:	e7ee      	b.n	8006448 <__libc_init_array+0xc>
 800646a:	f855 3b04 	ldr.w	r3, [r5], #4
 800646e:	4798      	blx	r3
 8006470:	3601      	adds	r6, #1
 8006472:	e7f2      	b.n	800645a <__libc_init_array+0x1e>
 8006474:	08006bd0 	.word	0x08006bd0
 8006478:	08006bd0 	.word	0x08006bd0
 800647c:	08006bd0 	.word	0x08006bd0
 8006480:	08006bd4 	.word	0x08006bd4

08006484 <memcpy>:
 8006484:	440a      	add	r2, r1
 8006486:	4291      	cmp	r1, r2
 8006488:	f100 33ff 	add.w	r3, r0, #4294967295
 800648c:	d100      	bne.n	8006490 <memcpy+0xc>
 800648e:	4770      	bx	lr
 8006490:	b510      	push	{r4, lr}
 8006492:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006496:	f803 4f01 	strb.w	r4, [r3, #1]!
 800649a:	4291      	cmp	r1, r2
 800649c:	d1f9      	bne.n	8006492 <memcpy+0xe>
 800649e:	bd10      	pop	{r4, pc}

080064a0 <_init>:
 80064a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a2:	bf00      	nop
 80064a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064a6:	bc08      	pop	{r3}
 80064a8:	469e      	mov	lr, r3
 80064aa:	4770      	bx	lr

080064ac <_fini>:
 80064ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ae:	bf00      	nop
 80064b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b2:	bc08      	pop	{r3}
 80064b4:	469e      	mov	lr, r3
 80064b6:	4770      	bx	lr
