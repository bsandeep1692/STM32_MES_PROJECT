
STM32_MES_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004530  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08004710  08004710  00014710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800474c  0800474c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800474c  0800474c  0001474c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004754  08004754  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004754  08004754  00014754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004758  08004758  00014758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800475c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  2000000c  08004768  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000060c  08004768  0002060c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013c98  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002917  00000000  00000000  00033d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001118  00000000  00000000  00036630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d58  00000000  00000000  00037748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022881  00000000  00000000  000384a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014df4  00000000  00000000  0005ad21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da750  00000000  00000000  0006fb15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000489c  00000000  00000000  0014a268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0014eb04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080046f8 	.word	0x080046f8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000010 	.word	0x20000010
 800021c:	080046f8 	.word	0x080046f8

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fbeb 	bl	8000cfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f850 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f940 	bl	80007ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800052c:	f000 f8de 	bl	80006ec <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000530:	f000 f90c 	bl	800074c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM13_Init();
 8000534:	f000 f8b6 	bl	80006a4 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  // Start timer
  HAL_TIM_Base_Start_IT(&htim13);
 8000538:	481e      	ldr	r0, [pc, #120]	; (80005b4 <main+0x98>)
 800053a:	f002 f9ff 	bl	800293c <HAL_TIM_Base_Start_IT>

  HAL_UART_Transmit_IT(&huart3, "Main function\n\r" , strlen("Main function\n\r"));
 800053e:	220f      	movs	r2, #15
 8000540:	491d      	ldr	r1, [pc, #116]	; (80005b8 <main+0x9c>)
 8000542:	481e      	ldr	r0, [pc, #120]	; (80005bc <main+0xa0>)
 8000544:	f002 fcc6 	bl	8002ed4 <HAL_UART_Transmit_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //ConsoleProcess();
	  if(BlinkSpeed == 0)
 8000548:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <main+0xa4>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d10a      	bne.n	8000566 <main+0x4a>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000550:	2201      	movs	r2, #1
 8000552:	2101      	movs	r1, #1
 8000554:	481b      	ldr	r0, [pc, #108]	; (80005c4 <main+0xa8>)
 8000556:	f000 ffa9 	bl	80014ac <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	4819      	ldr	r0, [pc, #100]	; (80005c4 <main+0xa8>)
 8000560:	f000 ffa4 	bl	80014ac <HAL_GPIO_WritePin>
 8000564:	e01c      	b.n	80005a0 <main+0x84>

	  }
	  else if(BlinkSpeed == 1)
 8000566:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <main+0xa4>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b01      	cmp	r3, #1
 800056c:	d10a      	bne.n	8000584 <main+0x68>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	2101      	movs	r1, #1
 8000572:	4814      	ldr	r0, [pc, #80]	; (80005c4 <main+0xa8>)
 8000574:	f000 ff9a 	bl	80014ac <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8000578:	2201      	movs	r2, #1
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	4811      	ldr	r0, [pc, #68]	; (80005c4 <main+0xa8>)
 800057e:	f000 ff95 	bl	80014ac <HAL_GPIO_WritePin>
 8000582:	e00d      	b.n	80005a0 <main+0x84>

	  }
	  else if(BlinkSpeed == 2)
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <main+0xa4>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b02      	cmp	r3, #2
 800058a:	d109      	bne.n	80005a0 <main+0x84>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 800058c:	2200      	movs	r2, #0
 800058e:	2101      	movs	r1, #1
 8000590:	480c      	ldr	r0, [pc, #48]	; (80005c4 <main+0xa8>)
 8000592:	f000 ff8b 	bl	80014ac <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	2180      	movs	r1, #128	; 0x80
 800059a:	480a      	ldr	r0, [pc, #40]	; (80005c4 <main+0xa8>)
 800059c:	f000 ff86 	bl	80014ac <HAL_GPIO_WritePin>
	  }
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //red
 80005a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a4:	4807      	ldr	r0, [pc, #28]	; (80005c4 <main+0xa8>)
 80005a6:	f000 ff9a 	bl	80014de <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 80005aa:	2032      	movs	r0, #50	; 0x32
 80005ac:	f000 fc02 	bl	8000db4 <HAL_Delay>
	  if(BlinkSpeed == 0)
 80005b0:	e7ca      	b.n	8000548 <main+0x2c>
 80005b2:	bf00      	nop
 80005b4:	20000028 	.word	0x20000028
 80005b8:	08004710 	.word	0x08004710
 80005bc:	20000074 	.word	0x20000074
 80005c0:	20000604 	.word	0x20000604
 80005c4:	40020400 	.word	0x40020400

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	; 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f004 f862 	bl	80046a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ec:	f001 f8da 	bl	80017a4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	4b2a      	ldr	r3, [pc, #168]	; (800069c <SystemClock_Config+0xd4>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	4a29      	ldr	r2, [pc, #164]	; (800069c <SystemClock_Config+0xd4>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	; 0x40
 80005fc:	4b27      	ldr	r3, [pc, #156]	; (800069c <SystemClock_Config+0xd4>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SystemClock_Config+0xd8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a24      	ldr	r2, [pc, #144]	; (80006a0 <SystemClock_Config+0xd8>)
 800060e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b22      	ldr	r3, [pc, #136]	; (80006a0 <SystemClock_Config+0xd8>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000624:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000638:	23d8      	movs	r3, #216	; 0xd8
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000640:	2309      	movs	r3, #9
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f001 f90b 	bl	8001864 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000654:	f000 f9a6 	bl	80009a4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000658:	f001 f8b4 	bl	80017c4 <HAL_PWREx_EnableOverDrive>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000662:	f000 f99f 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000666:	230f      	movs	r3, #15
 8000668:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066a:	2302      	movs	r3, #2
 800066c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000672:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000676:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2107      	movs	r1, #7
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fb91 	bl	8001dac <HAL_RCC_ClockConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000690:	f000 f988 	bl	80009a4 <Error_Handler>
  }
}
 8000694:	bf00      	nop
 8000696:	3750      	adds	r7, #80	; 0x50
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000

080006a4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_TIM13_Init+0x40>)
 80006aa:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <MX_TIM13_Init+0x44>)
 80006ac:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 108-1;
 80006ae:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_TIM13_Init+0x40>)
 80006b0:	226b      	movs	r2, #107	; 0x6b
 80006b2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <MX_TIM13_Init+0x40>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 80006ba:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_TIM13_Init+0x40>)
 80006bc:	f242 720f 	movw	r2, #9999	; 0x270f
 80006c0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <MX_TIM13_Init+0x40>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_TIM13_Init+0x40>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <MX_TIM13_Init+0x40>)
 80006d0:	f002 f8dc 	bl	800288c <HAL_TIM_Base_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80006da:	f000 f963 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000028 	.word	0x20000028
 80006e8:	40001c00 	.word	0x40001c00

080006ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_USART3_UART_Init+0x58>)
 80006f2:	4a15      	ldr	r2, [pc, #84]	; (8000748 <MX_USART3_UART_Init+0x5c>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_USART3_UART_Init+0x58>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART3_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_USART3_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART3_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART3_UART_Init+0x58>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART3_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART3_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART3_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USART3_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_USART3_UART_Init+0x58>)
 8000730:	f002 fb82 	bl	8002e38 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f933 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000074 	.word	0x20000074
 8000748:	40004800 	.word	0x40004800

0800074c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000750:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000752:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000756:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800075a:	2206      	movs	r2, #6
 800075c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000760:	2202      	movs	r2, #2
 8000762:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000764:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800076c:	2202      	movs	r2, #2
 800076e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000772:	2201      	movs	r2, #1
 8000774:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000778:	2200      	movs	r2, #0
 800077a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800077e:	2200      	movs	r2, #0
 8000780:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000784:	2201      	movs	r2, #1
 8000786:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800078a:	2201      	movs	r2, #1
 800078c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000790:	2200      	movs	r2, #0
 8000792:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000796:	f000 febc 	bl	8001512 <HAL_PCD_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 80007a0:	f000 f900 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000fc 	.word	0x200000fc

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	; 0x30
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b47      	ldr	r3, [pc, #284]	; (80008e0 <MX_GPIO_Init+0x134>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a46      	ldr	r2, [pc, #280]	; (80008e0 <MX_GPIO_Init+0x134>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b44      	ldr	r3, [pc, #272]	; (80008e0 <MX_GPIO_Init+0x134>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	61bb      	str	r3, [r7, #24]
 80007d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007da:	4b41      	ldr	r3, [pc, #260]	; (80008e0 <MX_GPIO_Init+0x134>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a40      	ldr	r2, [pc, #256]	; (80008e0 <MX_GPIO_Init+0x134>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b3e      	ldr	r3, [pc, #248]	; (80008e0 <MX_GPIO_Init+0x134>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b3b      	ldr	r3, [pc, #236]	; (80008e0 <MX_GPIO_Init+0x134>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a3a      	ldr	r2, [pc, #232]	; (80008e0 <MX_GPIO_Init+0x134>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b38      	ldr	r3, [pc, #224]	; (80008e0 <MX_GPIO_Init+0x134>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	4b35      	ldr	r3, [pc, #212]	; (80008e0 <MX_GPIO_Init+0x134>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a34      	ldr	r2, [pc, #208]	; (80008e0 <MX_GPIO_Init+0x134>)
 8000810:	f043 0308 	orr.w	r3, r3, #8
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b32      	ldr	r3, [pc, #200]	; (80008e0 <MX_GPIO_Init+0x134>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0308 	and.w	r3, r3, #8
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000822:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <MX_GPIO_Init+0x134>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a2e      	ldr	r2, [pc, #184]	; (80008e0 <MX_GPIO_Init+0x134>)
 8000828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b2c      	ldr	r3, [pc, #176]	; (80008e0 <MX_GPIO_Init+0x134>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b29      	ldr	r3, [pc, #164]	; (80008e0 <MX_GPIO_Init+0x134>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a28      	ldr	r2, [pc, #160]	; (80008e0 <MX_GPIO_Init+0x134>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b26      	ldr	r3, [pc, #152]	; (80008e0 <MX_GPIO_Init+0x134>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f244 0181 	movw	r1, #16513	; 0x4081
 8000858:	4822      	ldr	r0, [pc, #136]	; (80008e4 <MX_GPIO_Init+0x138>)
 800085a:	f000 fe27 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2140      	movs	r1, #64	; 0x40
 8000862:	4821      	ldr	r0, [pc, #132]	; (80008e8 <MX_GPIO_Init+0x13c>)
 8000864:	f000 fe22 	bl	80014ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000868:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800086e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	481b      	ldr	r0, [pc, #108]	; (80008ec <MX_GPIO_Init+0x140>)
 8000880:	f000 fc60 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000884:	f244 0381 	movw	r3, #16513	; 0x4081
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4811      	ldr	r0, [pc, #68]	; (80008e4 <MX_GPIO_Init+0x138>)
 800089e:	f000 fc51 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008a2:	2340      	movs	r3, #64	; 0x40
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	480b      	ldr	r0, [pc, #44]	; (80008e8 <MX_GPIO_Init+0x13c>)
 80008ba:	f000 fc43 	bl	8001144 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_GPIO_Init+0x13c>)
 80008d2:	f000 fc37 	bl	8001144 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008d6:	bf00      	nop
 80008d8:	3730      	adds	r7, #48	; 0x30
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020400 	.word	0x40020400
 80008e8:	40021800 	.word	0x40021800
 80008ec:	40020800 	.word	0x40020800

080008f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

	if (htim == &htim13 )
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a23      	ldr	r2, [pc, #140]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d13e      	bne.n	800097e <HAL_TIM_PeriodElapsedCallback+0x8e>
	{
		if (!debounceRequest)
 8000900:	4b22      	ldr	r3, [pc, #136]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d11e      	bne.n	8000946 <HAL_TIM_PeriodElapsedCallback+0x56>
		{
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8000908:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800090c:	4820      	ldr	r0, [pc, #128]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800090e:	f000 fdb5 	bl	800147c <HAL_GPIO_ReadPin>
 8000912:	4603      	mov	r3, r0
 8000914:	2b01      	cmp	r3, #1
 8000916:	d132      	bne.n	800097e <HAL_TIM_PeriodElapsedCallback+0x8e>
			{
				HAL_UART_Transmit_IT(&huart3, "Button Pressed\n\r" , strlen("Button Pressed\n\r"));
 8000918:	2210      	movs	r2, #16
 800091a:	491e      	ldr	r1, [pc, #120]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800091c:	481e      	ldr	r0, [pc, #120]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800091e:	f002 fad9 	bl	8002ed4 <HAL_UART_Transmit_IT>
				if(BlinkSpeed == 2)
 8000922:	4b1e      	ldr	r3, [pc, #120]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b02      	cmp	r3, #2
 8000928:	d103      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x42>
				{
					BlinkSpeed = 0;
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xac>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	e005      	b.n	800093e <HAL_TIM_PeriodElapsedCallback+0x4e>
				}
				else
				{
					BlinkSpeed ++;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	3301      	adds	r3, #1
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <HAL_TIM_PeriodElapsedCallback+0xac>)
 800093c:	701a      	strb	r2, [r3, #0]

				}
				debounceRequest = 1;
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
			}
		}
	}


}
 8000944:	e01b      	b.n	800097e <HAL_TIM_PeriodElapsedCallback+0x8e>
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8000946:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094a:	4811      	ldr	r0, [pc, #68]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800094c:	f000 fd96 	bl	800147c <HAL_GPIO_ReadPin>
 8000950:	4603      	mov	r3, r0
 8000952:	2b01      	cmp	r3, #1
 8000954:	d103      	bne.n	800095e <HAL_TIM_PeriodElapsedCallback+0x6e>
				debounceCount = 0;
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
}
 800095c:	e00f      	b.n	800097e <HAL_TIM_PeriodElapsedCallback+0x8e>
				debounceCount ++;
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	3301      	adds	r3, #1
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000968:	701a      	strb	r2, [r3, #0]
				if (debounceCount == 10)
 800096a:	4b0d      	ldr	r3, [pc, #52]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b0a      	cmp	r3, #10
 8000970:	d105      	bne.n	800097e <HAL_TIM_PeriodElapsedCallback+0x8e>
					debounceCount = 0;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
					debounceRequest = 0;
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800097a:	2200      	movs	r2, #0
 800097c:	701a      	strb	r2, [r3, #0]
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000028 	.word	0x20000028
 800098c:	20000605 	.word	0x20000605
 8000990:	40020800 	.word	0x40020800
 8000994:	08004720 	.word	0x08004720
 8000998:	20000074 	.word	0x20000074
 800099c:	20000604 	.word	0x20000604
 80009a0:	20000606 	.word	0x20000606

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	e7fe      	b.n	80009ac <Error_Handler+0x8>
	...

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_MspInit+0x44>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <HAL_MspInit+0x44>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_MspInit+0x44>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <HAL_MspInit+0x44>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <HAL_MspInit+0x44>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_MspInit+0x44>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <HAL_TIM_Base_MspInit+0x44>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d113      	bne.n	8000a32 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <HAL_TIM_Base_MspInit+0x48>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	4a0c      	ldr	r2, [pc, #48]	; (8000a40 <HAL_TIM_Base_MspInit+0x48>)
 8000a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a14:	6413      	str	r3, [r2, #64]	; 0x40
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <HAL_TIM_Base_MspInit+0x48>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /* TIM13 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	202c      	movs	r0, #44	; 0x2c
 8000a28:	f000 fac3 	bl	8000fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000a2c:	202c      	movs	r0, #44	; 0x2c
 8000a2e:	f000 fadc 	bl	8000fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40001c00 	.word	0x40001c00
 8000a40:	40023800 	.word	0x40023800

08000a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b0aa      	sub	sp, #168	; 0xa8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2280      	movs	r2, #128	; 0x80
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f003 fe1b 	bl	80046a0 <memset>
  if(huart->Instance==USART3)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a26      	ldr	r2, [pc, #152]	; (8000b08 <HAL_UART_MspInit+0xc4>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d144      	bne.n	8000afe <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a78:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 fbb8 	bl	80021f8 <HAL_RCCEx_PeriphCLKConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a8e:	f7ff ff89 	bl	80009a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a92:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <HAL_UART_MspInit+0xc8>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a1d      	ldr	r2, [pc, #116]	; (8000b0c <HAL_UART_MspInit+0xc8>)
 8000a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <HAL_UART_MspInit+0xc8>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aaa:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <HAL_UART_MspInit+0xc8>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a17      	ldr	r2, [pc, #92]	; (8000b0c <HAL_UART_MspInit+0xc8>)
 8000ab0:	f043 0308 	orr.w	r3, r3, #8
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_UART_MspInit+0xc8>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0308 	and.w	r3, r3, #8
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ac2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ac6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000adc:	2307      	movs	r3, #7
 8000ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4809      	ldr	r0, [pc, #36]	; (8000b10 <HAL_UART_MspInit+0xcc>)
 8000aea:	f000 fb2b 	bl	8001144 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	2027      	movs	r0, #39	; 0x27
 8000af4:	f000 fa5d 	bl	8000fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000af8:	2027      	movs	r0, #39	; 0x27
 8000afa:	f000 fa76 	bl	8000fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000afe:	bf00      	nop
 8000b00:	37a8      	adds	r7, #168	; 0xa8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40004800 	.word	0x40004800
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020c00 	.word	0x40020c00

08000b14 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b0aa      	sub	sp, #168	; 0xa8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2280      	movs	r2, #128	; 0x80
 8000b32:	2100      	movs	r1, #0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f003 fdb3 	bl	80046a0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b42:	d159      	bne.n	8000bf8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000b48:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4618      	mov	r0, r3
 8000b56:	f001 fb4f 	bl	80021f8 <HAL_RCCEx_PeriphCLKConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000b60:	f7ff ff20 	bl	80009a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b64:	4b26      	ldr	r3, [pc, #152]	; (8000c00 <HAL_PCD_MspInit+0xec>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	4a25      	ldr	r2, [pc, #148]	; (8000c00 <HAL_PCD_MspInit+0xec>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b70:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <HAL_PCD_MspInit+0xec>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b7c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b96:	230a      	movs	r3, #10
 8000b98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4818      	ldr	r0, [pc, #96]	; (8000c04 <HAL_PCD_MspInit+0xf0>)
 8000ba4:	f000 face 	bl	8001144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ba8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4810      	ldr	r0, [pc, #64]	; (8000c04 <HAL_PCD_MspInit+0xf0>)
 8000bc4:	f000 fabe 	bl	8001144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bc8:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <HAL_PCD_MspInit+0xec>)
 8000bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bcc:	4a0c      	ldr	r2, [pc, #48]	; (8000c00 <HAL_PCD_MspInit+0xec>)
 8000bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd2:	6353      	str	r3, [r2, #52]	; 0x34
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <HAL_PCD_MspInit+0xec>)
 8000bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <HAL_PCD_MspInit+0xec>)
 8000be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be4:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <HAL_PCD_MspInit+0xec>)
 8000be6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bea:	6453      	str	r3, [r2, #68]	; 0x44
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <HAL_PCD_MspInit+0xec>)
 8000bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000bf8:	bf00      	nop
 8000bfa:	37a8      	adds	r7, #168	; 0xa8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020000 	.word	0x40020000

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c0c:	e7fe      	b.n	8000c0c <NMI_Handler+0x4>

08000c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c54:	f000 f88e 	bl	8000d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <USART3_IRQHandler+0x10>)
 8000c62:	f002 f995 	bl	8002f90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000074 	.word	0x20000074

08000c70 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000c76:	f001 fed9 	bl	8002a2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000028 	.word	0x20000028

08000c84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cae:	490e      	ldr	r1, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb0:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc4:	4c0b      	ldr	r4, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cd2:	f7ff ffd7 	bl	8000c84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f003 fceb 	bl	80046b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cda:	f7ff fc1f 	bl	800051c <main>
  bx  lr    
 8000cde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ce0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cec:	0800475c 	.word	0x0800475c
  ldr r2, =_sbss
 8000cf0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cf4:	2000060c 	.word	0x2000060c

08000cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC_IRQHandler>

08000cfa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfe:	2003      	movs	r0, #3
 8000d00:	f000 f94c 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d04:	2000      	movs	r0, #0
 8000d06:	f000 f805 	bl	8000d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d0a:	f7ff fe51 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_InitTick+0x54>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_InitTick+0x58>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f967 	bl	8001006 <HAL_SYSTICK_Config>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00e      	b.n	8000d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d80a      	bhi.n	8000d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f000 f92f 	bl	8000fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d54:	4a06      	ldr	r2, [pc, #24]	; (8000d70 <HAL_InitTick+0x5c>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e000      	b.n	8000d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000004 	.word	0x20000004

08000d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x20>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x24>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <HAL_IncTick+0x24>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000608 	.word	0x20000608

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <HAL_GetTick+0x14>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000608 	.word	0x20000608

08000db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dbc:	f7ff ffee 	bl	8000d9c <HAL_GetTick>
 8000dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dcc:	d005      	beq.n	8000dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_Delay+0x44>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dda:	bf00      	nop
 8000ddc:	f7ff ffde 	bl	8000d9c <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d8f7      	bhi.n	8000ddc <HAL_Delay+0x28>
  {
  }
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000008 	.word	0x20000008

08000dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <__NVIC_SetPriorityGrouping+0x40>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e26:	4313      	orrs	r3, r2
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	; (8000e3c <__NVIC_SetPriorityGrouping+0x40>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00
 8000e40:	05fa0000 	.word	0x05fa0000

08000e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	db0b      	blt.n	8000e8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f003 021f 	and.w	r2, r3, #31
 8000e78:	4907      	ldr	r1, [pc, #28]	; (8000e98 <__NVIC_EnableIRQ+0x38>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	095b      	lsrs	r3, r3, #5
 8000e80:	2001      	movs	r0, #1
 8000e82:	fa00 f202 	lsl.w	r2, r0, r2
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000e100 	.word	0xe000e100

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	; (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	; 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f68:	d301      	bcc.n	8000f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00f      	b.n	8000f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <SysTick_Config+0x40>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f76:	210f      	movs	r1, #15
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f7ff ff8e 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <SysTick_Config+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <SysTick_Config+0x40>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff29 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc4:	f7ff ff3e 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	6978      	ldr	r0, [r7, #20]
 8000fd0:	f7ff ff8e 	bl	8000ef0 <NVIC_EncodePriority>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff5d 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff31 	bl	8000e60 <__NVIC_EnableIRQ>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ffa2 	bl	8000f58 <SysTick_Config>
 8001014:	4603      	mov	r3, r0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b084      	sub	sp, #16
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800102c:	f7ff feb6 	bl	8000d9c <HAL_GetTick>
 8001030:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d008      	beq.n	8001050 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2280      	movs	r2, #128	; 0x80
 8001042:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e052      	b.n	80010f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f022 0216 	bic.w	r2, r2, #22
 800105e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	695a      	ldr	r2, [r3, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800106e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	2b00      	cmp	r3, #0
 8001076:	d103      	bne.n	8001080 <HAL_DMA_Abort+0x62>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800107c:	2b00      	cmp	r3, #0
 800107e:	d007      	beq.n	8001090 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f022 0208 	bic.w	r2, r2, #8
 800108e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0201 	bic.w	r2, r2, #1
 800109e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010a0:	e013      	b.n	80010ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010a2:	f7ff fe7b 	bl	8000d9c <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b05      	cmp	r3, #5
 80010ae:	d90c      	bls.n	80010ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2220      	movs	r2, #32
 80010b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2203      	movs	r2, #3
 80010ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80010c6:	2303      	movs	r3, #3
 80010c8:	e015      	b.n	80010f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d1e4      	bne.n	80010a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010dc:	223f      	movs	r2, #63	; 0x3f
 80010de:	409a      	lsls	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}

080010fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d004      	beq.n	800111c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2280      	movs	r2, #128	; 0x80
 8001116:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e00c      	b.n	8001136 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2205      	movs	r2, #5
 8001120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 0201 	bic.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
 8001162:	e169      	b.n	8001438 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001164:	2201      	movs	r2, #1
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	429a      	cmp	r2, r3
 800117e:	f040 8158 	bne.w	8001432 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
 800118a:	2b01      	cmp	r3, #1
 800118c:	d005      	beq.n	800119a <HAL_GPIO_Init+0x56>
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d130      	bne.n	80011fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	2203      	movs	r2, #3
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4013      	ands	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d0:	2201      	movs	r2, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4013      	ands	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	091b      	lsrs	r3, r3, #4
 80011e6:	f003 0201 	and.w	r2, r3, #1
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	2b03      	cmp	r3, #3
 8001206:	d017      	beq.n	8001238 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	2203      	movs	r2, #3
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4313      	orrs	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d123      	bne.n	800128c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	08da      	lsrs	r2, r3, #3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3208      	adds	r2, #8
 800124c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	220f      	movs	r2, #15
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	691a      	ldr	r2, [r3, #16]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	08da      	lsrs	r2, r3, #3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3208      	adds	r2, #8
 8001286:	69b9      	ldr	r1, [r7, #24]
 8001288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2203      	movs	r2, #3
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 0203 	and.w	r2, r3, #3
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 80b2 	beq.w	8001432 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ce:	4b60      	ldr	r3, [pc, #384]	; (8001450 <HAL_GPIO_Init+0x30c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	4a5f      	ldr	r2, [pc, #380]	; (8001450 <HAL_GPIO_Init+0x30c>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d8:	6453      	str	r3, [r2, #68]	; 0x44
 80012da:	4b5d      	ldr	r3, [pc, #372]	; (8001450 <HAL_GPIO_Init+0x30c>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012e6:	4a5b      	ldr	r2, [pc, #364]	; (8001454 <HAL_GPIO_Init+0x310>)
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	3302      	adds	r3, #2
 80012ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f003 0303 	and.w	r3, r3, #3
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	220f      	movs	r2, #15
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a52      	ldr	r2, [pc, #328]	; (8001458 <HAL_GPIO_Init+0x314>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d02b      	beq.n	800136a <HAL_GPIO_Init+0x226>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a51      	ldr	r2, [pc, #324]	; (800145c <HAL_GPIO_Init+0x318>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d025      	beq.n	8001366 <HAL_GPIO_Init+0x222>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a50      	ldr	r2, [pc, #320]	; (8001460 <HAL_GPIO_Init+0x31c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d01f      	beq.n	8001362 <HAL_GPIO_Init+0x21e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4f      	ldr	r2, [pc, #316]	; (8001464 <HAL_GPIO_Init+0x320>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d019      	beq.n	800135e <HAL_GPIO_Init+0x21a>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4e      	ldr	r2, [pc, #312]	; (8001468 <HAL_GPIO_Init+0x324>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d013      	beq.n	800135a <HAL_GPIO_Init+0x216>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4d      	ldr	r2, [pc, #308]	; (800146c <HAL_GPIO_Init+0x328>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d00d      	beq.n	8001356 <HAL_GPIO_Init+0x212>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4c      	ldr	r2, [pc, #304]	; (8001470 <HAL_GPIO_Init+0x32c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d007      	beq.n	8001352 <HAL_GPIO_Init+0x20e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4b      	ldr	r2, [pc, #300]	; (8001474 <HAL_GPIO_Init+0x330>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_GPIO_Init+0x20a>
 800134a:	2307      	movs	r3, #7
 800134c:	e00e      	b.n	800136c <HAL_GPIO_Init+0x228>
 800134e:	2308      	movs	r3, #8
 8001350:	e00c      	b.n	800136c <HAL_GPIO_Init+0x228>
 8001352:	2306      	movs	r3, #6
 8001354:	e00a      	b.n	800136c <HAL_GPIO_Init+0x228>
 8001356:	2305      	movs	r3, #5
 8001358:	e008      	b.n	800136c <HAL_GPIO_Init+0x228>
 800135a:	2304      	movs	r3, #4
 800135c:	e006      	b.n	800136c <HAL_GPIO_Init+0x228>
 800135e:	2303      	movs	r3, #3
 8001360:	e004      	b.n	800136c <HAL_GPIO_Init+0x228>
 8001362:	2302      	movs	r3, #2
 8001364:	e002      	b.n	800136c <HAL_GPIO_Init+0x228>
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <HAL_GPIO_Init+0x228>
 800136a:	2300      	movs	r3, #0
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	f002 0203 	and.w	r2, r2, #3
 8001372:	0092      	lsls	r2, r2, #2
 8001374:	4093      	lsls	r3, r2
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800137c:	4935      	ldr	r1, [pc, #212]	; (8001454 <HAL_GPIO_Init+0x310>)
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <HAL_GPIO_Init+0x334>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	43db      	mvns	r3, r3
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	4013      	ands	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ae:	4a32      	ldr	r2, [pc, #200]	; (8001478 <HAL_GPIO_Init+0x334>)
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b4:	4b30      	ldr	r3, [pc, #192]	; (8001478 <HAL_GPIO_Init+0x334>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013d8:	4a27      	ldr	r2, [pc, #156]	; (8001478 <HAL_GPIO_Init+0x334>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013de:	4b26      	ldr	r3, [pc, #152]	; (8001478 <HAL_GPIO_Init+0x334>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	43db      	mvns	r3, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4013      	ands	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001402:	4a1d      	ldr	r2, [pc, #116]	; (8001478 <HAL_GPIO_Init+0x334>)
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_GPIO_Init+0x334>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800142c:	4a12      	ldr	r2, [pc, #72]	; (8001478 <HAL_GPIO_Init+0x334>)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3301      	adds	r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	2b0f      	cmp	r3, #15
 800143c:	f67f ae92 	bls.w	8001164 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001440:	bf00      	nop
 8001442:	bf00      	nop
 8001444:	3724      	adds	r7, #36	; 0x24
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800
 8001454:	40013800 	.word	0x40013800
 8001458:	40020000 	.word	0x40020000
 800145c:	40020400 	.word	0x40020400
 8001460:	40020800 	.word	0x40020800
 8001464:	40020c00 	.word	0x40020c00
 8001468:	40021000 	.word	0x40021000
 800146c:	40021400 	.word	0x40021400
 8001470:	40021800 	.word	0x40021800
 8001474:	40021c00 	.word	0x40021c00
 8001478:	40013c00 	.word	0x40013c00

0800147c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	887b      	ldrh	r3, [r7, #2]
 800148e:	4013      	ands	r3, r2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001494:	2301      	movs	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	e001      	b.n	800149e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800149e:	7bfb      	ldrb	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
 80014b8:	4613      	mov	r3, r2
 80014ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014bc:	787b      	ldrb	r3, [r7, #1]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014c2:	887a      	ldrh	r2, [r7, #2]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80014c8:	e003      	b.n	80014d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014ca:	887b      	ldrh	r3, [r7, #2]
 80014cc:	041a      	lsls	r2, r3, #16
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	619a      	str	r2, [r3, #24]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014de:	b480      	push	{r7}
 80014e0:	b085      	sub	sp, #20
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014f0:	887a      	ldrh	r2, [r7, #2]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4013      	ands	r3, r2
 80014f6:	041a      	lsls	r2, r3, #16
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43d9      	mvns	r1, r3
 80014fc:	887b      	ldrh	r3, [r7, #2]
 80014fe:	400b      	ands	r3, r1
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	619a      	str	r2, [r3, #24]
}
 8001506:	bf00      	nop
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001512:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001514:	b08f      	sub	sp, #60	; 0x3c
 8001516:	af0a      	add	r7, sp, #40	; 0x28
 8001518:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e116      	b.n	8001752 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d106      	bne.n	8001544 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fae8 	bl	8000b14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2203      	movs	r2, #3
 8001548:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f002 fdf0 	bl	8004148 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	687e      	ldr	r6, [r7, #4]
 8001570:	466d      	mov	r5, sp
 8001572:	f106 0410 	add.w	r4, r6, #16
 8001576:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001578:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800157a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800157c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800157e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001582:	e885 0003 	stmia.w	r5, {r0, r1}
 8001586:	1d33      	adds	r3, r6, #4
 8001588:	cb0e      	ldmia	r3, {r1, r2, r3}
 800158a:	6838      	ldr	r0, [r7, #0]
 800158c:	f002 fd54 	bl	8004038 <USB_CoreInit>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2202      	movs	r2, #2
 800159a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e0d7      	b.n	8001752 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f002 fdde 	bl	800416a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	e04a      	b.n	800164a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015b4:	7bfa      	ldrb	r2, [r7, #15]
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	4413      	add	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	440b      	add	r3, r1
 80015c2:	333d      	adds	r3, #61	; 0x3d
 80015c4:	2201      	movs	r2, #1
 80015c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015c8:	7bfa      	ldrb	r2, [r7, #15]
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4413      	add	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	440b      	add	r3, r1
 80015d6:	333c      	adds	r3, #60	; 0x3c
 80015d8:	7bfa      	ldrb	r2, [r7, #15]
 80015da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015dc:	7bfa      	ldrb	r2, [r7, #15]
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	b298      	uxth	r0, r3
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	4413      	add	r3, r2
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	3344      	adds	r3, #68	; 0x44
 80015f0:	4602      	mov	r2, r0
 80015f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	3340      	adds	r3, #64	; 0x40
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001608:	7bfa      	ldrb	r2, [r7, #15]
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4613      	mov	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4413      	add	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	3348      	adds	r3, #72	; 0x48
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4413      	add	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	334c      	adds	r3, #76	; 0x4c
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001630:	7bfa      	ldrb	r2, [r7, #15]
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4613      	mov	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4413      	add	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	3354      	adds	r3, #84	; 0x54
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	3301      	adds	r3, #1
 8001648:	73fb      	strb	r3, [r7, #15]
 800164a:	7bfa      	ldrb	r2, [r7, #15]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	429a      	cmp	r2, r3
 8001652:	d3af      	bcc.n	80015b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]
 8001658:	e044      	b.n	80016e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800165a:	7bfa      	ldrb	r2, [r7, #15]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4613      	mov	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4413      	add	r3, r2
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	440b      	add	r3, r1
 8001668:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001670:	7bfa      	ldrb	r2, [r7, #15]
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	4613      	mov	r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4413      	add	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	440b      	add	r3, r1
 800167e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001686:	7bfa      	ldrb	r2, [r7, #15]
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	4613      	mov	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	4413      	add	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800169c:	7bfa      	ldrb	r2, [r7, #15]
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	4613      	mov	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4413      	add	r3, r2
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	440b      	add	r3, r1
 80016aa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016b2:	7bfa      	ldrb	r2, [r7, #15]
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016c8:	7bfa      	ldrb	r2, [r7, #15]
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4413      	add	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	3301      	adds	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	7bfa      	ldrb	r2, [r7, #15]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d3b5      	bcc.n	800165a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	603b      	str	r3, [r7, #0]
 80016f4:	687e      	ldr	r6, [r7, #4]
 80016f6:	466d      	mov	r5, sp
 80016f8:	f106 0410 	add.w	r4, r6, #16
 80016fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001704:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001708:	e885 0003 	stmia.w	r5, {r0, r1}
 800170c:	1d33      	adds	r3, r6, #4
 800170e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001710:	6838      	ldr	r0, [r7, #0]
 8001712:	f002 fd77 	bl	8004204 <USB_DevInit>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2202      	movs	r2, #2
 8001720:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e014      	b.n	8001752 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	2b01      	cmp	r3, #1
 800173e:	d102      	bne.n	8001746 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f80b 	bl	800175c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f002 ff45 	bl	80045da <USB_DevDisconnect>

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800175c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2201      	movs	r2, #1
 800176e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_PCDEx_ActivateLPM+0x44>)
 800178c:	4313      	orrs	r3, r2
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	10000003 	.word	0x10000003

080017a4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a04      	ldr	r2, [pc, #16]	; (80017c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80017ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40007000 	.word	0x40007000

080017c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	4b23      	ldr	r3, [pc, #140]	; (800185c <HAL_PWREx_EnableOverDrive+0x98>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	4a22      	ldr	r2, [pc, #136]	; (800185c <HAL_PWREx_EnableOverDrive+0x98>)
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017d8:	6413      	str	r3, [r2, #64]	; 0x40
 80017da:	4b20      	ldr	r3, [pc, #128]	; (800185c <HAL_PWREx_EnableOverDrive+0x98>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80017e6:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a1d      	ldr	r2, [pc, #116]	; (8001860 <HAL_PWREx_EnableOverDrive+0x9c>)
 80017ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017f2:	f7ff fad3 	bl	8000d9c <HAL_GetTick>
 80017f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017f8:	e009      	b.n	800180e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017fa:	f7ff facf 	bl	8000d9c <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001808:	d901      	bls.n	800180e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e022      	b.n	8001854 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800181a:	d1ee      	bne.n	80017fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_PWREx_EnableOverDrive+0x9c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001826:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001828:	f7ff fab8 	bl	8000d9c <HAL_GetTick>
 800182c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800182e:	e009      	b.n	8001844 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001830:	f7ff fab4 	bl	8000d9c <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800183e:	d901      	bls.n	8001844 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e007      	b.n	8001854 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001850:	d1ee      	bne.n	8001830 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40023800 	.word	0x40023800
 8001860:	40007000 	.word	0x40007000

08001864 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800186c:	2300      	movs	r3, #0
 800186e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e291      	b.n	8001d9e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 8087 	beq.w	8001996 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001888:	4b96      	ldr	r3, [pc, #600]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 030c 	and.w	r3, r3, #12
 8001890:	2b04      	cmp	r3, #4
 8001892:	d00c      	beq.n	80018ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001894:	4b93      	ldr	r3, [pc, #588]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 030c 	and.w	r3, r3, #12
 800189c:	2b08      	cmp	r3, #8
 800189e:	d112      	bne.n	80018c6 <HAL_RCC_OscConfig+0x62>
 80018a0:	4b90      	ldr	r3, [pc, #576]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ac:	d10b      	bne.n	80018c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ae:	4b8d      	ldr	r3, [pc, #564]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d06c      	beq.n	8001994 <HAL_RCC_OscConfig+0x130>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d168      	bne.n	8001994 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e26b      	b.n	8001d9e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x7a>
 80018d0:	4b84      	ldr	r3, [pc, #528]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a83      	ldr	r2, [pc, #524]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 80018d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	e02e      	b.n	800193c <HAL_RCC_OscConfig+0xd8>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x9c>
 80018e6:	4b7f      	ldr	r3, [pc, #508]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a7e      	ldr	r2, [pc, #504]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 80018ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	4b7c      	ldr	r3, [pc, #496]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a7b      	ldr	r2, [pc, #492]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 80018f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e01d      	b.n	800193c <HAL_RCC_OscConfig+0xd8>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001908:	d10c      	bne.n	8001924 <HAL_RCC_OscConfig+0xc0>
 800190a:	4b76      	ldr	r3, [pc, #472]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a75      	ldr	r2, [pc, #468]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 8001910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	4b73      	ldr	r3, [pc, #460]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a72      	ldr	r2, [pc, #456]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 800191c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	e00b      	b.n	800193c <HAL_RCC_OscConfig+0xd8>
 8001924:	4b6f      	ldr	r3, [pc, #444]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a6e      	ldr	r2, [pc, #440]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 800192a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	4b6c      	ldr	r3, [pc, #432]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a6b      	ldr	r2, [pc, #428]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 8001936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d013      	beq.n	800196c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff fa2a 	bl	8000d9c <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800194c:	f7ff fa26 	bl	8000d9c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	; 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e21f      	b.n	8001d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	4b61      	ldr	r3, [pc, #388]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0xe8>
 800196a:	e014      	b.n	8001996 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196c:	f7ff fa16 	bl	8000d9c <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001974:	f7ff fa12 	bl	8000d9c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b64      	cmp	r3, #100	; 0x64
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e20b      	b.n	8001d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001986:	4b57      	ldr	r3, [pc, #348]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1f0      	bne.n	8001974 <HAL_RCC_OscConfig+0x110>
 8001992:	e000      	b.n	8001996 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d069      	beq.n	8001a76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019a2:	4b50      	ldr	r3, [pc, #320]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00b      	beq.n	80019c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ae:	4b4d      	ldr	r3, [pc, #308]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b08      	cmp	r3, #8
 80019b8:	d11c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x190>
 80019ba:	4b4a      	ldr	r3, [pc, #296]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d116      	bne.n	80019f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c6:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d005      	beq.n	80019de <HAL_RCC_OscConfig+0x17a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d001      	beq.n	80019de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e1df      	b.n	8001d9e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019de:	4b41      	ldr	r3, [pc, #260]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	493d      	ldr	r1, [pc, #244]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f2:	e040      	b.n	8001a76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d023      	beq.n	8001a44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019fc:	4b39      	ldr	r3, [pc, #228]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a38      	ldr	r2, [pc, #224]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a08:	f7ff f9c8 	bl	8000d9c <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a10:	f7ff f9c4 	bl	8000d9c <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e1bd      	b.n	8001d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a22:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	4929      	ldr	r1, [pc, #164]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]
 8001a42:	e018      	b.n	8001a76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a26      	ldr	r2, [pc, #152]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff f9a4 	bl	8000d9c <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a58:	f7ff f9a0 	bl	8000d9c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e199      	b.n	8001d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d038      	beq.n	8001af4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d019      	beq.n	8001abe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 8001a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a8e:	4a15      	ldr	r2, [pc, #84]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a96:	f7ff f981 	bl	8000d9c <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9e:	f7ff f97d 	bl	8000d9c <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e176      	b.n	8001d9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 8001ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x23a>
 8001abc:	e01a      	b.n	8001af4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 8001ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac2:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <HAL_RCC_OscConfig+0x280>)
 8001ac4:	f023 0301 	bic.w	r3, r3, #1
 8001ac8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aca:	f7ff f967 	bl	8000d9c <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad0:	e00a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad2:	f7ff f963 	bl	8000d9c <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d903      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e15c      	b.n	8001d9e <HAL_RCC_OscConfig+0x53a>
 8001ae4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae8:	4b91      	ldr	r3, [pc, #580]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1ee      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80a4 	beq.w	8001c4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b02:	4b8b      	ldr	r3, [pc, #556]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10d      	bne.n	8001b2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	4b88      	ldr	r3, [pc, #544]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	4a87      	ldr	r2, [pc, #540]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b18:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1a:	4b85      	ldr	r3, [pc, #532]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b26:	2301      	movs	r3, #1
 8001b28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b2a:	4b82      	ldr	r3, [pc, #520]	; (8001d34 <HAL_RCC_OscConfig+0x4d0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d118      	bne.n	8001b68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b36:	4b7f      	ldr	r3, [pc, #508]	; (8001d34 <HAL_RCC_OscConfig+0x4d0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a7e      	ldr	r2, [pc, #504]	; (8001d34 <HAL_RCC_OscConfig+0x4d0>)
 8001b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b42:	f7ff f92b 	bl	8000d9c <HAL_GetTick>
 8001b46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b48:	e008      	b.n	8001b5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4a:	f7ff f927 	bl	8000d9c <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	2b64      	cmp	r3, #100	; 0x64
 8001b56:	d901      	bls.n	8001b5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e120      	b.n	8001d9e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b5c:	4b75      	ldr	r3, [pc, #468]	; (8001d34 <HAL_RCC_OscConfig+0x4d0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f0      	beq.n	8001b4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d106      	bne.n	8001b7e <HAL_RCC_OscConfig+0x31a>
 8001b70:	4b6f      	ldr	r3, [pc, #444]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b74:	4a6e      	ldr	r2, [pc, #440]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b7c:	e02d      	b.n	8001bda <HAL_RCC_OscConfig+0x376>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x33c>
 8001b86:	4b6a      	ldr	r3, [pc, #424]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8a:	4a69      	ldr	r2, [pc, #420]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	6713      	str	r3, [r2, #112]	; 0x70
 8001b92:	4b67      	ldr	r3, [pc, #412]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b96:	4a66      	ldr	r2, [pc, #408]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001b98:	f023 0304 	bic.w	r3, r3, #4
 8001b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b9e:	e01c      	b.n	8001bda <HAL_RCC_OscConfig+0x376>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b05      	cmp	r3, #5
 8001ba6:	d10c      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x35e>
 8001ba8:	4b61      	ldr	r3, [pc, #388]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bac:	4a60      	ldr	r2, [pc, #384]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001bae:	f043 0304 	orr.w	r3, r3, #4
 8001bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb4:	4b5e      	ldr	r3, [pc, #376]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb8:	4a5d      	ldr	r2, [pc, #372]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc0:	e00b      	b.n	8001bda <HAL_RCC_OscConfig+0x376>
 8001bc2:	4b5b      	ldr	r3, [pc, #364]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc6:	4a5a      	ldr	r2, [pc, #360]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001bc8:	f023 0301 	bic.w	r3, r3, #1
 8001bcc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bce:	4b58      	ldr	r3, [pc, #352]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd2:	4a57      	ldr	r2, [pc, #348]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001bd4:	f023 0304 	bic.w	r3, r3, #4
 8001bd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d015      	beq.n	8001c0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be2:	f7ff f8db 	bl	8000d9c <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bea:	f7ff f8d7 	bl	8000d9c <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e0ce      	b.n	8001d9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c00:	4b4b      	ldr	r3, [pc, #300]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0ee      	beq.n	8001bea <HAL_RCC_OscConfig+0x386>
 8001c0c:	e014      	b.n	8001c38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0e:	f7ff f8c5 	bl	8000d9c <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c14:	e00a      	b.n	8001c2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c16:	f7ff f8c1 	bl	8000d9c <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e0b8      	b.n	8001d9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2c:	4b40      	ldr	r3, [pc, #256]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1ee      	bne.n	8001c16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c38:	7dfb      	ldrb	r3, [r7, #23]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d105      	bne.n	8001c4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c3e:	4b3c      	ldr	r3, [pc, #240]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4a3b      	ldr	r2, [pc, #236]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 80a4 	beq.w	8001d9c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c54:	4b36      	ldr	r3, [pc, #216]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d06b      	beq.n	8001d38 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d149      	bne.n	8001cfc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c68:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a30      	ldr	r2, [pc, #192]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001c6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c74:	f7ff f892 	bl	8000d9c <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7c:	f7ff f88e 	bl	8000d9c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e087      	b.n	8001d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8e:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69da      	ldr	r2, [r3, #28]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	019b      	lsls	r3, r3, #6
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	085b      	lsrs	r3, r3, #1
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	041b      	lsls	r3, r3, #16
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	061b      	lsls	r3, r3, #24
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	4a1b      	ldr	r2, [pc, #108]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001cc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001cc6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc8:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a18      	ldr	r2, [pc, #96]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7ff f862 	bl	8000d9c <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7ff f85e 	bl	8000d9c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e057      	b.n	8001d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x478>
 8001cfa:	e04f      	b.n	8001d9c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0b      	ldr	r2, [pc, #44]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff f848 	bl	8000d9c <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d10:	f7ff f844 	bl	8000d9c <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e03d      	b.n	8001d9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d22:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <HAL_RCC_OscConfig+0x4cc>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x4ac>
 8001d2e:	e035      	b.n	8001d9c <HAL_RCC_OscConfig+0x538>
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001d38:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <HAL_RCC_OscConfig+0x544>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d028      	beq.n	8001d98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d121      	bne.n	8001d98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d11a      	bne.n	8001d98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d68:	4013      	ands	r3, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d111      	bne.n	8001d98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7e:	085b      	lsrs	r3, r3, #1
 8001d80:	3b01      	subs	r3, #1
 8001d82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d107      	bne.n	8001d98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d001      	beq.n	8001d9c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800

08001dac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0d0      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc4:	4b6a      	ldr	r3, [pc, #424]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 030f 	and.w	r3, r3, #15
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d910      	bls.n	8001df4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd2:	4b67      	ldr	r3, [pc, #412]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 020f 	bic.w	r2, r3, #15
 8001dda:	4965      	ldr	r1, [pc, #404]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de2:	4b63      	ldr	r3, [pc, #396]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e0b8      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d020      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d005      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e0c:	4b59      	ldr	r3, [pc, #356]	; (8001f74 <HAL_RCC_ClockConfig+0x1c8>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	4a58      	ldr	r2, [pc, #352]	; (8001f74 <HAL_RCC_ClockConfig+0x1c8>)
 8001e12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0308 	and.w	r3, r3, #8
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e24:	4b53      	ldr	r3, [pc, #332]	; (8001f74 <HAL_RCC_ClockConfig+0x1c8>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4a52      	ldr	r2, [pc, #328]	; (8001f74 <HAL_RCC_ClockConfig+0x1c8>)
 8001e2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e2e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e30:	4b50      	ldr	r3, [pc, #320]	; (8001f74 <HAL_RCC_ClockConfig+0x1c8>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	494d      	ldr	r1, [pc, #308]	; (8001f74 <HAL_RCC_ClockConfig+0x1c8>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d040      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d107      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e56:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <HAL_RCC_ClockConfig+0x1c8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d115      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e07f      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d107      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e6e:	4b41      	ldr	r3, [pc, #260]	; (8001f74 <HAL_RCC_ClockConfig+0x1c8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d109      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e073      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e7e:	4b3d      	ldr	r3, [pc, #244]	; (8001f74 <HAL_RCC_ClockConfig+0x1c8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e06b      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e8e:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <HAL_RCC_ClockConfig+0x1c8>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f023 0203 	bic.w	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	4936      	ldr	r1, [pc, #216]	; (8001f74 <HAL_RCC_ClockConfig+0x1c8>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ea0:	f7fe ff7c 	bl	8000d9c <HAL_GetTick>
 8001ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea6:	e00a      	b.n	8001ebe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ea8:	f7fe ff78 	bl	8000d9c <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e053      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 020c 	and.w	r2, r3, #12
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d1eb      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed0:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 030f 	and.w	r3, r3, #15
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d210      	bcs.n	8001f00 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ede:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 020f 	bic.w	r2, r3, #15
 8001ee6:	4922      	ldr	r1, [pc, #136]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eee:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e032      	b.n	8001f66 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <HAL_RCC_ClockConfig+0x1c8>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4916      	ldr	r1, [pc, #88]	; (8001f74 <HAL_RCC_ClockConfig+0x1c8>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d009      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	490e      	ldr	r1, [pc, #56]	; (8001f74 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f3e:	f000 f821 	bl	8001f84 <HAL_RCC_GetSysClockFreq>
 8001f42:	4602      	mov	r2, r0
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_RCC_ClockConfig+0x1c8>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	091b      	lsrs	r3, r3, #4
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	490a      	ldr	r1, [pc, #40]	; (8001f78 <HAL_RCC_ClockConfig+0x1cc>)
 8001f50:	5ccb      	ldrb	r3, [r1, r3]
 8001f52:	fa22 f303 	lsr.w	r3, r2, r3
 8001f56:	4a09      	ldr	r2, [pc, #36]	; (8001f7c <HAL_RCC_ClockConfig+0x1d0>)
 8001f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_RCC_ClockConfig+0x1d4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fed8 	bl	8000d14 <HAL_InitTick>

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023c00 	.word	0x40023c00
 8001f74:	40023800 	.word	0x40023800
 8001f78:	08004734 	.word	0x08004734
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	20000004 	.word	0x20000004

08001f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f88:	b094      	sub	sp, #80	; 0x50
 8001f8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8001f90:	2300      	movs	r3, #0
 8001f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f94:	2300      	movs	r3, #0
 8001f96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f9c:	4b79      	ldr	r3, [pc, #484]	; (8002184 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d00d      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x40>
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	f200 80e1 	bhi.w	8002170 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d003      	beq.n	8001fbe <HAL_RCC_GetSysClockFreq+0x3a>
 8001fb6:	e0db      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fb8:	4b73      	ldr	r3, [pc, #460]	; (8002188 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fbc:	e0db      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fbe:	4b73      	ldr	r3, [pc, #460]	; (800218c <HAL_RCC_GetSysClockFreq+0x208>)
 8001fc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001fc2:	e0d8      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fc4:	4b6f      	ldr	r3, [pc, #444]	; (8002184 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fcc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001fce:	4b6d      	ldr	r3, [pc, #436]	; (8002184 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d063      	beq.n	80020a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fda:	4b6a      	ldr	r3, [pc, #424]	; (8002184 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	099b      	lsrs	r3, r3, #6
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fe4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fec:	633b      	str	r3, [r7, #48]	; 0x30
 8001fee:	2300      	movs	r3, #0
 8001ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8001ff2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001ff6:	4622      	mov	r2, r4
 8001ff8:	462b      	mov	r3, r5
 8001ffa:	f04f 0000 	mov.w	r0, #0
 8001ffe:	f04f 0100 	mov.w	r1, #0
 8002002:	0159      	lsls	r1, r3, #5
 8002004:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002008:	0150      	lsls	r0, r2, #5
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4621      	mov	r1, r4
 8002010:	1a51      	subs	r1, r2, r1
 8002012:	6139      	str	r1, [r7, #16]
 8002014:	4629      	mov	r1, r5
 8002016:	eb63 0301 	sbc.w	r3, r3, r1
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002028:	4659      	mov	r1, fp
 800202a:	018b      	lsls	r3, r1, #6
 800202c:	4651      	mov	r1, sl
 800202e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002032:	4651      	mov	r1, sl
 8002034:	018a      	lsls	r2, r1, #6
 8002036:	4651      	mov	r1, sl
 8002038:	ebb2 0801 	subs.w	r8, r2, r1
 800203c:	4659      	mov	r1, fp
 800203e:	eb63 0901 	sbc.w	r9, r3, r1
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	f04f 0300 	mov.w	r3, #0
 800204a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800204e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002052:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002056:	4690      	mov	r8, r2
 8002058:	4699      	mov	r9, r3
 800205a:	4623      	mov	r3, r4
 800205c:	eb18 0303 	adds.w	r3, r8, r3
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	462b      	mov	r3, r5
 8002064:	eb49 0303 	adc.w	r3, r9, r3
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	f04f 0300 	mov.w	r3, #0
 8002072:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002076:	4629      	mov	r1, r5
 8002078:	024b      	lsls	r3, r1, #9
 800207a:	4621      	mov	r1, r4
 800207c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002080:	4621      	mov	r1, r4
 8002082:	024a      	lsls	r2, r1, #9
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800208a:	2200      	movs	r2, #0
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
 800208e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002090:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002094:	f7fe f8c4 	bl	8000220 <__aeabi_uldivmod>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4613      	mov	r3, r2
 800209e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020a0:	e058      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a2:	4b38      	ldr	r3, [pc, #224]	; (8002184 <HAL_RCC_GetSysClockFreq+0x200>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	099b      	lsrs	r3, r3, #6
 80020a8:	2200      	movs	r2, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	4611      	mov	r1, r2
 80020ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020b2:	623b      	str	r3, [r7, #32]
 80020b4:	2300      	movs	r3, #0
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
 80020b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020bc:	4642      	mov	r2, r8
 80020be:	464b      	mov	r3, r9
 80020c0:	f04f 0000 	mov.w	r0, #0
 80020c4:	f04f 0100 	mov.w	r1, #0
 80020c8:	0159      	lsls	r1, r3, #5
 80020ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020ce:	0150      	lsls	r0, r2, #5
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4641      	mov	r1, r8
 80020d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80020da:	4649      	mov	r1, r9
 80020dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020f4:	ebb2 040a 	subs.w	r4, r2, sl
 80020f8:	eb63 050b 	sbc.w	r5, r3, fp
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	00eb      	lsls	r3, r5, #3
 8002106:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800210a:	00e2      	lsls	r2, r4, #3
 800210c:	4614      	mov	r4, r2
 800210e:	461d      	mov	r5, r3
 8002110:	4643      	mov	r3, r8
 8002112:	18e3      	adds	r3, r4, r3
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	464b      	mov	r3, r9
 8002118:	eb45 0303 	adc.w	r3, r5, r3
 800211c:	607b      	str	r3, [r7, #4]
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	f04f 0300 	mov.w	r3, #0
 8002126:	e9d7 4500 	ldrd	r4, r5, [r7]
 800212a:	4629      	mov	r1, r5
 800212c:	028b      	lsls	r3, r1, #10
 800212e:	4621      	mov	r1, r4
 8002130:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002134:	4621      	mov	r1, r4
 8002136:	028a      	lsls	r2, r1, #10
 8002138:	4610      	mov	r0, r2
 800213a:	4619      	mov	r1, r3
 800213c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800213e:	2200      	movs	r2, #0
 8002140:	61bb      	str	r3, [r7, #24]
 8002142:	61fa      	str	r2, [r7, #28]
 8002144:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002148:	f7fe f86a 	bl	8000220 <__aeabi_uldivmod>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4613      	mov	r3, r2
 8002152:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_RCC_GetSysClockFreq+0x200>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	0c1b      	lsrs	r3, r3, #16
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	3301      	adds	r3, #1
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002164:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002168:	fbb2 f3f3 	udiv	r3, r2, r3
 800216c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800216e:	e002      	b.n	8002176 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_RCC_GetSysClockFreq+0x204>)
 8002172:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002178:	4618      	mov	r0, r3
 800217a:	3750      	adds	r7, #80	; 0x50
 800217c:	46bd      	mov	sp, r7
 800217e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	00f42400 	.word	0x00f42400
 800218c:	007a1200 	.word	0x007a1200

08002190 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002196:	681b      	ldr	r3, [r3, #0]
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000000 	.word	0x20000000

080021a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021ac:	f7ff fff0 	bl	8002190 <HAL_RCC_GetHCLKFreq>
 80021b0:	4602      	mov	r2, r0
 80021b2:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	0a9b      	lsrs	r3, r3, #10
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	4903      	ldr	r1, [pc, #12]	; (80021cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021be:	5ccb      	ldrb	r3, [r1, r3]
 80021c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40023800 	.word	0x40023800
 80021cc:	08004744 	.word	0x08004744

080021d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021d4:	f7ff ffdc 	bl	8002190 <HAL_RCC_GetHCLKFreq>
 80021d8:	4602      	mov	r2, r0
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	0b5b      	lsrs	r3, r3, #13
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	4903      	ldr	r1, [pc, #12]	; (80021f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021e6:	5ccb      	ldrb	r3, [r1, r3]
 80021e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40023800 	.word	0x40023800
 80021f4:	08004744 	.word	0x08004744

080021f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d012      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800221c:	4b65      	ldr	r3, [pc, #404]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4a64      	ldr	r2, [pc, #400]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002222:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002226:	6093      	str	r3, [r2, #8]
 8002228:	4b62      	ldr	r3, [pc, #392]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	4960      	ldr	r1, [pc, #384]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002232:	4313      	orrs	r3, r2
 8002234:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800223e:	2301      	movs	r3, #1
 8002240:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d017      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800224e:	4b59      	ldr	r3, [pc, #356]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002254:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225c:	4955      	ldr	r1, [pc, #340]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800226c:	d101      	bne.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800226e:	2301      	movs	r3, #1
 8002270:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800227a:	2301      	movs	r3, #1
 800227c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d017      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800228a:	4b4a      	ldr	r3, [pc, #296]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800228c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002290:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002298:	4946      	ldr	r1, [pc, #280]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022a8:	d101      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80022aa:	2301      	movs	r3, #1
 80022ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80022b6:	2301      	movs	r3, #1
 80022b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 808b 	beq.w	80023de <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80022c8:	4b3a      	ldr	r3, [pc, #232]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	4a39      	ldr	r2, [pc, #228]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d2:	6413      	str	r3, [r2, #64]	; 0x40
 80022d4:	4b37      	ldr	r3, [pc, #220]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80022e0:	4b35      	ldr	r3, [pc, #212]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a34      	ldr	r2, [pc, #208]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ec:	f7fe fd56 	bl	8000d9c <HAL_GetTick>
 80022f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80022f2:	e008      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f4:	f7fe fd52 	bl	8000d9c <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	; 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e2bc      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002306:	4b2c      	ldr	r3, [pc, #176]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002312:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800231a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d035      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	429a      	cmp	r2, r3
 800232e:	d02e      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002330:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002338:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800233a:	4b1e      	ldr	r3, [pc, #120]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233e:	4a1d      	ldr	r2, [pc, #116]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002344:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002346:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234a:	4a1a      	ldr	r2, [pc, #104]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800234c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002350:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002352:	4a18      	ldr	r2, [pc, #96]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002358:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800235a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	d114      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f7fe fd1a 	bl	8000d9c <HAL_GetTick>
 8002368:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800236a:	e00a      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800236c:	f7fe fd16 	bl	8000d9c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e27e      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002382:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0ee      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002396:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800239a:	d111      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800239c:	4b05      	ldr	r3, [pc, #20]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80023a8:	4b04      	ldr	r3, [pc, #16]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80023aa:	400b      	ands	r3, r1
 80023ac:	4901      	ldr	r1, [pc, #4]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	608b      	str	r3, [r1, #8]
 80023b2:	e00b      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40007000 	.word	0x40007000
 80023bc:	0ffffcff 	.word	0x0ffffcff
 80023c0:	4ba4      	ldr	r3, [pc, #656]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	4aa3      	ldr	r2, [pc, #652]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80023ca:	6093      	str	r3, [r2, #8]
 80023cc:	4ba1      	ldr	r3, [pc, #644]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d8:	499e      	ldr	r1, [pc, #632]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d010      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80023ea:	4b9a      	ldr	r3, [pc, #616]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023f0:	4a98      	ldr	r2, [pc, #608]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80023fa:	4b96      	ldr	r3, [pc, #600]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80023fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	4993      	ldr	r1, [pc, #588]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002406:	4313      	orrs	r3, r2
 8002408:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00a      	beq.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002418:	4b8e      	ldr	r3, [pc, #568]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002426:	498b      	ldr	r1, [pc, #556]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002428:	4313      	orrs	r3, r2
 800242a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00a      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800243a:	4b86      	ldr	r3, [pc, #536]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800243c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002440:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002448:	4982      	ldr	r1, [pc, #520]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00a      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800245c:	4b7d      	ldr	r3, [pc, #500]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800245e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002462:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800246a:	497a      	ldr	r1, [pc, #488]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800247e:	4b75      	ldr	r3, [pc, #468]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002484:	f023 0203 	bic.w	r2, r3, #3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248c:	4971      	ldr	r1, [pc, #452]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024a0:	4b6c      	ldr	r3, [pc, #432]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a6:	f023 020c 	bic.w	r2, r3, #12
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	4969      	ldr	r1, [pc, #420]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024c2:	4b64      	ldr	r3, [pc, #400]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d0:	4960      	ldr	r1, [pc, #384]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00a      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024e4:	4b5b      	ldr	r3, [pc, #364]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f2:	4958      	ldr	r1, [pc, #352]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002506:	4b53      	ldr	r3, [pc, #332]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002514:	494f      	ldr	r1, [pc, #316]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002528:	4b4a      	ldr	r3, [pc, #296]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002536:	4947      	ldr	r1, [pc, #284]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800254a:	4b42      	ldr	r3, [pc, #264]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800254c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002550:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002558:	493e      	ldr	r1, [pc, #248]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800256c:	4b39      	ldr	r3, [pc, #228]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800256e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002572:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257a:	4936      	ldr	r1, [pc, #216]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d011      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800258e:	4b31      	ldr	r3, [pc, #196]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002594:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800259c:	492d      	ldr	r1, [pc, #180]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ac:	d101      	bne.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80025ae:	2301      	movs	r3, #1
 80025b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025be:	4b25      	ldr	r3, [pc, #148]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025cc:	4921      	ldr	r1, [pc, #132]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025e0:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025ee:	4919      	ldr	r1, [pc, #100]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002602:	4b14      	ldr	r3, [pc, #80]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002608:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002610:	4910      	ldr	r1, [pc, #64]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d006      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 809d 	beq.w	8002766 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800262c:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a08      	ldr	r2, [pc, #32]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002632:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002636:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002638:	f7fe fbb0 	bl	8000d9c <HAL_GetTick>
 800263c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800263e:	e00b      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002640:	f7fe fbac 	bl	8000d9c <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b64      	cmp	r3, #100	; 0x64
 800264c:	d904      	bls.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e116      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002658:	4b8b      	ldr	r3, [pc, #556]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1ed      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d017      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	2b00      	cmp	r3, #0
 8002676:	d113      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002678:	4b83      	ldr	r3, [pc, #524]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800267a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800267e:	0e1b      	lsrs	r3, r3, #24
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	019a      	lsls	r2, r3, #6
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	061b      	lsls	r3, r3, #24
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	071b      	lsls	r3, r3, #28
 8002698:	497b      	ldr	r1, [pc, #492]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d004      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026b4:	d00a      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d024      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ca:	d11f      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80026cc:	4b6e      	ldr	r3, [pc, #440]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80026ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026d2:	0f1b      	lsrs	r3, r3, #28
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	019a      	lsls	r2, r3, #6
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	061b      	lsls	r3, r3, #24
 80026e6:	431a      	orrs	r2, r3
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	071b      	lsls	r3, r3, #28
 80026ec:	4966      	ldr	r1, [pc, #408]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80026f4:	4b64      	ldr	r3, [pc, #400]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80026f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026fa:	f023 021f 	bic.w	r2, r3, #31
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	3b01      	subs	r3, #1
 8002704:	4960      	ldr	r1, [pc, #384]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00d      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	019a      	lsls	r2, r3, #6
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	061b      	lsls	r3, r3, #24
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	071b      	lsls	r3, r3, #28
 800272c:	4956      	ldr	r1, [pc, #344]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002734:	4b54      	ldr	r3, [pc, #336]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a53      	ldr	r2, [pc, #332]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800273a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800273e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002740:	f7fe fb2c 	bl	8000d9c <HAL_GetTick>
 8002744:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002746:	e008      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002748:	f7fe fb28 	bl	8000d9c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b64      	cmp	r3, #100	; 0x64
 8002754:	d901      	bls.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e092      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800275a:	4b4b      	ldr	r3, [pc, #300]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0f0      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2b01      	cmp	r3, #1
 800276a:	f040 8088 	bne.w	800287e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800276e:	4b46      	ldr	r3, [pc, #280]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a45      	ldr	r2, [pc, #276]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002778:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800277a:	f7fe fb0f 	bl	8000d9c <HAL_GetTick>
 800277e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002780:	e008      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002782:	f7fe fb0b 	bl	8000d9c <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b64      	cmp	r3, #100	; 0x64
 800278e:	d901      	bls.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e075      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002794:	4b3c      	ldr	r3, [pc, #240]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800279c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027a0:	d0ef      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d009      	beq.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d024      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d120      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80027ca:	4b2f      	ldr	r3, [pc, #188]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	019a      	lsls	r2, r3, #6
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	041b      	lsls	r3, r3, #16
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	061b      	lsls	r3, r3, #24
 80027ea:	4927      	ldr	r1, [pc, #156]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80027f2:	4b25      	ldr	r3, [pc, #148]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80027f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	3b01      	subs	r3, #1
 8002802:	021b      	lsls	r3, r3, #8
 8002804:	4920      	ldr	r1, [pc, #128]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d018      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x652>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002820:	d113      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002822:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002828:	0e1b      	lsrs	r3, r3, #24
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	019a      	lsls	r2, r3, #6
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	041b      	lsls	r3, r3, #16
 800283c:	431a      	orrs	r2, r3
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	4911      	ldr	r1, [pc, #68]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a0e      	ldr	r2, [pc, #56]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002856:	f7fe faa1 	bl	8000d9c <HAL_GetTick>
 800285a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800285e:	f7fe fa9d 	bl	8000d9c <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b64      	cmp	r3, #100	; 0x64
 800286a:	d901      	bls.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e007      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800287c:	d1ef      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3720      	adds	r7, #32
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40023800 	.word	0x40023800

0800288c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e049      	b.n	8002932 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fe f8a0 	bl	80009f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3304      	adds	r3, #4
 80028c8:	4619      	mov	r1, r3
 80028ca:	4610      	mov	r0, r2
 80028cc:	f000 f9f6 	bl	8002cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b01      	cmp	r3, #1
 800294e:	d001      	beq.n	8002954 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e054      	b.n	80029fe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a26      	ldr	r2, [pc, #152]	; (8002a0c <HAL_TIM_Base_Start_IT+0xd0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d022      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x80>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297e:	d01d      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x80>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a22      	ldr	r2, [pc, #136]	; (8002a10 <HAL_TIM_Base_Start_IT+0xd4>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d018      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x80>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a21      	ldr	r2, [pc, #132]	; (8002a14 <HAL_TIM_Base_Start_IT+0xd8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d013      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x80>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1f      	ldr	r2, [pc, #124]	; (8002a18 <HAL_TIM_Base_Start_IT+0xdc>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00e      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x80>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a1e      	ldr	r2, [pc, #120]	; (8002a1c <HAL_TIM_Base_Start_IT+0xe0>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d009      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x80>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1c      	ldr	r2, [pc, #112]	; (8002a20 <HAL_TIM_Base_Start_IT+0xe4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d004      	beq.n	80029bc <HAL_TIM_Base_Start_IT+0x80>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1b      	ldr	r2, [pc, #108]	; (8002a24 <HAL_TIM_Base_Start_IT+0xe8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d115      	bne.n	80029e8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_TIM_Base_Start_IT+0xec>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b06      	cmp	r3, #6
 80029cc:	d015      	beq.n	80029fa <HAL_TIM_Base_Start_IT+0xbe>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d4:	d011      	beq.n	80029fa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 0201 	orr.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e6:	e008      	b.n	80029fa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	e000      	b.n	80029fc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40010000 	.word	0x40010000
 8002a10:	40000400 	.word	0x40000400
 8002a14:	40000800 	.word	0x40000800
 8002a18:	40000c00 	.word	0x40000c00
 8002a1c:	40010400 	.word	0x40010400
 8002a20:	40014000 	.word	0x40014000
 8002a24:	40001800 	.word	0x40001800
 8002a28:	00010007 	.word	0x00010007

08002a2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d122      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d11b      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0202 	mvn.w	r2, #2
 8002a58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f905 	bl	8002c7e <HAL_TIM_IC_CaptureCallback>
 8002a74:	e005      	b.n	8002a82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f8f7 	bl	8002c6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f908 	bl	8002c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d122      	bne.n	8002adc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d11b      	bne.n	8002adc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0204 	mvn.w	r2, #4
 8002aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f8db 	bl	8002c7e <HAL_TIM_IC_CaptureCallback>
 8002ac8:	e005      	b.n	8002ad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f000 f8cd 	bl	8002c6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f8de 	bl	8002c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d122      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d11b      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f06f 0208 	mvn.w	r2, #8
 8002b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2204      	movs	r2, #4
 8002b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f8b1 	bl	8002c7e <HAL_TIM_IC_CaptureCallback>
 8002b1c:	e005      	b.n	8002b2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f8a3 	bl	8002c6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f8b4 	bl	8002c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d122      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f003 0310 	and.w	r3, r3, #16
 8002b48:	2b10      	cmp	r3, #16
 8002b4a:	d11b      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0210 	mvn.w	r2, #16
 8002b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2208      	movs	r2, #8
 8002b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f887 	bl	8002c7e <HAL_TIM_IC_CaptureCallback>
 8002b70:	e005      	b.n	8002b7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f879 	bl	8002c6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f88a 	bl	8002c92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d10e      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d107      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f06f 0201 	mvn.w	r2, #1
 8002ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fd fea0 	bl	80008f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bba:	2b80      	cmp	r3, #128	; 0x80
 8002bbc:	d10e      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc8:	2b80      	cmp	r3, #128	; 0x80
 8002bca:	d107      	bne.n	8002bdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f91a 	bl	8002e10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bea:	d10e      	bne.n	8002c0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf6:	2b80      	cmp	r3, #128	; 0x80
 8002bf8:	d107      	bne.n	8002c0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f90d 	bl	8002e24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c14:	2b40      	cmp	r3, #64	; 0x40
 8002c16:	d10e      	bne.n	8002c36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c22:	2b40      	cmp	r3, #64	; 0x40
 8002c24:	d107      	bne.n	8002c36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 f838 	bl	8002ca6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d10e      	bne.n	8002c62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	f003 0320 	and.w	r3, r3, #32
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	d107      	bne.n	8002c62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f06f 0220 	mvn.w	r2, #32
 8002c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f8cd 	bl	8002dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c62:	bf00      	nop
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a40      	ldr	r2, [pc, #256]	; (8002dd0 <TIM_Base_SetConfig+0x114>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d013      	beq.n	8002cfc <TIM_Base_SetConfig+0x40>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cda:	d00f      	beq.n	8002cfc <TIM_Base_SetConfig+0x40>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a3d      	ldr	r2, [pc, #244]	; (8002dd4 <TIM_Base_SetConfig+0x118>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00b      	beq.n	8002cfc <TIM_Base_SetConfig+0x40>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a3c      	ldr	r2, [pc, #240]	; (8002dd8 <TIM_Base_SetConfig+0x11c>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d007      	beq.n	8002cfc <TIM_Base_SetConfig+0x40>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a3b      	ldr	r2, [pc, #236]	; (8002ddc <TIM_Base_SetConfig+0x120>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d003      	beq.n	8002cfc <TIM_Base_SetConfig+0x40>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a3a      	ldr	r2, [pc, #232]	; (8002de0 <TIM_Base_SetConfig+0x124>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d108      	bne.n	8002d0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a2f      	ldr	r2, [pc, #188]	; (8002dd0 <TIM_Base_SetConfig+0x114>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d02b      	beq.n	8002d6e <TIM_Base_SetConfig+0xb2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1c:	d027      	beq.n	8002d6e <TIM_Base_SetConfig+0xb2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a2c      	ldr	r2, [pc, #176]	; (8002dd4 <TIM_Base_SetConfig+0x118>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d023      	beq.n	8002d6e <TIM_Base_SetConfig+0xb2>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a2b      	ldr	r2, [pc, #172]	; (8002dd8 <TIM_Base_SetConfig+0x11c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d01f      	beq.n	8002d6e <TIM_Base_SetConfig+0xb2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a2a      	ldr	r2, [pc, #168]	; (8002ddc <TIM_Base_SetConfig+0x120>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d01b      	beq.n	8002d6e <TIM_Base_SetConfig+0xb2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a29      	ldr	r2, [pc, #164]	; (8002de0 <TIM_Base_SetConfig+0x124>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d017      	beq.n	8002d6e <TIM_Base_SetConfig+0xb2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a28      	ldr	r2, [pc, #160]	; (8002de4 <TIM_Base_SetConfig+0x128>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d013      	beq.n	8002d6e <TIM_Base_SetConfig+0xb2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a27      	ldr	r2, [pc, #156]	; (8002de8 <TIM_Base_SetConfig+0x12c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00f      	beq.n	8002d6e <TIM_Base_SetConfig+0xb2>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a26      	ldr	r2, [pc, #152]	; (8002dec <TIM_Base_SetConfig+0x130>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00b      	beq.n	8002d6e <TIM_Base_SetConfig+0xb2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a25      	ldr	r2, [pc, #148]	; (8002df0 <TIM_Base_SetConfig+0x134>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d007      	beq.n	8002d6e <TIM_Base_SetConfig+0xb2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a24      	ldr	r2, [pc, #144]	; (8002df4 <TIM_Base_SetConfig+0x138>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d003      	beq.n	8002d6e <TIM_Base_SetConfig+0xb2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a23      	ldr	r2, [pc, #140]	; (8002df8 <TIM_Base_SetConfig+0x13c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d108      	bne.n	8002d80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <TIM_Base_SetConfig+0x114>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d003      	beq.n	8002db4 <TIM_Base_SetConfig+0xf8>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a0c      	ldr	r2, [pc, #48]	; (8002de0 <TIM_Base_SetConfig+0x124>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d103      	bne.n	8002dbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	615a      	str	r2, [r3, #20]
}
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40010000 	.word	0x40010000
 8002dd4:	40000400 	.word	0x40000400
 8002dd8:	40000800 	.word	0x40000800
 8002ddc:	40000c00 	.word	0x40000c00
 8002de0:	40010400 	.word	0x40010400
 8002de4:	40014000 	.word	0x40014000
 8002de8:	40014400 	.word	0x40014400
 8002dec:	40014800 	.word	0x40014800
 8002df0:	40001800 	.word	0x40001800
 8002df4:	40001c00 	.word	0x40001c00
 8002df8:	40002000 	.word	0x40002000

08002dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e040      	b.n	8002ecc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fd fdf2 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2224      	movs	r2, #36	; 0x24
 8002e64:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0201 	bic.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fb7c 	bl	8003574 <UART_SetConfig>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e022      	b.n	8002ecc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d002      	beq.n	8002e94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fdd4 	bl	8003a3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ea2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002eb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0201 	orr.w	r2, r2, #1
 8002ec2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fe5b 	bl	8003b80 <UART_CheckIdleState>
 8002eca:	4603      	mov	r3, r0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b08b      	sub	sp, #44	; 0x2c
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d147      	bne.n	8002f7a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d002      	beq.n	8002ef6 <HAL_UART_Transmit_IT+0x22>
 8002ef0:	88fb      	ldrh	r3, [r7, #6]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e040      	b.n	8002f7c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	88fa      	ldrh	r2, [r7, #6]
 8002f04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	88fa      	ldrh	r2, [r7, #6]
 8002f0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2221      	movs	r2, #33	; 0x21
 8002f22:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f2c:	d107      	bne.n	8002f3e <HAL_UART_Transmit_IT+0x6a>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d103      	bne.n	8002f3e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4a13      	ldr	r2, [pc, #76]	; (8002f88 <HAL_UART_Transmit_IT+0xb4>)
 8002f3a:	66da      	str	r2, [r3, #108]	; 0x6c
 8002f3c:	e002      	b.n	8002f44 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	4a12      	ldr	r2, [pc, #72]	; (8002f8c <HAL_UART_Transmit_IT+0xb8>)
 8002f42:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	e853 3f00 	ldrex	r3, [r3]
 8002f50:	613b      	str	r3, [r7, #16]
   return(result);
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f58:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	623b      	str	r3, [r7, #32]
 8002f64:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f66:	69f9      	ldr	r1, [r7, #28]
 8002f68:	6a3a      	ldr	r2, [r7, #32]
 8002f6a:	e841 2300 	strex	r3, r2, [r1]
 8002f6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1e6      	bne.n	8002f44 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	e000      	b.n	8002f7c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8002f7a:	2302      	movs	r3, #2
  }
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	372c      	adds	r7, #44	; 0x2c
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	08003f25 	.word	0x08003f25
 8002f8c:	08003e6f 	.word	0x08003e6f

08002f90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b0ba      	sub	sp, #232	; 0xe8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002fb6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002fba:	f640 030f 	movw	r3, #2063	; 0x80f
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002fc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d115      	bne.n	8002ff8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fd0:	f003 0320 	and.w	r3, r3, #32
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00f      	beq.n	8002ff8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d009      	beq.n	8002ff8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 8297 	beq.w	800351c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
      }
      return;
 8002ff6:	e291      	b.n	800351c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ff8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 8117 	beq.w	8003230 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003002:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800300e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003012:	4b85      	ldr	r3, [pc, #532]	; (8003228 <HAL_UART_IRQHandler+0x298>)
 8003014:	4013      	ands	r3, r2
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 810a 	beq.w	8003230 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800301c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d011      	beq.n	800304c <HAL_UART_IRQHandler+0xbc>
 8003028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00b      	beq.n	800304c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2201      	movs	r2, #1
 800303a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003042:	f043 0201 	orr.w	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800304c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d011      	beq.n	800307c <HAL_UART_IRQHandler+0xec>
 8003058:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00b      	beq.n	800307c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2202      	movs	r2, #2
 800306a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003072:	f043 0204 	orr.w	r2, r3, #4
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800307c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d011      	beq.n	80030ac <HAL_UART_IRQHandler+0x11c>
 8003088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00b      	beq.n	80030ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2204      	movs	r2, #4
 800309a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a2:	f043 0202 	orr.w	r2, r3, #2
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d017      	beq.n	80030e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d105      	bne.n	80030d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80030c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00b      	beq.n	80030e8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2208      	movs	r2, #8
 80030d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030de:	f043 0208 	orr.w	r2, r3, #8
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d012      	beq.n	800311a <HAL_UART_IRQHandler+0x18a>
 80030f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00c      	beq.n	800311a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003108:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003110:	f043 0220 	orr.w	r2, r3, #32
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 81fd 	beq.w	8003520 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00d      	beq.n	800314e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003154:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003162:	2b40      	cmp	r3, #64	; 0x40
 8003164:	d005      	beq.n	8003172 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003166:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800316a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800316e:	2b00      	cmp	r3, #0
 8003170:	d04f      	beq.n	8003212 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 fe01 	bl	8003d7a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003182:	2b40      	cmp	r3, #64	; 0x40
 8003184:	d141      	bne.n	800320a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	3308      	adds	r3, #8
 800318c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003190:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003194:	e853 3f00 	ldrex	r3, [r3]
 8003198:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800319c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3308      	adds	r3, #8
 80031ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1d9      	bne.n	8003186 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d013      	beq.n	8003202 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031de:	4a13      	ldr	r2, [pc, #76]	; (800322c <HAL_UART_IRQHandler+0x29c>)
 80031e0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd ff89 	bl	80010fe <HAL_DMA_Abort_IT>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d017      	beq.n	8003222 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80031fc:	4610      	mov	r0, r2
 80031fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003200:	e00f      	b.n	8003222 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f9a0 	bl	8003548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003208:	e00b      	b.n	8003222 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f99c 	bl	8003548 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003210:	e007      	b.n	8003222 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f998 	bl	8003548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003220:	e17e      	b.n	8003520 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003222:	bf00      	nop
    return;
 8003224:	e17c      	b.n	8003520 <HAL_UART_IRQHandler+0x590>
 8003226:	bf00      	nop
 8003228:	04000120 	.word	0x04000120
 800322c:	08003e43 	.word	0x08003e43

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003234:	2b01      	cmp	r3, #1
 8003236:	f040 814c 	bne.w	80034d2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800323a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800323e:	f003 0310 	and.w	r3, r3, #16
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 8145 	beq.w	80034d2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 813e 	beq.w	80034d2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2210      	movs	r2, #16
 800325c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003268:	2b40      	cmp	r3, #64	; 0x40
 800326a:	f040 80b6 	bne.w	80033da <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800327a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8150 	beq.w	8003524 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800328a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800328e:	429a      	cmp	r2, r3
 8003290:	f080 8148 	bcs.w	8003524 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800329a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032a8:	f000 8086 	beq.w	80033b8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032b8:	e853 3f00 	ldrex	r3, [r3]
 80032bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032e6:	e841 2300 	strex	r3, r2, [r1]
 80032ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80032ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1da      	bne.n	80032ac <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	3308      	adds	r3, #8
 80032fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003300:	e853 3f00 	ldrex	r3, [r3]
 8003304:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003308:	f023 0301 	bic.w	r3, r3, #1
 800330c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3308      	adds	r3, #8
 8003316:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800331a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800331e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003320:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003322:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003326:	e841 2300 	strex	r3, r2, [r1]
 800332a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800332c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1e1      	bne.n	80032f6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	3308      	adds	r3, #8
 8003338:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800333c:	e853 3f00 	ldrex	r3, [r3]
 8003340:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003348:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3308      	adds	r3, #8
 8003352:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003356:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003358:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800335c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800335e:	e841 2300 	strex	r3, r2, [r1]
 8003362:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1e3      	bne.n	8003332 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2220      	movs	r2, #32
 800336e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800337e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003380:	e853 3f00 	ldrex	r3, [r3]
 8003384:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003388:	f023 0310 	bic.w	r3, r3, #16
 800338c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800339a:	65bb      	str	r3, [r7, #88]	; 0x58
 800339c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033a2:	e841 2300 	strex	r3, r2, [r1]
 80033a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1e4      	bne.n	8003378 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd fe33 	bl	800101e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	4619      	mov	r1, r3
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f8c2 	bl	800355c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033d8:	e0a4      	b.n	8003524 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 8096 	beq.w	8003528 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80033fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 8091 	beq.w	8003528 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340e:	e853 3f00 	ldrex	r3, [r3]
 8003412:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003416:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800341a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	461a      	mov	r2, r3
 8003424:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003428:	647b      	str	r3, [r7, #68]	; 0x44
 800342a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800342e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003430:	e841 2300 	strex	r3, r2, [r1]
 8003434:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1e4      	bne.n	8003406 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3308      	adds	r3, #8
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	e853 3f00 	ldrex	r3, [r3]
 800344a:	623b      	str	r3, [r7, #32]
   return(result);
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	f023 0301 	bic.w	r3, r3, #1
 8003452:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	3308      	adds	r3, #8
 800345c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003460:	633a      	str	r2, [r7, #48]	; 0x30
 8003462:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003464:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003466:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003468:	e841 2300 	strex	r3, r2, [r1]
 800346c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1e3      	bne.n	800343c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	e853 3f00 	ldrex	r3, [r3]
 8003494:	60fb      	str	r3, [r7, #12]
   return(result);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f023 0310 	bic.w	r3, r3, #16
 800349c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034aa:	61fb      	str	r3, [r7, #28]
 80034ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ae:	69b9      	ldr	r1, [r7, #24]
 80034b0:	69fa      	ldr	r2, [r7, #28]
 80034b2:	e841 2300 	strex	r3, r2, [r1]
 80034b6:	617b      	str	r3, [r7, #20]
   return(result);
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1e4      	bne.n	8003488 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f846 	bl	800355c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034d0:	e02a      	b.n	8003528 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80034d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00e      	beq.n	80034fc <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80034de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d008      	beq.n	80034fc <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d01c      	beq.n	800352c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	4798      	blx	r3
    }
    return;
 80034fa:	e017      	b.n	800352c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003504:	2b00      	cmp	r3, #0
 8003506:	d012      	beq.n	800352e <HAL_UART_IRQHandler+0x59e>
 8003508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800350c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00c      	beq.n	800352e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fd65 	bl	8003fe4 <UART_EndTransmit_IT>
    return;
 800351a:	e008      	b.n	800352e <HAL_UART_IRQHandler+0x59e>
      return;
 800351c:	bf00      	nop
 800351e:	e006      	b.n	800352e <HAL_UART_IRQHandler+0x59e>
    return;
 8003520:	bf00      	nop
 8003522:	e004      	b.n	800352e <HAL_UART_IRQHandler+0x59e>
      return;
 8003524:	bf00      	nop
 8003526:	e002      	b.n	800352e <HAL_UART_IRQHandler+0x59e>
      return;
 8003528:	bf00      	nop
 800352a:	e000      	b.n	800352e <HAL_UART_IRQHandler+0x59e>
    return;
 800352c:	bf00      	nop
  }

}
 800352e:	37e8      	adds	r7, #232	; 0xe8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	4ba6      	ldr	r3, [pc, #664]	; (8003838 <UART_SetConfig+0x2c4>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	6979      	ldr	r1, [r7, #20]
 80035a8:	430b      	orrs	r3, r1
 80035aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a94      	ldr	r2, [pc, #592]	; (800383c <UART_SetConfig+0x2c8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d120      	bne.n	8003632 <UART_SetConfig+0xbe>
 80035f0:	4b93      	ldr	r3, [pc, #588]	; (8003840 <UART_SetConfig+0x2cc>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d816      	bhi.n	800362c <UART_SetConfig+0xb8>
 80035fe:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <UART_SetConfig+0x90>)
 8003600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003604:	08003615 	.word	0x08003615
 8003608:	08003621 	.word	0x08003621
 800360c:	0800361b 	.word	0x0800361b
 8003610:	08003627 	.word	0x08003627
 8003614:	2301      	movs	r3, #1
 8003616:	77fb      	strb	r3, [r7, #31]
 8003618:	e150      	b.n	80038bc <UART_SetConfig+0x348>
 800361a:	2302      	movs	r3, #2
 800361c:	77fb      	strb	r3, [r7, #31]
 800361e:	e14d      	b.n	80038bc <UART_SetConfig+0x348>
 8003620:	2304      	movs	r3, #4
 8003622:	77fb      	strb	r3, [r7, #31]
 8003624:	e14a      	b.n	80038bc <UART_SetConfig+0x348>
 8003626:	2308      	movs	r3, #8
 8003628:	77fb      	strb	r3, [r7, #31]
 800362a:	e147      	b.n	80038bc <UART_SetConfig+0x348>
 800362c:	2310      	movs	r3, #16
 800362e:	77fb      	strb	r3, [r7, #31]
 8003630:	e144      	b.n	80038bc <UART_SetConfig+0x348>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a83      	ldr	r2, [pc, #524]	; (8003844 <UART_SetConfig+0x2d0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d132      	bne.n	80036a2 <UART_SetConfig+0x12e>
 800363c:	4b80      	ldr	r3, [pc, #512]	; (8003840 <UART_SetConfig+0x2cc>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003642:	f003 030c 	and.w	r3, r3, #12
 8003646:	2b0c      	cmp	r3, #12
 8003648:	d828      	bhi.n	800369c <UART_SetConfig+0x128>
 800364a:	a201      	add	r2, pc, #4	; (adr r2, 8003650 <UART_SetConfig+0xdc>)
 800364c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003650:	08003685 	.word	0x08003685
 8003654:	0800369d 	.word	0x0800369d
 8003658:	0800369d 	.word	0x0800369d
 800365c:	0800369d 	.word	0x0800369d
 8003660:	08003691 	.word	0x08003691
 8003664:	0800369d 	.word	0x0800369d
 8003668:	0800369d 	.word	0x0800369d
 800366c:	0800369d 	.word	0x0800369d
 8003670:	0800368b 	.word	0x0800368b
 8003674:	0800369d 	.word	0x0800369d
 8003678:	0800369d 	.word	0x0800369d
 800367c:	0800369d 	.word	0x0800369d
 8003680:	08003697 	.word	0x08003697
 8003684:	2300      	movs	r3, #0
 8003686:	77fb      	strb	r3, [r7, #31]
 8003688:	e118      	b.n	80038bc <UART_SetConfig+0x348>
 800368a:	2302      	movs	r3, #2
 800368c:	77fb      	strb	r3, [r7, #31]
 800368e:	e115      	b.n	80038bc <UART_SetConfig+0x348>
 8003690:	2304      	movs	r3, #4
 8003692:	77fb      	strb	r3, [r7, #31]
 8003694:	e112      	b.n	80038bc <UART_SetConfig+0x348>
 8003696:	2308      	movs	r3, #8
 8003698:	77fb      	strb	r3, [r7, #31]
 800369a:	e10f      	b.n	80038bc <UART_SetConfig+0x348>
 800369c:	2310      	movs	r3, #16
 800369e:	77fb      	strb	r3, [r7, #31]
 80036a0:	e10c      	b.n	80038bc <UART_SetConfig+0x348>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a68      	ldr	r2, [pc, #416]	; (8003848 <UART_SetConfig+0x2d4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d120      	bne.n	80036ee <UART_SetConfig+0x17a>
 80036ac:	4b64      	ldr	r3, [pc, #400]	; (8003840 <UART_SetConfig+0x2cc>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036b6:	2b30      	cmp	r3, #48	; 0x30
 80036b8:	d013      	beq.n	80036e2 <UART_SetConfig+0x16e>
 80036ba:	2b30      	cmp	r3, #48	; 0x30
 80036bc:	d814      	bhi.n	80036e8 <UART_SetConfig+0x174>
 80036be:	2b20      	cmp	r3, #32
 80036c0:	d009      	beq.n	80036d6 <UART_SetConfig+0x162>
 80036c2:	2b20      	cmp	r3, #32
 80036c4:	d810      	bhi.n	80036e8 <UART_SetConfig+0x174>
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <UART_SetConfig+0x15c>
 80036ca:	2b10      	cmp	r3, #16
 80036cc:	d006      	beq.n	80036dc <UART_SetConfig+0x168>
 80036ce:	e00b      	b.n	80036e8 <UART_SetConfig+0x174>
 80036d0:	2300      	movs	r3, #0
 80036d2:	77fb      	strb	r3, [r7, #31]
 80036d4:	e0f2      	b.n	80038bc <UART_SetConfig+0x348>
 80036d6:	2302      	movs	r3, #2
 80036d8:	77fb      	strb	r3, [r7, #31]
 80036da:	e0ef      	b.n	80038bc <UART_SetConfig+0x348>
 80036dc:	2304      	movs	r3, #4
 80036de:	77fb      	strb	r3, [r7, #31]
 80036e0:	e0ec      	b.n	80038bc <UART_SetConfig+0x348>
 80036e2:	2308      	movs	r3, #8
 80036e4:	77fb      	strb	r3, [r7, #31]
 80036e6:	e0e9      	b.n	80038bc <UART_SetConfig+0x348>
 80036e8:	2310      	movs	r3, #16
 80036ea:	77fb      	strb	r3, [r7, #31]
 80036ec:	e0e6      	b.n	80038bc <UART_SetConfig+0x348>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a56      	ldr	r2, [pc, #344]	; (800384c <UART_SetConfig+0x2d8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d120      	bne.n	800373a <UART_SetConfig+0x1c6>
 80036f8:	4b51      	ldr	r3, [pc, #324]	; (8003840 <UART_SetConfig+0x2cc>)
 80036fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003702:	2bc0      	cmp	r3, #192	; 0xc0
 8003704:	d013      	beq.n	800372e <UART_SetConfig+0x1ba>
 8003706:	2bc0      	cmp	r3, #192	; 0xc0
 8003708:	d814      	bhi.n	8003734 <UART_SetConfig+0x1c0>
 800370a:	2b80      	cmp	r3, #128	; 0x80
 800370c:	d009      	beq.n	8003722 <UART_SetConfig+0x1ae>
 800370e:	2b80      	cmp	r3, #128	; 0x80
 8003710:	d810      	bhi.n	8003734 <UART_SetConfig+0x1c0>
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <UART_SetConfig+0x1a8>
 8003716:	2b40      	cmp	r3, #64	; 0x40
 8003718:	d006      	beq.n	8003728 <UART_SetConfig+0x1b4>
 800371a:	e00b      	b.n	8003734 <UART_SetConfig+0x1c0>
 800371c:	2300      	movs	r3, #0
 800371e:	77fb      	strb	r3, [r7, #31]
 8003720:	e0cc      	b.n	80038bc <UART_SetConfig+0x348>
 8003722:	2302      	movs	r3, #2
 8003724:	77fb      	strb	r3, [r7, #31]
 8003726:	e0c9      	b.n	80038bc <UART_SetConfig+0x348>
 8003728:	2304      	movs	r3, #4
 800372a:	77fb      	strb	r3, [r7, #31]
 800372c:	e0c6      	b.n	80038bc <UART_SetConfig+0x348>
 800372e:	2308      	movs	r3, #8
 8003730:	77fb      	strb	r3, [r7, #31]
 8003732:	e0c3      	b.n	80038bc <UART_SetConfig+0x348>
 8003734:	2310      	movs	r3, #16
 8003736:	77fb      	strb	r3, [r7, #31]
 8003738:	e0c0      	b.n	80038bc <UART_SetConfig+0x348>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a44      	ldr	r2, [pc, #272]	; (8003850 <UART_SetConfig+0x2dc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d125      	bne.n	8003790 <UART_SetConfig+0x21c>
 8003744:	4b3e      	ldr	r3, [pc, #248]	; (8003840 <UART_SetConfig+0x2cc>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003752:	d017      	beq.n	8003784 <UART_SetConfig+0x210>
 8003754:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003758:	d817      	bhi.n	800378a <UART_SetConfig+0x216>
 800375a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800375e:	d00b      	beq.n	8003778 <UART_SetConfig+0x204>
 8003760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003764:	d811      	bhi.n	800378a <UART_SetConfig+0x216>
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <UART_SetConfig+0x1fe>
 800376a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800376e:	d006      	beq.n	800377e <UART_SetConfig+0x20a>
 8003770:	e00b      	b.n	800378a <UART_SetConfig+0x216>
 8003772:	2300      	movs	r3, #0
 8003774:	77fb      	strb	r3, [r7, #31]
 8003776:	e0a1      	b.n	80038bc <UART_SetConfig+0x348>
 8003778:	2302      	movs	r3, #2
 800377a:	77fb      	strb	r3, [r7, #31]
 800377c:	e09e      	b.n	80038bc <UART_SetConfig+0x348>
 800377e:	2304      	movs	r3, #4
 8003780:	77fb      	strb	r3, [r7, #31]
 8003782:	e09b      	b.n	80038bc <UART_SetConfig+0x348>
 8003784:	2308      	movs	r3, #8
 8003786:	77fb      	strb	r3, [r7, #31]
 8003788:	e098      	b.n	80038bc <UART_SetConfig+0x348>
 800378a:	2310      	movs	r3, #16
 800378c:	77fb      	strb	r3, [r7, #31]
 800378e:	e095      	b.n	80038bc <UART_SetConfig+0x348>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a2f      	ldr	r2, [pc, #188]	; (8003854 <UART_SetConfig+0x2e0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d125      	bne.n	80037e6 <UART_SetConfig+0x272>
 800379a:	4b29      	ldr	r3, [pc, #164]	; (8003840 <UART_SetConfig+0x2cc>)
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037a8:	d017      	beq.n	80037da <UART_SetConfig+0x266>
 80037aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037ae:	d817      	bhi.n	80037e0 <UART_SetConfig+0x26c>
 80037b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037b4:	d00b      	beq.n	80037ce <UART_SetConfig+0x25a>
 80037b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ba:	d811      	bhi.n	80037e0 <UART_SetConfig+0x26c>
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <UART_SetConfig+0x254>
 80037c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c4:	d006      	beq.n	80037d4 <UART_SetConfig+0x260>
 80037c6:	e00b      	b.n	80037e0 <UART_SetConfig+0x26c>
 80037c8:	2301      	movs	r3, #1
 80037ca:	77fb      	strb	r3, [r7, #31]
 80037cc:	e076      	b.n	80038bc <UART_SetConfig+0x348>
 80037ce:	2302      	movs	r3, #2
 80037d0:	77fb      	strb	r3, [r7, #31]
 80037d2:	e073      	b.n	80038bc <UART_SetConfig+0x348>
 80037d4:	2304      	movs	r3, #4
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e070      	b.n	80038bc <UART_SetConfig+0x348>
 80037da:	2308      	movs	r3, #8
 80037dc:	77fb      	strb	r3, [r7, #31]
 80037de:	e06d      	b.n	80038bc <UART_SetConfig+0x348>
 80037e0:	2310      	movs	r3, #16
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e06a      	b.n	80038bc <UART_SetConfig+0x348>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a1b      	ldr	r2, [pc, #108]	; (8003858 <UART_SetConfig+0x2e4>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d138      	bne.n	8003862 <UART_SetConfig+0x2ee>
 80037f0:	4b13      	ldr	r3, [pc, #76]	; (8003840 <UART_SetConfig+0x2cc>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80037fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037fe:	d017      	beq.n	8003830 <UART_SetConfig+0x2bc>
 8003800:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003804:	d82a      	bhi.n	800385c <UART_SetConfig+0x2e8>
 8003806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800380a:	d00b      	beq.n	8003824 <UART_SetConfig+0x2b0>
 800380c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003810:	d824      	bhi.n	800385c <UART_SetConfig+0x2e8>
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <UART_SetConfig+0x2aa>
 8003816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381a:	d006      	beq.n	800382a <UART_SetConfig+0x2b6>
 800381c:	e01e      	b.n	800385c <UART_SetConfig+0x2e8>
 800381e:	2300      	movs	r3, #0
 8003820:	77fb      	strb	r3, [r7, #31]
 8003822:	e04b      	b.n	80038bc <UART_SetConfig+0x348>
 8003824:	2302      	movs	r3, #2
 8003826:	77fb      	strb	r3, [r7, #31]
 8003828:	e048      	b.n	80038bc <UART_SetConfig+0x348>
 800382a:	2304      	movs	r3, #4
 800382c:	77fb      	strb	r3, [r7, #31]
 800382e:	e045      	b.n	80038bc <UART_SetConfig+0x348>
 8003830:	2308      	movs	r3, #8
 8003832:	77fb      	strb	r3, [r7, #31]
 8003834:	e042      	b.n	80038bc <UART_SetConfig+0x348>
 8003836:	bf00      	nop
 8003838:	efff69f3 	.word	0xefff69f3
 800383c:	40011000 	.word	0x40011000
 8003840:	40023800 	.word	0x40023800
 8003844:	40004400 	.word	0x40004400
 8003848:	40004800 	.word	0x40004800
 800384c:	40004c00 	.word	0x40004c00
 8003850:	40005000 	.word	0x40005000
 8003854:	40011400 	.word	0x40011400
 8003858:	40007800 	.word	0x40007800
 800385c:	2310      	movs	r3, #16
 800385e:	77fb      	strb	r3, [r7, #31]
 8003860:	e02c      	b.n	80038bc <UART_SetConfig+0x348>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a72      	ldr	r2, [pc, #456]	; (8003a30 <UART_SetConfig+0x4bc>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d125      	bne.n	80038b8 <UART_SetConfig+0x344>
 800386c:	4b71      	ldr	r3, [pc, #452]	; (8003a34 <UART_SetConfig+0x4c0>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003876:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800387a:	d017      	beq.n	80038ac <UART_SetConfig+0x338>
 800387c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003880:	d817      	bhi.n	80038b2 <UART_SetConfig+0x33e>
 8003882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003886:	d00b      	beq.n	80038a0 <UART_SetConfig+0x32c>
 8003888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800388c:	d811      	bhi.n	80038b2 <UART_SetConfig+0x33e>
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <UART_SetConfig+0x326>
 8003892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003896:	d006      	beq.n	80038a6 <UART_SetConfig+0x332>
 8003898:	e00b      	b.n	80038b2 <UART_SetConfig+0x33e>
 800389a:	2300      	movs	r3, #0
 800389c:	77fb      	strb	r3, [r7, #31]
 800389e:	e00d      	b.n	80038bc <UART_SetConfig+0x348>
 80038a0:	2302      	movs	r3, #2
 80038a2:	77fb      	strb	r3, [r7, #31]
 80038a4:	e00a      	b.n	80038bc <UART_SetConfig+0x348>
 80038a6:	2304      	movs	r3, #4
 80038a8:	77fb      	strb	r3, [r7, #31]
 80038aa:	e007      	b.n	80038bc <UART_SetConfig+0x348>
 80038ac:	2308      	movs	r3, #8
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	e004      	b.n	80038bc <UART_SetConfig+0x348>
 80038b2:	2310      	movs	r3, #16
 80038b4:	77fb      	strb	r3, [r7, #31]
 80038b6:	e001      	b.n	80038bc <UART_SetConfig+0x348>
 80038b8:	2310      	movs	r3, #16
 80038ba:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c4:	d15b      	bne.n	800397e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80038c6:	7ffb      	ldrb	r3, [r7, #31]
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d828      	bhi.n	800391e <UART_SetConfig+0x3aa>
 80038cc:	a201      	add	r2, pc, #4	; (adr r2, 80038d4 <UART_SetConfig+0x360>)
 80038ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d2:	bf00      	nop
 80038d4:	080038f9 	.word	0x080038f9
 80038d8:	08003901 	.word	0x08003901
 80038dc:	08003909 	.word	0x08003909
 80038e0:	0800391f 	.word	0x0800391f
 80038e4:	0800390f 	.word	0x0800390f
 80038e8:	0800391f 	.word	0x0800391f
 80038ec:	0800391f 	.word	0x0800391f
 80038f0:	0800391f 	.word	0x0800391f
 80038f4:	08003917 	.word	0x08003917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038f8:	f7fe fc56 	bl	80021a8 <HAL_RCC_GetPCLK1Freq>
 80038fc:	61b8      	str	r0, [r7, #24]
        break;
 80038fe:	e013      	b.n	8003928 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003900:	f7fe fc66 	bl	80021d0 <HAL_RCC_GetPCLK2Freq>
 8003904:	61b8      	str	r0, [r7, #24]
        break;
 8003906:	e00f      	b.n	8003928 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003908:	4b4b      	ldr	r3, [pc, #300]	; (8003a38 <UART_SetConfig+0x4c4>)
 800390a:	61bb      	str	r3, [r7, #24]
        break;
 800390c:	e00c      	b.n	8003928 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800390e:	f7fe fb39 	bl	8001f84 <HAL_RCC_GetSysClockFreq>
 8003912:	61b8      	str	r0, [r7, #24]
        break;
 8003914:	e008      	b.n	8003928 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800391a:	61bb      	str	r3, [r7, #24]
        break;
 800391c:	e004      	b.n	8003928 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	77bb      	strb	r3, [r7, #30]
        break;
 8003926:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d074      	beq.n	8003a18 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	005a      	lsls	r2, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	085b      	lsrs	r3, r3, #1
 8003938:	441a      	add	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003942:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	2b0f      	cmp	r3, #15
 8003948:	d916      	bls.n	8003978 <UART_SetConfig+0x404>
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003950:	d212      	bcs.n	8003978 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	b29b      	uxth	r3, r3
 8003956:	f023 030f 	bic.w	r3, r3, #15
 800395a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	085b      	lsrs	r3, r3, #1
 8003960:	b29b      	uxth	r3, r3
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	b29a      	uxth	r2, r3
 8003968:	89fb      	ldrh	r3, [r7, #14]
 800396a:	4313      	orrs	r3, r2
 800396c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	89fa      	ldrh	r2, [r7, #14]
 8003974:	60da      	str	r2, [r3, #12]
 8003976:	e04f      	b.n	8003a18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	77bb      	strb	r3, [r7, #30]
 800397c:	e04c      	b.n	8003a18 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800397e:	7ffb      	ldrb	r3, [r7, #31]
 8003980:	2b08      	cmp	r3, #8
 8003982:	d828      	bhi.n	80039d6 <UART_SetConfig+0x462>
 8003984:	a201      	add	r2, pc, #4	; (adr r2, 800398c <UART_SetConfig+0x418>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	080039b1 	.word	0x080039b1
 8003990:	080039b9 	.word	0x080039b9
 8003994:	080039c1 	.word	0x080039c1
 8003998:	080039d7 	.word	0x080039d7
 800399c:	080039c7 	.word	0x080039c7
 80039a0:	080039d7 	.word	0x080039d7
 80039a4:	080039d7 	.word	0x080039d7
 80039a8:	080039d7 	.word	0x080039d7
 80039ac:	080039cf 	.word	0x080039cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039b0:	f7fe fbfa 	bl	80021a8 <HAL_RCC_GetPCLK1Freq>
 80039b4:	61b8      	str	r0, [r7, #24]
        break;
 80039b6:	e013      	b.n	80039e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039b8:	f7fe fc0a 	bl	80021d0 <HAL_RCC_GetPCLK2Freq>
 80039bc:	61b8      	str	r0, [r7, #24]
        break;
 80039be:	e00f      	b.n	80039e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039c0:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <UART_SetConfig+0x4c4>)
 80039c2:	61bb      	str	r3, [r7, #24]
        break;
 80039c4:	e00c      	b.n	80039e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039c6:	f7fe fadd 	bl	8001f84 <HAL_RCC_GetSysClockFreq>
 80039ca:	61b8      	str	r0, [r7, #24]
        break;
 80039cc:	e008      	b.n	80039e0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d2:	61bb      	str	r3, [r7, #24]
        break;
 80039d4:	e004      	b.n	80039e0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	77bb      	strb	r3, [r7, #30]
        break;
 80039de:	bf00      	nop
    }

    if (pclk != 0U)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d018      	beq.n	8003a18 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	085a      	lsrs	r2, r3, #1
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	441a      	add	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b0f      	cmp	r3, #15
 80039fe:	d909      	bls.n	8003a14 <UART_SetConfig+0x4a0>
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a06:	d205      	bcs.n	8003a14 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	e001      	b.n	8003a18 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a24:	7fbb      	ldrb	r3, [r7, #30]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3720      	adds	r7, #32
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40007c00 	.word	0x40007c00
 8003a34:	40023800 	.word	0x40023800
 8003a38:	00f42400 	.word	0x00f42400

08003a3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00a      	beq.n	8003aaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01a      	beq.n	8003b52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b3a:	d10a      	bne.n	8003b52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	605a      	str	r2, [r3, #4]
  }
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b90:	f7fd f904 	bl	8000d9c <HAL_GetTick>
 8003b94:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	d10e      	bne.n	8003bc2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ba4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f81b 	bl	8003bee <UART_WaitOnFlagUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e011      	b.n	8003be6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b09c      	sub	sp, #112	; 0x70
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bfe:	e0a7      	b.n	8003d50 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c06:	f000 80a3 	beq.w	8003d50 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0a:	f7fd f8c7 	bl	8000d9c <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d302      	bcc.n	8003c20 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d13f      	bne.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c34:	667b      	str	r3, [r7, #100]	; 0x64
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c40:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003c46:	e841 2300 	strex	r3, r2, [r1]
 8003c4a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1e6      	bne.n	8003c20 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3308      	adds	r3, #8
 8003c58:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c64:	f023 0301 	bic.w	r3, r3, #1
 8003c68:	663b      	str	r3, [r7, #96]	; 0x60
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3308      	adds	r3, #8
 8003c70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c72:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c74:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c76:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c7a:	e841 2300 	strex	r3, r2, [r1]
 8003c7e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1e5      	bne.n	8003c52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e068      	b.n	8003d72 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d050      	beq.n	8003d50 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cbc:	d148      	bne.n	8003d50 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cc6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e6      	bne.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3308      	adds	r3, #8
 8003d00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	613b      	str	r3, [r7, #16]
   return(result);
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f023 0301 	bic.w	r3, r3, #1
 8003d10:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3308      	adds	r3, #8
 8003d18:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d1a:	623a      	str	r2, [r7, #32]
 8003d1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	69f9      	ldr	r1, [r7, #28]
 8003d20:	6a3a      	ldr	r2, [r7, #32]
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e5      	bne.n	8003cfa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2220      	movs	r2, #32
 8003d32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e010      	b.n	8003d72 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69da      	ldr	r2, [r3, #28]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	bf0c      	ite	eq
 8003d60:	2301      	moveq	r3, #1
 8003d62:	2300      	movne	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	f43f af48 	beq.w	8003c00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3770      	adds	r7, #112	; 0x70
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b095      	sub	sp, #84	; 0x54
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da0:	643b      	str	r3, [r7, #64]	; 0x40
 8003da2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003da6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003da8:	e841 2300 	strex	r3, r2, [r1]
 8003dac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1e6      	bne.n	8003d82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3308      	adds	r3, #8
 8003dba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	e853 3f00 	ldrex	r3, [r3]
 8003dc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ddc:	e841 2300 	strex	r3, r2, [r1]
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e5      	bne.n	8003db4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d118      	bne.n	8003e22 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	f023 0310 	bic.w	r3, r3, #16
 8003e04:	647b      	str	r3, [r7, #68]	; 0x44
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e0e:	61bb      	str	r3, [r7, #24]
 8003e10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	6979      	ldr	r1, [r7, #20]
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e6      	bne.n	8003df0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2220      	movs	r2, #32
 8003e26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e36:	bf00      	nop
 8003e38:	3754      	adds	r7, #84	; 0x54
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b084      	sub	sp, #16
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f7ff fb71 	bl	8003548 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e66:	bf00      	nop
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b08f      	sub	sp, #60	; 0x3c
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e7a:	2b21      	cmp	r3, #33	; 0x21
 8003e7c:	d14c      	bne.n	8003f18 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d132      	bne.n	8003ef0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	e853 3f00 	ldrex	r3, [r3]
 8003e96:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eaa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eb0:	e841 2300 	strex	r3, r2, [r1]
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e6      	bne.n	8003e8a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ed0:	633b      	str	r3, [r7, #48]	; 0x30
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eda:	61bb      	str	r3, [r7, #24]
 8003edc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	6979      	ldr	r1, [r7, #20]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1e6      	bne.n	8003ebc <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003eee:	e013      	b.n	8003f18 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef4:	781a      	ldrb	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003f18:	bf00      	nop
 8003f1a:	373c      	adds	r7, #60	; 0x3c
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b091      	sub	sp, #68	; 0x44
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f30:	2b21      	cmp	r3, #33	; 0x21
 8003f32:	d151      	bne.n	8003fd8 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d132      	bne.n	8003fa6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f54:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5e:	633b      	str	r3, [r7, #48]	; 0x30
 8003f60:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f66:	e841 2300 	strex	r3, r2, [r1]
 8003f6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1e6      	bne.n	8003f40 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	e853 3f00 	ldrex	r3, [r3]
 8003f7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f86:	637b      	str	r3, [r7, #52]	; 0x34
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f90:	61fb      	str	r3, [r7, #28]
 8003f92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f94:	69b9      	ldr	r1, [r7, #24]
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	e841 2300 	strex	r3, r2, [r1]
 8003f9c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1e6      	bne.n	8003f72 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003fa4:	e018      	b.n	8003fd8 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003faa:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fba:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc0:	1c9a      	adds	r2, r3, #2
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003fd8:	bf00      	nop
 8003fda:	3744      	adds	r7, #68	; 0x44
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	61bb      	str	r3, [r7, #24]
 800400c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	6979      	ldr	r1, [r7, #20]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	613b      	str	r3, [r7, #16]
   return(result);
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e6      	bne.n	8003fec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2220      	movs	r2, #32
 8004022:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff fa82 	bl	8003534 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004030:	bf00      	nop
 8004032:	3720      	adds	r7, #32
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004038:	b084      	sub	sp, #16
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	f107 001c 	add.w	r0, r7, #28
 8004046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800404a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404c:	2b01      	cmp	r3, #1
 800404e:	d126      	bne.n	800409e <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004054:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	4b38      	ldr	r3, [pc, #224]	; (8004144 <USB_CoreInit+0x10c>)
 8004062:	4013      	ands	r3, r2
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f043 0210 	orr.w	r2, r3, #16
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004082:	2b01      	cmp	r3, #1
 8004084:	d105      	bne.n	8004092 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fad0 	bl	8004638 <USB_CoreReset>
 8004098:	4603      	mov	r3, r0
 800409a:	73fb      	strb	r3, [r7, #15]
 800409c:	e03a      	b.n	8004114 <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800409e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d126      	bne.n	80040f2 <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	4b23      	ldr	r3, [pc, #140]	; (8004144 <USB_CoreInit+0x10c>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f023 0210 	bic.w	r2, r3, #16
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 80040d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d105      	bne.n	80040e6 <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 faa6 	bl	8004638 <USB_CoreReset>
 80040ec:	4603      	mov	r3, r0
 80040ee:	73fb      	strb	r3, [r7, #15]
 80040f0:	e010      	b.n	8004114 <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 fa9a 	bl	8004638 <USB_CoreReset>
 8004104:	4603      	mov	r3, r0
 8004106:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004116:	2b01      	cmp	r3, #1
 8004118:	d10b      	bne.n	8004132 <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f043 0206 	orr.w	r2, r3, #6
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f043 0220 	orr.w	r2, r3, #32
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004132:	7bfb      	ldrb	r3, [r7, #15]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800413e:	b004      	add	sp, #16
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	ffbdffbf 	.word	0xffbdffbf

08004148 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f023 0201 	bic.w	r2, r3, #1
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b084      	sub	sp, #16
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	460b      	mov	r3, r1
 8004174:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d115      	bne.n	80041b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004198:	2001      	movs	r0, #1
 800419a:	f7fc fe0b 	bl	8000db4 <HAL_Delay>
      ms++;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3301      	adds	r3, #1
 80041a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fa39 	bl	800461c <USB_GetMode>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d01e      	beq.n	80041ee <USB_SetCurrentMode+0x84>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b31      	cmp	r3, #49	; 0x31
 80041b4:	d9f0      	bls.n	8004198 <USB_SetCurrentMode+0x2e>
 80041b6:	e01a      	b.n	80041ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d115      	bne.n	80041ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80041ca:	2001      	movs	r0, #1
 80041cc:	f7fc fdf2 	bl	8000db4 <HAL_Delay>
      ms++;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3301      	adds	r3, #1
 80041d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fa20 	bl	800461c <USB_GetMode>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <USB_SetCurrentMode+0x84>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b31      	cmp	r3, #49	; 0x31
 80041e6:	d9f0      	bls.n	80041ca <USB_SetCurrentMode+0x60>
 80041e8:	e001      	b.n	80041ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e005      	b.n	80041fa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b32      	cmp	r3, #50	; 0x32
 80041f2:	d101      	bne.n	80041f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004204:	b084      	sub	sp, #16
 8004206:	b580      	push	{r7, lr}
 8004208:	b086      	sub	sp, #24
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
 800420e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004216:	2300      	movs	r3, #0
 8004218:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800421e:	2300      	movs	r3, #0
 8004220:	613b      	str	r3, [r7, #16]
 8004222:	e009      	b.n	8004238 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	3340      	adds	r3, #64	; 0x40
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	2200      	movs	r2, #0
 8004230:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	3301      	adds	r3, #1
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b0e      	cmp	r3, #14
 800423c:	d9f2      	bls.n	8004224 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800423e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004240:	2b00      	cmp	r3, #0
 8004242:	d11c      	bne.n	800427e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004252:	f043 0302 	orr.w	r3, r3, #2
 8004256:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	e005      	b.n	800428a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004282:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004290:	461a      	mov	r2, r3
 8004292:	2300      	movs	r3, #0
 8004294:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429c:	4619      	mov	r1, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a4:	461a      	mov	r2, r3
 80042a6:	680b      	ldr	r3, [r1, #0]
 80042a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d10c      	bne.n	80042ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d104      	bne.n	80042c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042b6:	2100      	movs	r1, #0
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f975 	bl	80045a8 <USB_SetDevSpeed>
 80042be:	e018      	b.n	80042f2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042c0:	2101      	movs	r1, #1
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f970 	bl	80045a8 <USB_SetDevSpeed>
 80042c8:	e013      	b.n	80042f2 <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80042ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d10c      	bne.n	80042ea <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80042d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d104      	bne.n	80042e0 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80042d6:	2100      	movs	r1, #0
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f965 	bl	80045a8 <USB_SetDevSpeed>
 80042de:	e008      	b.n	80042f2 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80042e0:	2101      	movs	r1, #1
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f960 	bl	80045a8 <USB_SetDevSpeed>
 80042e8:	e003      	b.n	80042f2 <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042ea:	2103      	movs	r1, #3
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f95b 	bl	80045a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042f2:	2110      	movs	r1, #16
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f8f3 	bl	80044e0 <USB_FlushTxFifo>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f91f 	bl	8004548 <USB_FlushRxFifo>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431a:	461a      	mov	r2, r3
 800431c:	2300      	movs	r3, #0
 800431e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004326:	461a      	mov	r2, r3
 8004328:	2300      	movs	r3, #0
 800432a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004332:	461a      	mov	r2, r3
 8004334:	2300      	movs	r3, #0
 8004336:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004338:	2300      	movs	r3, #0
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	e043      	b.n	80043c6 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004354:	d118      	bne.n	8004388 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004368:	461a      	mov	r2, r3
 800436a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	e013      	b.n	800439a <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	4413      	add	r3, r2
 800437a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800437e:	461a      	mov	r2, r3
 8004380:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004384:	6013      	str	r3, [r2, #0]
 8004386:	e008      	b.n	800439a <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004394:	461a      	mov	r2, r3
 8004396:	2300      	movs	r3, #0
 8004398:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a6:	461a      	mov	r2, r3
 80043a8:	2300      	movs	r3, #0
 80043aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b8:	461a      	mov	r2, r3
 80043ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	3301      	adds	r3, #1
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d3b7      	bcc.n	800433e <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043ce:	2300      	movs	r3, #0
 80043d0:	613b      	str	r3, [r7, #16]
 80043d2:	e043      	b.n	800445c <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043ea:	d118      	bne.n	800441e <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fe:	461a      	mov	r2, r3
 8004400:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e013      	b.n	8004430 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004414:	461a      	mov	r2, r3
 8004416:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	e008      	b.n	8004430 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4413      	add	r3, r2
 8004426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442a:	461a      	mov	r2, r3
 800442c:	2300      	movs	r3, #0
 800442e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443c:	461a      	mov	r2, r3
 800443e:	2300      	movs	r3, #0
 8004440:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4413      	add	r3, r2
 800444a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444e:	461a      	mov	r2, r3
 8004450:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004454:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	3301      	adds	r3, #1
 800445a:	613b      	str	r3, [r7, #16]
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	429a      	cmp	r2, r3
 8004462:	d3b7      	bcc.n	80043d4 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004472:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004476:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004484:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	2b00      	cmp	r3, #0
 800448a:	d105      	bne.n	8004498 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f043 0210 	orr.w	r2, r3, #16
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699a      	ldr	r2, [r3, #24]
 800449c:	4b0e      	ldr	r3, [pc, #56]	; (80044d8 <USB_DevInit+0x2d4>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80044a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	f043 0208 	orr.w	r2, r3, #8
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80044b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d105      	bne.n	80044c8 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	699a      	ldr	r2, [r3, #24]
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <USB_DevInit+0x2d8>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80044c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044d4:	b004      	add	sp, #16
 80044d6:	4770      	bx	lr
 80044d8:	803c3800 	.word	0x803c3800
 80044dc:	40000004 	.word	0x40000004

080044e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	3301      	adds	r3, #1
 80044f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4a13      	ldr	r2, [pc, #76]	; (8004544 <USB_FlushTxFifo+0x64>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d901      	bls.n	8004500 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e01b      	b.n	8004538 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	daf2      	bge.n	80044ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	019b      	lsls	r3, r3, #6
 8004510:	f043 0220 	orr.w	r2, r3, #32
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3301      	adds	r3, #1
 800451c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4a08      	ldr	r2, [pc, #32]	; (8004544 <USB_FlushTxFifo+0x64>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e006      	b.n	8004538 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b20      	cmp	r3, #32
 8004534:	d0f0      	beq.n	8004518 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	00030d40 	.word	0x00030d40

08004548 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3301      	adds	r3, #1
 8004558:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4a11      	ldr	r2, [pc, #68]	; (80045a4 <USB_FlushRxFifo+0x5c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e018      	b.n	8004598 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	daf2      	bge.n	8004554 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2210      	movs	r2, #16
 8004576:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3301      	adds	r3, #1
 800457c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	4a08      	ldr	r2, [pc, #32]	; (80045a4 <USB_FlushRxFifo+0x5c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d901      	bls.n	800458a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e006      	b.n	8004598 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	2b10      	cmp	r3, #16
 8004594:	d0f0      	beq.n	8004578 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	00030d40 	.word	0x00030d40

080045a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	78fb      	ldrb	r3, [r7, #3]
 80045c2:	68f9      	ldr	r1, [r7, #12]
 80045c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045c8:	4313      	orrs	r3, r2
 80045ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80045da:	b480      	push	{r7}
 80045dc:	b085      	sub	sp, #20
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80045f4:	f023 0303 	bic.w	r3, r3, #3
 80045f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004608:	f043 0302 	orr.w	r3, r3, #2
 800460c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	f003 0301 	and.w	r3, r3, #1
}
 800462c:	4618      	mov	r0, r3
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	3301      	adds	r3, #1
 8004648:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4a13      	ldr	r2, [pc, #76]	; (800469c <USB_CoreReset+0x64>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d901      	bls.n	8004656 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e01b      	b.n	800468e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	2b00      	cmp	r3, #0
 800465c:	daf2      	bge.n	8004644 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	f043 0201 	orr.w	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3301      	adds	r3, #1
 8004672:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4a09      	ldr	r2, [pc, #36]	; (800469c <USB_CoreReset+0x64>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d901      	bls.n	8004680 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e006      	b.n	800468e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b01      	cmp	r3, #1
 800468a:	d0f0      	beq.n	800466e <USB_CoreReset+0x36>

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3714      	adds	r7, #20
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	00030d40 	.word	0x00030d40

080046a0 <memset>:
 80046a0:	4402      	add	r2, r0
 80046a2:	4603      	mov	r3, r0
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d100      	bne.n	80046aa <memset+0xa>
 80046a8:	4770      	bx	lr
 80046aa:	f803 1b01 	strb.w	r1, [r3], #1
 80046ae:	e7f9      	b.n	80046a4 <memset+0x4>

080046b0 <__libc_init_array>:
 80046b0:	b570      	push	{r4, r5, r6, lr}
 80046b2:	4d0d      	ldr	r5, [pc, #52]	; (80046e8 <__libc_init_array+0x38>)
 80046b4:	4c0d      	ldr	r4, [pc, #52]	; (80046ec <__libc_init_array+0x3c>)
 80046b6:	1b64      	subs	r4, r4, r5
 80046b8:	10a4      	asrs	r4, r4, #2
 80046ba:	2600      	movs	r6, #0
 80046bc:	42a6      	cmp	r6, r4
 80046be:	d109      	bne.n	80046d4 <__libc_init_array+0x24>
 80046c0:	4d0b      	ldr	r5, [pc, #44]	; (80046f0 <__libc_init_array+0x40>)
 80046c2:	4c0c      	ldr	r4, [pc, #48]	; (80046f4 <__libc_init_array+0x44>)
 80046c4:	f000 f818 	bl	80046f8 <_init>
 80046c8:	1b64      	subs	r4, r4, r5
 80046ca:	10a4      	asrs	r4, r4, #2
 80046cc:	2600      	movs	r6, #0
 80046ce:	42a6      	cmp	r6, r4
 80046d0:	d105      	bne.n	80046de <__libc_init_array+0x2e>
 80046d2:	bd70      	pop	{r4, r5, r6, pc}
 80046d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d8:	4798      	blx	r3
 80046da:	3601      	adds	r6, #1
 80046dc:	e7ee      	b.n	80046bc <__libc_init_array+0xc>
 80046de:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e2:	4798      	blx	r3
 80046e4:	3601      	adds	r6, #1
 80046e6:	e7f2      	b.n	80046ce <__libc_init_array+0x1e>
 80046e8:	08004754 	.word	0x08004754
 80046ec:	08004754 	.word	0x08004754
 80046f0:	08004754 	.word	0x08004754
 80046f4:	08004758 	.word	0x08004758

080046f8 <_init>:
 80046f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046fa:	bf00      	nop
 80046fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fe:	bc08      	pop	{r3}
 8004700:	469e      	mov	lr, r3
 8004702:	4770      	bx	lr

08004704 <_fini>:
 8004704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004706:	bf00      	nop
 8004708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470a:	bc08      	pop	{r3}
 800470c:	469e      	mov	lr, r3
 800470e:	4770      	bx	lr
