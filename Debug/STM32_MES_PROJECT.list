
STM32_MES_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e14  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08004ff4  08004ff4  00014ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800508c  0800508c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800508c  0800508c  0001508c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005094  08005094  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005094  08005094  00015094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005098  08005098  00015098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800509c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000870  20000014  080050b0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000884  080050b0  00020884  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015c68  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f72  00000000  00000000  00035cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e0  00000000  00000000  00038c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eab  00000000  00000000  00039f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024052  00000000  00000000  0003adf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017343  00000000  00000000  0005ee45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfdea  00000000  00000000  00076188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004fc8  00000000  00000000  00155f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0015af3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000014 	.word	0x20000014
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004fdc 	.word	0x08004fdc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000018 	.word	0x20000018
 800021c:	08004fdc 	.word	0x08004fdc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b970 	b.w	8000528 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	460f      	mov	r7, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d965      	bls.n	8000342 <__udivmoddi4+0xe2>
 8000276:	fab2 f382 	clz	r3, r2
 800027a:	b143      	cbz	r3, 800028e <__udivmoddi4+0x2e>
 800027c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000280:	f1c3 0220 	rsb	r2, r3, #32
 8000284:	409f      	lsls	r7, r3
 8000286:	fa20 f202 	lsr.w	r2, r0, r2
 800028a:	4317      	orrs	r7, r2
 800028c:	409c      	lsls	r4, r3
 800028e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000292:	fa1f f58c 	uxth.w	r5, ip
 8000296:	fbb7 f1fe 	udiv	r1, r7, lr
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	4290      	cmp	r0, r2
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ac:	eb1c 0202 	adds.w	r2, ip, r2
 80002b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b4:	f080 811c 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f240 8119 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002be:	3902      	subs	r1, #2
 80002c0:	4462      	add	r2, ip
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d2:	fb00 f505 	mul.w	r5, r0, r5
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x90>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	f080 8107 	bcs.w	80004f4 <__udivmoddi4+0x294>
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	f240 8104 	bls.w	80004f4 <__udivmoddi4+0x294>
 80002ec:	4464      	add	r4, ip
 80002ee:	3802      	subs	r0, #2
 80002f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f4:	1b64      	subs	r4, r4, r5
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11e      	cbz	r6, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40dc      	lsrs	r4, r3
 80002fc:	2300      	movs	r3, #0
 80002fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0xbc>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80ed 	beq.w	80004ea <__udivmoddi4+0x28a>
 8000310:	2100      	movs	r1, #0
 8000312:	e9c6 0500 	strd	r0, r5, [r6]
 8000316:	4608      	mov	r0, r1
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	fab3 f183 	clz	r1, r3
 8000320:	2900      	cmp	r1, #0
 8000322:	d149      	bne.n	80003b8 <__udivmoddi4+0x158>
 8000324:	42ab      	cmp	r3, r5
 8000326:	d302      	bcc.n	800032e <__udivmoddi4+0xce>
 8000328:	4282      	cmp	r2, r0
 800032a:	f200 80f8 	bhi.w	800051e <__udivmoddi4+0x2be>
 800032e:	1a84      	subs	r4, r0, r2
 8000330:	eb65 0203 	sbc.w	r2, r5, r3
 8000334:	2001      	movs	r0, #1
 8000336:	4617      	mov	r7, r2
 8000338:	2e00      	cmp	r6, #0
 800033a:	d0e2      	beq.n	8000302 <__udivmoddi4+0xa2>
 800033c:	e9c6 4700 	strd	r4, r7, [r6]
 8000340:	e7df      	b.n	8000302 <__udivmoddi4+0xa2>
 8000342:	b902      	cbnz	r2, 8000346 <__udivmoddi4+0xe6>
 8000344:	deff      	udf	#255	; 0xff
 8000346:	fab2 f382 	clz	r3, r2
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8090 	bne.w	8000470 <__udivmoddi4+0x210>
 8000350:	1a8a      	subs	r2, r1, r2
 8000352:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000356:	fa1f fe8c 	uxth.w	lr, ip
 800035a:	2101      	movs	r1, #1
 800035c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000360:	fb07 2015 	mls	r0, r7, r5, r2
 8000364:	0c22      	lsrs	r2, r4, #16
 8000366:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036a:	fb0e f005 	mul.w	r0, lr, r5
 800036e:	4290      	cmp	r0, r2
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x124>
 8000372:	eb1c 0202 	adds.w	r2, ip, r2
 8000376:	f105 38ff 	add.w	r8, r5, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4290      	cmp	r0, r2
 800037e:	f200 80cb 	bhi.w	8000518 <__udivmoddi4+0x2b8>
 8000382:	4645      	mov	r5, r8
 8000384:	1a12      	subs	r2, r2, r0
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb2 f0f7 	udiv	r0, r2, r7
 800038c:	fb07 2210 	mls	r2, r7, r0, r2
 8000390:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	45a6      	cmp	lr, r4
 800039a:	d908      	bls.n	80003ae <__udivmoddi4+0x14e>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a4:	d202      	bcs.n	80003ac <__udivmoddi4+0x14c>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f200 80bb 	bhi.w	8000522 <__udivmoddi4+0x2c2>
 80003ac:	4610      	mov	r0, r2
 80003ae:	eba4 040e 	sub.w	r4, r4, lr
 80003b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b6:	e79f      	b.n	80002f8 <__udivmoddi4+0x98>
 80003b8:	f1c1 0720 	rsb	r7, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	40fd      	lsrs	r5, r7
 80003d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d4:	4323      	orrs	r3, r4
 80003d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	fb09 5518 	mls	r5, r9, r8, r5
 80003e2:	0c1c      	lsrs	r4, r3, #16
 80003e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	fa00 f001 	lsl.w	r0, r0, r1
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000400:	f080 8088 	bcs.w	8000514 <__udivmoddi4+0x2b4>
 8000404:	42a5      	cmp	r5, r4
 8000406:	f240 8085 	bls.w	8000514 <__udivmoddi4+0x2b4>
 800040a:	f1a8 0802 	sub.w	r8, r8, #2
 800040e:	4464      	add	r4, ip
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	b29d      	uxth	r5, r3
 8000414:	fbb4 f3f9 	udiv	r3, r4, r9
 8000418:	fb09 4413 	mls	r4, r9, r3, r4
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	fb03 fe0e 	mul.w	lr, r3, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1c 0404 	adds.w	r4, ip, r4
 800042c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000430:	d26c      	bcs.n	800050c <__udivmoddi4+0x2ac>
 8000432:	45a6      	cmp	lr, r4
 8000434:	d96a      	bls.n	800050c <__udivmoddi4+0x2ac>
 8000436:	3b02      	subs	r3, #2
 8000438:	4464      	add	r4, ip
 800043a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800043e:	fba3 9502 	umull	r9, r5, r3, r2
 8000442:	eba4 040e 	sub.w	r4, r4, lr
 8000446:	42ac      	cmp	r4, r5
 8000448:	46c8      	mov	r8, r9
 800044a:	46ae      	mov	lr, r5
 800044c:	d356      	bcc.n	80004fc <__udivmoddi4+0x29c>
 800044e:	d053      	beq.n	80004f8 <__udivmoddi4+0x298>
 8000450:	b156      	cbz	r6, 8000468 <__udivmoddi4+0x208>
 8000452:	ebb0 0208 	subs.w	r2, r0, r8
 8000456:	eb64 040e 	sbc.w	r4, r4, lr
 800045a:	fa04 f707 	lsl.w	r7, r4, r7
 800045e:	40ca      	lsrs	r2, r1
 8000460:	40cc      	lsrs	r4, r1
 8000462:	4317      	orrs	r7, r2
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	4618      	mov	r0, r3
 800046a:	2100      	movs	r1, #0
 800046c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000470:	f1c3 0120 	rsb	r1, r3, #32
 8000474:	fa02 fc03 	lsl.w	ip, r2, r3
 8000478:	fa20 f201 	lsr.w	r2, r0, r1
 800047c:	fa25 f101 	lsr.w	r1, r5, r1
 8000480:	409d      	lsls	r5, r3
 8000482:	432a      	orrs	r2, r5
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000490:	fb07 1510 	mls	r5, r7, r0, r1
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800049a:	fb00 f50e 	mul.w	r5, r0, lr
 800049e:	428d      	cmp	r5, r1
 80004a0:	fa04 f403 	lsl.w	r4, r4, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x258>
 80004a6:	eb1c 0101 	adds.w	r1, ip, r1
 80004aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ae:	d22f      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004b0:	428d      	cmp	r5, r1
 80004b2:	d92d      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004b4:	3802      	subs	r0, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1b49      	subs	r1, r1, r5
 80004ba:	b292      	uxth	r2, r2
 80004bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c0:	fb07 1115 	mls	r1, r7, r5, r1
 80004c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c8:	fb05 f10e 	mul.w	r1, r5, lr
 80004cc:	4291      	cmp	r1, r2
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x282>
 80004d0:	eb1c 0202 	adds.w	r2, ip, r2
 80004d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d8:	d216      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 80004da:	4291      	cmp	r1, r2
 80004dc:	d914      	bls.n	8000508 <__udivmoddi4+0x2a8>
 80004de:	3d02      	subs	r5, #2
 80004e0:	4462      	add	r2, ip
 80004e2:	1a52      	subs	r2, r2, r1
 80004e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e8:	e738      	b.n	800035c <__udivmoddi4+0xfc>
 80004ea:	4631      	mov	r1, r6
 80004ec:	4630      	mov	r0, r6
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xa2>
 80004f0:	4639      	mov	r1, r7
 80004f2:	e6e6      	b.n	80002c2 <__udivmoddi4+0x62>
 80004f4:	4610      	mov	r0, r2
 80004f6:	e6fb      	b.n	80002f0 <__udivmoddi4+0x90>
 80004f8:	4548      	cmp	r0, r9
 80004fa:	d2a9      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000500:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000504:	3b01      	subs	r3, #1
 8000506:	e7a3      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000508:	4645      	mov	r5, r8
 800050a:	e7ea      	b.n	80004e2 <__udivmoddi4+0x282>
 800050c:	462b      	mov	r3, r5
 800050e:	e794      	b.n	800043a <__udivmoddi4+0x1da>
 8000510:	4640      	mov	r0, r8
 8000512:	e7d1      	b.n	80004b8 <__udivmoddi4+0x258>
 8000514:	46d0      	mov	r8, sl
 8000516:	e77b      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000518:	3d02      	subs	r5, #2
 800051a:	4462      	add	r2, ip
 800051c:	e732      	b.n	8000384 <__udivmoddi4+0x124>
 800051e:	4608      	mov	r0, r1
 8000520:	e70a      	b.n	8000338 <__udivmoddi4+0xd8>
 8000522:	4464      	add	r4, ip
 8000524:	3802      	subs	r0, #2
 8000526:	e742      	b.n	80003ae <__udivmoddi4+0x14e>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <ConsoleInit>:
}

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 8000532:	f000 f829 	bl	8000588 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to Sandeep's console.");
 8000536:	480f      	ldr	r0, [pc, #60]	; (8000574 <ConsoleInit+0x48>)
 8000538:	f000 f870 	bl	800061c <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 800053c:	480e      	ldr	r0, [pc, #56]	; (8000578 <ConsoleInit+0x4c>)
 800053e:	f000 f86d 	bl	800061c <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 8000542:	480e      	ldr	r0, [pc, #56]	; (800057c <ConsoleInit+0x50>)
 8000544:	f000 f86a 	bl	800061c <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000548:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <ConsoleInit+0x54>)
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	e007      	b.n	8000564 <ConsoleInit+0x38>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000554:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <ConsoleInit+0x58>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4413      	add	r3, r2
 800055a:	2200      	movs	r2, #0
 800055c:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	3301      	adds	r3, #1
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2bff      	cmp	r3, #255	; 0xff
 8000568:	d9f4      	bls.n	8000554 <ConsoleInit+0x28>
	}

}
 800056a:	bf00      	nop
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	08004ff4 	.word	0x08004ff4
 8000578:	08005014 	.word	0x08005014
 800057c:	08005018 	.word	0x08005018
 8000580:	20000130 	.word	0x20000130
 8000584:	20000030 	.word	0x20000030

08000588 <ConsoleIoInit>:
        return EOF;
}*/


eConsoleError ConsoleIoInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &ch, 1); // initiate reception
 800058c:	2201      	movs	r2, #1
 800058e:	4903      	ldr	r1, [pc, #12]	; (800059c <ConsoleIoInit+0x14>)
 8000590:	4803      	ldr	r0, [pc, #12]	; (80005a0 <ConsoleIoInit+0x18>)
 8000592:	f002 ff07 	bl	80033a4 <HAL_UART_Receive_IT>
	return CONSOLE_SUCCESS;
 8000596:	2300      	movs	r3, #0
}
 8000598:	4618      	mov	r0, r3
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000134 	.word	0x20000134
 80005a0:	200002e8 	.word	0x200002e8

080005a4 <HAL_UART_RxCpltCallback>:

/* This RX interrupt gets triggered once x number of bytes are recieved*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]

	//HAL_UART_Transmit_IT(&huart3,&ch,1); // echo

    //TODO: handle cases of buffer overflow gracefully
	rx_bufferio[rx_counter++] = ch; // load each character to buffer
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <HAL_UART_RxCpltCallback+0x48>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	1c5a      	adds	r2, r3, #1
 80005b2:	b2d1      	uxtb	r1, r2
 80005b4:	4a0d      	ldr	r2, [pc, #52]	; (80005ec <HAL_UART_RxCpltCallback+0x48>)
 80005b6:	7011      	strb	r1, [r2, #0]
 80005b8:	461a      	mov	r2, r3
 80005ba:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <HAL_UART_RxCpltCallback+0x4c>)
 80005bc:	7819      	ldrb	r1, [r3, #0]
 80005be:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <HAL_UART_RxCpltCallback+0x50>)
 80005c0:	5499      	strb	r1, [r3, r2]
    if(ch == '\r' || ch == '\n')
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <HAL_UART_RxCpltCallback+0x4c>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b0d      	cmp	r3, #13
 80005c8:	d003      	beq.n	80005d2 <HAL_UART_RxCpltCallback+0x2e>
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <HAL_UART_RxCpltCallback+0x4c>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b0a      	cmp	r3, #10
 80005d0:	d102      	bne.n	80005d8 <HAL_UART_RxCpltCallback+0x34>
        buffer_ready = 1; // if a new-line character or a carriage return character is received, set the relevant flag
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_UART_RxCpltCallback+0x54>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	701a      	strb	r2, [r3, #0]

    HAL_UART_Receive_IT(huart, &ch, 1); // continue receiving character(s)
 80005d8:	2201      	movs	r2, #1
 80005da:	4905      	ldr	r1, [pc, #20]	; (80005f0 <HAL_UART_RxCpltCallback+0x4c>)
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f002 fee1 	bl	80033a4 <HAL_UART_Receive_IT>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000238 	.word	0x20000238
 80005f0:	20000134 	.word	0x20000134
 80005f4:	20000138 	.word	0x20000138
 80005f8:	20000239 	.word	0x20000239

080005fc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	uart_tx_complete =1;
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <HAL_UART_TxCpltCallback+0x1c>)
 8000606:	2201      	movs	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000000 	.word	0x20000000

0800061c <ConsoleIoSendString>:

    return CONSOLE_SUCCESS;
}

eConsoleError ConsoleIoSendString(const char *buffer)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(buffer);
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f7ff fdfb 	bl	8000220 <strlen>
 800062a:	4603      	mov	r3, r0
 800062c:	73fb      	strb	r3, [r7, #15]
	uart_tx_complete = 0;
 800062e:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <ConsoleIoSendString+0x3c>)
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart3, (uint8_t*)buffer, len);
 8000634:	7bfb      	ldrb	r3, [r7, #15]
 8000636:	b29b      	uxth	r3, r3
 8000638:	461a      	mov	r2, r3
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	4807      	ldr	r0, [pc, #28]	; (800065c <ConsoleIoSendString+0x40>)
 800063e:	f002 fe53 	bl	80032e8 <HAL_UART_Transmit_IT>
	while (uart_tx_complete==0);
 8000642:	bf00      	nop
 8000644:	4b04      	ldr	r3, [pc, #16]	; (8000658 <ConsoleIoSendString+0x3c>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0fb      	beq.n	8000644 <ConsoleIoSendString+0x28>
	return CONSOLE_SUCCESS;
 800064c:	2300      	movs	r3, #0
}
 800064e:	4618      	mov	r0, r3
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000000 	.word	0x20000000
 800065c:	200002e8 	.word	0x200002e8

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000664:	f000 fcab 	bl	8000fbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000668:	f000 f826 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066c:	f000 f964 	bl	8000938 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000670:	f000 f902 	bl	8000878 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000674:	f000 f930 	bl	80008d8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM13_Init();
 8000678:	f000 f8da 	bl	8000830 <MX_TIM13_Init>
  MX_DAC_Init();
 800067c:	f000 f88a 	bl	8000794 <MX_DAC_Init>
  MX_TIM11_Init();
 8000680:	f000 f8b2 	bl	80007e8 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  // Start timer
  //HAL_TIM_Base_Start_IT(&htim13);
  HAL_TIM_Base_Start_IT(&htim11);
 8000684:	4808      	ldr	r0, [pc, #32]	; (80006a8 <main+0x48>)
 8000686:	f002 fb63 	bl	8002d50 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800068a:	2100      	movs	r1, #0
 800068c:	4807      	ldr	r0, [pc, #28]	; (80006ac <main+0x4c>)
 800068e:	f000 fe4a 	bl	8001326 <HAL_DAC_Start>

  HAL_UART_Transmit_IT(&huart3, "Main function\n\r" , strlen("Main function\n\r"));
 8000692:	220f      	movs	r2, #15
 8000694:	4906      	ldr	r1, [pc, #24]	; (80006b0 <main+0x50>)
 8000696:	4807      	ldr	r0, [pc, #28]	; (80006b4 <main+0x54>)
 8000698:	f002 fe26 	bl	80032e8 <HAL_UART_Transmit_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ConsoleInit();
 800069c:	f7ff ff46 	bl	800052c <ConsoleInit>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
	  }
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //red*/
	  //HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, Value_DAC);

	  HAL_Delay(1);
 80006a0:	2001      	movs	r0, #1
 80006a2:	f000 fce9 	bl	8001078 <HAL_Delay>
 80006a6:	e7fb      	b.n	80006a0 <main+0x40>
 80006a8:	20000250 	.word	0x20000250
 80006ac:	2000023c 	.word	0x2000023c
 80006b0:	08005040 	.word	0x08005040
 80006b4:	200002e8 	.word	0x200002e8

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	; 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f004 fc5c 	bl	8004f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006dc:	f001 fa6c 	bl	8001bb8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e0:	4b2a      	ldr	r3, [pc, #168]	; (800078c <SystemClock_Config+0xd4>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a29      	ldr	r2, [pc, #164]	; (800078c <SystemClock_Config+0xd4>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <SystemClock_Config+0xd4>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <SystemClock_Config+0xd8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a24      	ldr	r2, [pc, #144]	; (8000790 <SystemClock_Config+0xd8>)
 80006fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <SystemClock_Config+0xd8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000710:	2301      	movs	r3, #1
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000714:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000724:	2304      	movs	r3, #4
 8000726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000728:	23d8      	movs	r3, #216	; 0xd8
 800072a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000730:	2309      	movs	r3, #9
 8000732:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fa9d 	bl	8001c78 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000744:	f000 fa2a 	bl	8000b9c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000748:	f001 fa46 	bl	8001bd8 <HAL_PWREx_EnableOverDrive>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000752:	f000 fa23 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	230f      	movs	r3, #15
 8000758:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000762:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000766:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2107      	movs	r1, #7
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fd23 	bl	80021c0 <HAL_RCC_ClockConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000780:	f000 fa0c 	bl	8000b9c <Error_Handler>
  }
}
 8000784:	bf00      	nop
 8000786:	3750      	adds	r7, #80	; 0x50
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800079a:	463b      	mov	r3, r7
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_DAC_Init+0x4c>)
 80007a4:	4a0f      	ldr	r2, [pc, #60]	; (80007e4 <MX_DAC_Init+0x50>)
 80007a6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007a8:	480d      	ldr	r0, [pc, #52]	; (80007e0 <MX_DAC_Init+0x4c>)
 80007aa:	f000 fd9a 	bl	80012e2 <HAL_DAC_Init>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007b4:	f000 f9f2 	bl	8000b9c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007c0:	463b      	mov	r3, r7
 80007c2:	2200      	movs	r2, #0
 80007c4:	4619      	mov	r1, r3
 80007c6:	4806      	ldr	r0, [pc, #24]	; (80007e0 <MX_DAC_Init+0x4c>)
 80007c8:	f000 fdff 	bl	80013ca <HAL_DAC_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007d2:	f000 f9e3 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	2000023c 	.word	0x2000023c
 80007e4:	40007400 	.word	0x40007400

080007e8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_TIM11_Init+0x40>)
 80007ee:	4a0f      	ldr	r2, [pc, #60]	; (800082c <MX_TIM11_Init+0x44>)
 80007f0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 108-1;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_TIM11_Init+0x40>)
 80007f4:	226b      	movs	r2, #107	; 0x6b
 80007f6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_TIM11_Init+0x40>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2000-1;
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_TIM11_Init+0x40>)
 8000800:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000804:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_TIM11_Init+0x40>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_TIM11_Init+0x40>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_TIM11_Init+0x40>)
 8000814:	f002 fa44 	bl	8002ca0 <HAL_TIM_Base_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800081e:	f000 f9bd 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000250 	.word	0x20000250
 800082c:	40014800 	.word	0x40014800

08000830 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_TIM13_Init+0x40>)
 8000836:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <MX_TIM13_Init+0x44>)
 8000838:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 108-1;
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <MX_TIM13_Init+0x40>)
 800083c:	226b      	movs	r2, #107	; 0x6b
 800083e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_TIM13_Init+0x40>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 10000-1;
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <MX_TIM13_Init+0x40>)
 8000848:	f242 720f 	movw	r2, #9999	; 0x270f
 800084c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_TIM13_Init+0x40>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_TIM13_Init+0x40>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_TIM13_Init+0x40>)
 800085c:	f002 fa20 	bl	8002ca0 <HAL_TIM_Base_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8000866:	f000 f999 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000029c 	.word	0x2000029c
 8000874:	40001c00 	.word	0x40001c00

08000878 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 800087e:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <MX_USART3_UART_Init+0x5c>)
 8000880:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 8000884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000888:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_USART3_UART_Init+0x58>)
 80008bc:	f002 fcc6 	bl	800324c <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008c6:	f000 f969 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200002e8 	.word	0x200002e8
 80008d4:	40004800 	.word	0x40004800

080008d8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e6:	2206      	movs	r2, #6
 80008e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ec:	2202      	movs	r2, #2
 80008ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008f0:	4b10      	ldr	r3, [pc, #64]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f8:	2202      	movs	r2, #2
 80008fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008fc:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008fe:	2201      	movs	r2, #1
 8000900:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000910:	2201      	movs	r2, #1
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000916:	2201      	movs	r2, #1
 8000918:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800091c:	2200      	movs	r2, #0
 800091e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000922:	f001 f800 	bl	8001926 <HAL_PCD_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 800092c:	f000 f936 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000370 	.word	0x20000370

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	; 0x30
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b47      	ldr	r3, [pc, #284]	; (8000a6c <MX_GPIO_Init+0x134>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a46      	ldr	r2, [pc, #280]	; (8000a6c <MX_GPIO_Init+0x134>)
 8000954:	f043 0304 	orr.w	r3, r3, #4
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b44      	ldr	r3, [pc, #272]	; (8000a6c <MX_GPIO_Init+0x134>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0304 	and.w	r3, r3, #4
 8000962:	61bb      	str	r3, [r7, #24]
 8000964:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000966:	4b41      	ldr	r3, [pc, #260]	; (8000a6c <MX_GPIO_Init+0x134>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a40      	ldr	r2, [pc, #256]	; (8000a6c <MX_GPIO_Init+0x134>)
 800096c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b3e      	ldr	r3, [pc, #248]	; (8000a6c <MX_GPIO_Init+0x134>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	4b3b      	ldr	r3, [pc, #236]	; (8000a6c <MX_GPIO_Init+0x134>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a3a      	ldr	r2, [pc, #232]	; (8000a6c <MX_GPIO_Init+0x134>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b38      	ldr	r3, [pc, #224]	; (8000a6c <MX_GPIO_Init+0x134>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000996:	4b35      	ldr	r3, [pc, #212]	; (8000a6c <MX_GPIO_Init+0x134>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a34      	ldr	r2, [pc, #208]	; (8000a6c <MX_GPIO_Init+0x134>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b32      	ldr	r3, [pc, #200]	; (8000a6c <MX_GPIO_Init+0x134>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ae:	4b2f      	ldr	r3, [pc, #188]	; (8000a6c <MX_GPIO_Init+0x134>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a2e      	ldr	r2, [pc, #184]	; (8000a6c <MX_GPIO_Init+0x134>)
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <MX_GPIO_Init+0x134>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0308 	and.w	r3, r3, #8
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009c6:	4b29      	ldr	r3, [pc, #164]	; (8000a6c <MX_GPIO_Init+0x134>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a28      	ldr	r2, [pc, #160]	; (8000a6c <MX_GPIO_Init+0x134>)
 80009cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <MX_GPIO_Init+0x134>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f244 0181 	movw	r1, #16513	; 0x4081
 80009e4:	4822      	ldr	r0, [pc, #136]	; (8000a70 <MX_GPIO_Init+0x138>)
 80009e6:	f000 ff85 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2140      	movs	r1, #64	; 0x40
 80009ee:	4821      	ldr	r0, [pc, #132]	; (8000a74 <MX_GPIO_Init+0x13c>)
 80009f0:	f000 ff80 	bl	80018f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	481b      	ldr	r0, [pc, #108]	; (8000a78 <MX_GPIO_Init+0x140>)
 8000a0c:	f000 fdbe 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a10:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4811      	ldr	r0, [pc, #68]	; (8000a70 <MX_GPIO_Init+0x138>)
 8000a2a:	f000 fdaf 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a2e:	2340      	movs	r3, #64	; 0x40
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	480b      	ldr	r0, [pc, #44]	; (8000a74 <MX_GPIO_Init+0x13c>)
 8000a46:	f000 fda1 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a4a:	2380      	movs	r3, #128	; 0x80
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 031c 	add.w	r3, r7, #28
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_GPIO_Init+0x13c>)
 8000a5e:	f000 fd95 	bl	800158c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a62:	bf00      	nop
 8000a64:	3730      	adds	r7, #48	; 0x30
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020400 	.word	0x40020400
 8000a74:	40021800 	.word	0x40021800
 8000a78:	40020800 	.word	0x40020800

08000a7c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* Timer13 interupt that fires every 5 ms to check push button press and handle debouncing*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

	if (htim == &htim13 )
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d13e      	bne.n	8000b0a <HAL_TIM_PeriodElapsedCallback+0x8e>
	{
		if (!debounceRequest)
 8000a8c:	4b38      	ldr	r3, [pc, #224]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d11e      	bne.n	8000ad2 <HAL_TIM_PeriodElapsedCallback+0x56>
		{
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8000a94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a98:	4836      	ldr	r0, [pc, #216]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000a9a:	f000 ff13 	bl	80018c4 <HAL_GPIO_ReadPin>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d132      	bne.n	8000b0a <HAL_TIM_PeriodElapsedCallback+0x8e>
			{
				HAL_UART_Transmit_IT(&huart3, "Button Pressed\n\r" , strlen("Button Pressed\n\r"));
 8000aa4:	2210      	movs	r2, #16
 8000aa6:	4934      	ldr	r1, [pc, #208]	; (8000b78 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000aa8:	4834      	ldr	r0, [pc, #208]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000aaa:	f002 fc1d 	bl	80032e8 <HAL_UART_Transmit_IT>
				if(BlinkSpeed == 2)
 8000aae:	4b34      	ldr	r3, [pc, #208]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d103      	bne.n	8000abe <HAL_TIM_PeriodElapsedCallback+0x42>
				{
					BlinkSpeed = 0;
 8000ab6:	4b32      	ldr	r3, [pc, #200]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
 8000abc:	e005      	b.n	8000aca <HAL_TIM_PeriodElapsedCallback+0x4e>
				}
				else
				{
					BlinkSpeed ++;
 8000abe:	4b30      	ldr	r3, [pc, #192]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4b2e      	ldr	r3, [pc, #184]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000ac8:	701a      	strb	r2, [r3, #0]

				}
				debounceRequest = 1;
 8000aca:	4b29      	ldr	r3, [pc, #164]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
 8000ad0:	e01b      	b.n	8000b0a <HAL_TIM_PeriodElapsedCallback+0x8e>
			}
		}
		// Handle debounce
		else
		{
			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8000ad2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad6:	4827      	ldr	r0, [pc, #156]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000ad8:	f000 fef4 	bl	80018c4 <HAL_GPIO_ReadPin>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d103      	bne.n	8000aea <HAL_TIM_PeriodElapsedCallback+0x6e>
				debounceCount = 0;
 8000ae2:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
 8000ae8:	e00f      	b.n	8000b0a <HAL_TIM_PeriodElapsedCallback+0x8e>
			else
			{
				debounceCount ++;
 8000aea:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	3301      	adds	r3, #1
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000af4:	701a      	strb	r2, [r3, #0]
				if (debounceCount == 10)
 8000af6:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b0a      	cmp	r3, #10
 8000afc:	d105      	bne.n	8000b0a <HAL_TIM_PeriodElapsedCallback+0x8e>
				{
					debounceCount = 0;
 8000afe:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
					debounceRequest = 0;
 8000b04:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	if (htim == &htim11 )
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a1e      	ldr	r2, [pc, #120]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d127      	bne.n	8000b62 <HAL_TIM_PeriodElapsedCallback+0xe6>
	{

		//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, Value_DAC);
		if (Value_DAC<4095)
 8000b12:	4b1e      	ldr	r3, [pc, #120]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d806      	bhi.n	8000b2c <HAL_TIM_PeriodElapsedCallback+0xb0>
		{
			Value_DAC++;
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	3301      	adds	r3, #1
 8000b24:	b29a      	uxth	r2, r3
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b28:	801a      	strh	r2, [r3, #0]
			//ConsoleIoSendString(STR_ENDLINE);
		}
	}


}
 8000b2a:	e01a      	b.n	8000b62 <HAL_TIM_PeriodElapsedCallback+0xe6>
			Value_DAC = 0;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	801a      	strh	r2, [r3, #0]
			Value_ARR = Value_ARR+1000;
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000b3a:	4a15      	ldr	r2, [pc, #84]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000b3c:	6013      	str	r3, [r2, #0]
			if (Value_ARR>8000)
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000b46:	d903      	bls.n	8000b50 <HAL_TIM_PeriodElapsedCallback+0xd4>
				Value_ARR = 1999;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000b4a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000b4e:	601a      	str	r2, [r3, #0]
			TIM11->ARR = Value_ARR;
 8000b50:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	62d3      	str	r3, [r2, #44]	; 0x2c
			HAL_UART_Transmit_IT(&huart3, "DAC Pressed\n\r" , strlen("DAC Pressed\n\r"));
 8000b58:	220d      	movs	r2, #13
 8000b5a:	490f      	ldr	r1, [pc, #60]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000b5c:	4807      	ldr	r0, [pc, #28]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000b5e:	f002 fbc3 	bl	80032e8 <HAL_UART_Transmit_IT>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	2000029c 	.word	0x2000029c
 8000b70:	20000879 	.word	0x20000879
 8000b74:	40020800 	.word	0x40020800
 8000b78:	08005050 	.word	0x08005050
 8000b7c:	200002e8 	.word	0x200002e8
 8000b80:	20000878 	.word	0x20000878
 8000b84:	2000087a 	.word	0x2000087a
 8000b88:	20000250 	.word	0x20000250
 8000b8c:	2000087c 	.word	0x2000087c
 8000b90:	20000004 	.word	0x20000004
 8000b94:	40014800 	.word	0x40014800
 8000b98:	08005064 	.word	0x08005064

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <Error_Handler+0x8>
	...

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_MspInit+0x44>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_MspInit+0x44>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_MspInit+0x44>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_MspInit+0x44>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_MspInit+0x44>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_MspInit+0x44>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800

08000bf0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a15      	ldr	r2, [pc, #84]	; (8000c64 <HAL_DAC_MspInit+0x74>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d123      	bne.n	8000c5a <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_DAC_MspInit+0x78>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <HAL_DAC_MspInit+0x78>)
 8000c18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_DAC_MspInit+0x78>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_DAC_MspInit+0x78>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <HAL_DAC_MspInit+0x78>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <HAL_DAC_MspInit+0x78>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <HAL_DAC_MspInit+0x7c>)
 8000c56:	f000 fc99 	bl	800158c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	; 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40007400 	.word	0x40007400
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020000 	.word	0x40020000

08000c70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ce8 <HAL_TIM_Base_MspInit+0x78>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d114      	bne.n	8000cac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <HAL_TIM_Base_MspInit+0x7c>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	4a19      	ldr	r2, [pc, #100]	; (8000cec <HAL_TIM_Base_MspInit+0x7c>)
 8000c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <HAL_TIM_Base_MspInit+0x7c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	201a      	movs	r0, #26
 8000ca0:	f000 fae9 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000ca4:	201a      	movs	r0, #26
 8000ca6:	f000 fb02 	bl	80012ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8000caa:	e018      	b.n	8000cde <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM13)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <HAL_TIM_Base_MspInit+0x80>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d113      	bne.n	8000cde <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_TIM_Base_MspInit+0x7c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a0c      	ldr	r2, [pc, #48]	; (8000cec <HAL_TIM_Base_MspInit+0x7c>)
 8000cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_TIM_Base_MspInit+0x7c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	202c      	movs	r0, #44	; 0x2c
 8000cd4:	f000 facf 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000cd8:	202c      	movs	r0, #44	; 0x2c
 8000cda:	f000 fae8 	bl	80012ae <HAL_NVIC_EnableIRQ>
}
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40014800 	.word	0x40014800
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40001c00 	.word	0x40001c00

08000cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b0aa      	sub	sp, #168	; 0xa8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2280      	movs	r2, #128	; 0x80
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f004 f935 	bl	8004f84 <memset>
  if(huart->Instance==USART3)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a26      	ldr	r2, [pc, #152]	; (8000db8 <HAL_UART_MspInit+0xc4>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d144      	bne.n	8000dae <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4618      	mov	r0, r3
 8000d34:	f001 fc6a 	bl	800260c <HAL_RCCEx_PeriphCLKConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d3e:	f7ff ff2d 	bl	8000b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d42:	4b1e      	ldr	r3, [pc, #120]	; (8000dbc <HAL_UART_MspInit+0xc8>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a1d      	ldr	r2, [pc, #116]	; (8000dbc <HAL_UART_MspInit+0xc8>)
 8000d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b1b      	ldr	r3, [pc, #108]	; (8000dbc <HAL_UART_MspInit+0xc8>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5a:	4b18      	ldr	r3, [pc, #96]	; (8000dbc <HAL_UART_MspInit+0xc8>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a17      	ldr	r2, [pc, #92]	; (8000dbc <HAL_UART_MspInit+0xc8>)
 8000d60:	f043 0308 	orr.w	r3, r3, #8
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_UART_MspInit+0xc8>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0308 	and.w	r3, r3, #8
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d86:	2303      	movs	r3, #3
 8000d88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d92:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d96:	4619      	mov	r1, r3
 8000d98:	4809      	ldr	r0, [pc, #36]	; (8000dc0 <HAL_UART_MspInit+0xcc>)
 8000d9a:	f000 fbf7 	bl	800158c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	2027      	movs	r0, #39	; 0x27
 8000da4:	f000 fa67 	bl	8001276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000da8:	2027      	movs	r0, #39	; 0x27
 8000daa:	f000 fa80 	bl	80012ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dae:	bf00      	nop
 8000db0:	37a8      	adds	r7, #168	; 0xa8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40004800 	.word	0x40004800
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020c00 	.word	0x40020c00

08000dc4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0aa      	sub	sp, #168	; 0xa8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 f8cd 	bl	8004f84 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000df2:	d159      	bne.n	8000ea8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000df4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000df8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 fc01 	bl	800260c <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e10:	f7ff fec4 	bl	8000b9c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <HAL_PCD_MspInit+0xec>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	4a25      	ldr	r2, [pc, #148]	; (8000eb0 <HAL_PCD_MspInit+0xec>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <HAL_PCD_MspInit+0xec>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e2c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	2303      	movs	r3, #3
 8000e42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e46:	230a      	movs	r3, #10
 8000e48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e50:	4619      	mov	r1, r3
 8000e52:	4818      	ldr	r0, [pc, #96]	; (8000eb4 <HAL_PCD_MspInit+0xf0>)
 8000e54:	f000 fb9a 	bl	800158c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e70:	4619      	mov	r1, r3
 8000e72:	4810      	ldr	r0, [pc, #64]	; (8000eb4 <HAL_PCD_MspInit+0xf0>)
 8000e74:	f000 fb8a 	bl	800158c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e78:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <HAL_PCD_MspInit+0xec>)
 8000e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	; (8000eb0 <HAL_PCD_MspInit+0xec>)
 8000e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e82:	6353      	str	r3, [r2, #52]	; 0x34
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_PCD_MspInit+0xec>)
 8000e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <HAL_PCD_MspInit+0xec>)
 8000e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e94:	4a06      	ldr	r2, [pc, #24]	; (8000eb0 <HAL_PCD_MspInit+0xec>)
 8000e96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e9a:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <HAL_PCD_MspInit+0xec>)
 8000e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea4:	60bb      	str	r3, [r7, #8]
 8000ea6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ea8:	bf00      	nop
 8000eaa:	37a8      	adds	r7, #168	; 0xa8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020000 	.word	0x40020000

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ebc:	e7fe      	b.n	8000ebc <NMI_Handler+0x4>

08000ebe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <HardFault_Handler+0x4>

08000ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <MemManage_Handler+0x4>

08000eca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ece:	e7fe      	b.n	8000ece <BusFault_Handler+0x4>

08000ed0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <UsageFault_Handler+0x4>

08000ed6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr

08000ee4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f04:	f000 f898 	bl	8001038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000f12:	f001 ff95 	bl	8002e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000250 	.word	0x20000250

08000f20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <USART3_IRQHandler+0x10>)
 8000f26:	f002 fa81 	bl	800342c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200002e8 	.word	0x200002e8

08000f34 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000f3a:	f001 ff81 	bl	8002e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000029c 	.word	0x2000029c

08000f48 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <SystemInit+0x20>)
 8000f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <SystemInit+0x20>)
 8000f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f72:	490e      	ldr	r1, [pc, #56]	; (8000fac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f74:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f88:	4c0b      	ldr	r4, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f96:	f7ff ffd7 	bl	8000f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9a:	f003 fffb 	bl	8004f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9e:	f7ff fb5f 	bl	8000660 <main>
  bx  lr    
 8000fa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fac:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000fb0:	0800509c 	.word	0x0800509c
  ldr r2, =_sbss
 8000fb4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000fb8:	20000884 	.word	0x20000884

08000fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC_IRQHandler>

08000fbe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc2:	2003      	movs	r0, #3
 8000fc4:	f000 f94c 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f000 f805 	bl	8000fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fce:	f7ff fdeb 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_InitTick+0x54>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x58>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f967 	bl	80012ca <HAL_SYSTICK_Config>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e00e      	b.n	8001024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d80a      	bhi.n	8001022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800100c:	2200      	movs	r2, #0
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f000 f92f 	bl	8001276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001018:	4a06      	ldr	r2, [pc, #24]	; (8001034 <HAL_InitTick+0x5c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	e000      	b.n	8001024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000008 	.word	0x20000008
 8001030:	20000010 	.word	0x20000010
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x20>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x24>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4413      	add	r3, r2
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_IncTick+0x24>)
 800104a:	6013      	str	r3, [r2, #0]
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000010 	.word	0x20000010
 800105c:	20000880 	.word	0x20000880

08001060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  return uwTick;
 8001064:	4b03      	ldr	r3, [pc, #12]	; (8001074 <HAL_GetTick+0x14>)
 8001066:	681b      	ldr	r3, [r3, #0]
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000880 	.word	0x20000880

08001078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001080:	f7ff ffee 	bl	8001060 <HAL_GetTick>
 8001084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001090:	d005      	beq.n	800109e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_Delay+0x44>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	461a      	mov	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800109e:	bf00      	nop
 80010a0:	f7ff ffde 	bl	8001060 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d8f7      	bhi.n	80010a0 <HAL_Delay+0x28>
  {
  }
}
 80010b0:	bf00      	nop
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000010 	.word	0x20000010

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <__NVIC_SetPriorityGrouping+0x40>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <__NVIC_SetPriorityGrouping+0x40>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00
 8001104:	05fa0000 	.word	0x05fa0000

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff29 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001288:	f7ff ff3e 	bl	8001108 <__NVIC_GetPriorityGrouping>
 800128c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	6978      	ldr	r0, [r7, #20]
 8001294:	f7ff ff8e 	bl	80011b4 <NVIC_EncodePriority>
 8001298:	4602      	mov	r2, r0
 800129a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff5d 	bl	8001160 <__NVIC_SetPriority>
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff31 	bl	8001124 <__NVIC_EnableIRQ>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffa2 	bl	800121c <SysTick_Config>
 80012d8:	4603      	mov	r3, r0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e014      	b.n	800131e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	791b      	ldrb	r3, [r3, #4]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d105      	bne.n	800130a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fc73 	bl	8000bf0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2202      	movs	r2, #2
 800130e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	795b      	ldrb	r3, [r3, #5]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_DAC_Start+0x16>
 8001338:	2302      	movs	r3, #2
 800133a:	e040      	b.n	80013be <HAL_DAC_Start+0x98>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2202      	movs	r2, #2
 8001346:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6819      	ldr	r1, [r3, #0]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	f003 0310 	and.w	r3, r3, #16
 8001354:	2201      	movs	r2, #1
 8001356:	409a      	lsls	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	430a      	orrs	r2, r1
 800135e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10f      	bne.n	8001386 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001370:	2b3c      	cmp	r3, #60	; 0x3c
 8001372:	d11d      	bne.n	80013b0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0201 	orr.w	r2, r2, #1
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	e014      	b.n	80013b0 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	f003 0310 	and.w	r3, r3, #16
 8001396:	213c      	movs	r1, #60	; 0x3c
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	429a      	cmp	r2, r3
 800139e:	d107      	bne.n	80013b0 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 0202 	orr.w	r2, r2, #2
 80013ae:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2201      	movs	r2, #1
 80013b4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b087      	sub	sp, #28
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	60f8      	str	r0, [r7, #12]
 80013d2:	60b9      	str	r1, [r7, #8]
 80013d4:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	795b      	ldrb	r3, [r3, #5]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d101      	bne.n	80013e2 <HAL_DAC_ConfigChannel+0x18>
 80013de:	2302      	movs	r3, #2
 80013e0:	e03c      	b.n	800145c <HAL_DAC_ConfigChannel+0x92>
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2201      	movs	r2, #1
 80013e6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2202      	movs	r2, #2
 80013ec:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	4013      	ands	r3, r2
 800140a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	4313      	orrs	r3, r2
 8001428:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6819      	ldr	r1, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 0310 	and.w	r3, r3, #16
 800143e:	22c0      	movs	r2, #192	; 0xc0
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43da      	mvns	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	400a      	ands	r2, r1
 800144c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2201      	movs	r2, #1
 8001452:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2200      	movs	r2, #0
 8001458:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	371c      	adds	r7, #28
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001474:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001476:	f7ff fdf3 	bl	8001060 <HAL_GetTick>
 800147a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001482:	b2db      	uxtb	r3, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d008      	beq.n	800149a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2280      	movs	r2, #128	; 0x80
 800148c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e052      	b.n	8001540 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0216 	bic.w	r2, r2, #22
 80014a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d103      	bne.n	80014ca <HAL_DMA_Abort+0x62>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0208 	bic.w	r2, r2, #8
 80014d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0201 	bic.w	r2, r2, #1
 80014e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ea:	e013      	b.n	8001514 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014ec:	f7ff fdb8 	bl	8001060 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b05      	cmp	r3, #5
 80014f8:	d90c      	bls.n	8001514 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2220      	movs	r2, #32
 80014fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2203      	movs	r2, #3
 8001504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e015      	b.n	8001540 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1e4      	bne.n	80014ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001526:	223f      	movs	r2, #63	; 0x3f
 8001528:	409a      	lsls	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d004      	beq.n	8001566 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2280      	movs	r2, #128	; 0x80
 8001560:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e00c      	b.n	8001580 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2205      	movs	r2, #5
 800156a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0201 	bic.w	r2, r2, #1
 800157c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800159e:	2300      	movs	r3, #0
 80015a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
 80015aa:	e169      	b.n	8001880 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80015ac:	2201      	movs	r2, #1
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	f040 8158 	bne.w	800187a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d005      	beq.n	80015e2 <HAL_GPIO_Init+0x56>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0303 	and.w	r3, r3, #3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d130      	bne.n	8001644 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	2203      	movs	r2, #3
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001618:	2201      	movs	r2, #1
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	f003 0201 	and.w	r2, r3, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f003 0303 	and.w	r3, r3, #3
 800164c:	2b03      	cmp	r3, #3
 800164e:	d017      	beq.n	8001680 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	2203      	movs	r2, #3
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4013      	ands	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4313      	orrs	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d123      	bne.n	80016d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	08da      	lsrs	r2, r3, #3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3208      	adds	r2, #8
 8001694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	f003 0307 	and.w	r3, r3, #7
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	220f      	movs	r2, #15
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	691a      	ldr	r2, [r3, #16]
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	08da      	lsrs	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	3208      	adds	r2, #8
 80016ce:	69b9      	ldr	r1, [r7, #24]
 80016d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	2203      	movs	r2, #3
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	4013      	ands	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0203 	and.w	r2, r3, #3
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4313      	orrs	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001710:	2b00      	cmp	r3, #0
 8001712:	f000 80b2 	beq.w	800187a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001716:	4b60      	ldr	r3, [pc, #384]	; (8001898 <HAL_GPIO_Init+0x30c>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	4a5f      	ldr	r2, [pc, #380]	; (8001898 <HAL_GPIO_Init+0x30c>)
 800171c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001720:	6453      	str	r3, [r2, #68]	; 0x44
 8001722:	4b5d      	ldr	r3, [pc, #372]	; (8001898 <HAL_GPIO_Init+0x30c>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800172e:	4a5b      	ldr	r2, [pc, #364]	; (800189c <HAL_GPIO_Init+0x310>)
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	089b      	lsrs	r3, r3, #2
 8001734:	3302      	adds	r3, #2
 8001736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	220f      	movs	r2, #15
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a52      	ldr	r2, [pc, #328]	; (80018a0 <HAL_GPIO_Init+0x314>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d02b      	beq.n	80017b2 <HAL_GPIO_Init+0x226>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a51      	ldr	r2, [pc, #324]	; (80018a4 <HAL_GPIO_Init+0x318>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d025      	beq.n	80017ae <HAL_GPIO_Init+0x222>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a50      	ldr	r2, [pc, #320]	; (80018a8 <HAL_GPIO_Init+0x31c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d01f      	beq.n	80017aa <HAL_GPIO_Init+0x21e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a4f      	ldr	r2, [pc, #316]	; (80018ac <HAL_GPIO_Init+0x320>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d019      	beq.n	80017a6 <HAL_GPIO_Init+0x21a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a4e      	ldr	r2, [pc, #312]	; (80018b0 <HAL_GPIO_Init+0x324>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d013      	beq.n	80017a2 <HAL_GPIO_Init+0x216>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a4d      	ldr	r2, [pc, #308]	; (80018b4 <HAL_GPIO_Init+0x328>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d00d      	beq.n	800179e <HAL_GPIO_Init+0x212>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4c      	ldr	r2, [pc, #304]	; (80018b8 <HAL_GPIO_Init+0x32c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d007      	beq.n	800179a <HAL_GPIO_Init+0x20e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4b      	ldr	r2, [pc, #300]	; (80018bc <HAL_GPIO_Init+0x330>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d101      	bne.n	8001796 <HAL_GPIO_Init+0x20a>
 8001792:	2307      	movs	r3, #7
 8001794:	e00e      	b.n	80017b4 <HAL_GPIO_Init+0x228>
 8001796:	2308      	movs	r3, #8
 8001798:	e00c      	b.n	80017b4 <HAL_GPIO_Init+0x228>
 800179a:	2306      	movs	r3, #6
 800179c:	e00a      	b.n	80017b4 <HAL_GPIO_Init+0x228>
 800179e:	2305      	movs	r3, #5
 80017a0:	e008      	b.n	80017b4 <HAL_GPIO_Init+0x228>
 80017a2:	2304      	movs	r3, #4
 80017a4:	e006      	b.n	80017b4 <HAL_GPIO_Init+0x228>
 80017a6:	2303      	movs	r3, #3
 80017a8:	e004      	b.n	80017b4 <HAL_GPIO_Init+0x228>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e002      	b.n	80017b4 <HAL_GPIO_Init+0x228>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <HAL_GPIO_Init+0x228>
 80017b2:	2300      	movs	r3, #0
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	f002 0203 	and.w	r2, r2, #3
 80017ba:	0092      	lsls	r2, r2, #2
 80017bc:	4093      	lsls	r3, r2
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017c4:	4935      	ldr	r1, [pc, #212]	; (800189c <HAL_GPIO_Init+0x310>)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	3302      	adds	r3, #2
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d2:	4b3b      	ldr	r3, [pc, #236]	; (80018c0 <HAL_GPIO_Init+0x334>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	43db      	mvns	r3, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4013      	ands	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017f6:	4a32      	ldr	r2, [pc, #200]	; (80018c0 <HAL_GPIO_Init+0x334>)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017fc:	4b30      	ldr	r3, [pc, #192]	; (80018c0 <HAL_GPIO_Init+0x334>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001820:	4a27      	ldr	r2, [pc, #156]	; (80018c0 <HAL_GPIO_Init+0x334>)
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001826:	4b26      	ldr	r3, [pc, #152]	; (80018c0 <HAL_GPIO_Init+0x334>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	43db      	mvns	r3, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4013      	ands	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800184a:	4a1d      	ldr	r2, [pc, #116]	; (80018c0 <HAL_GPIO_Init+0x334>)
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <HAL_GPIO_Init+0x334>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001874:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <HAL_GPIO_Init+0x334>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3301      	adds	r3, #1
 800187e:	61fb      	str	r3, [r7, #28]
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	2b0f      	cmp	r3, #15
 8001884:	f67f ae92 	bls.w	80015ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3724      	adds	r7, #36	; 0x24
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800
 800189c:	40013800 	.word	0x40013800
 80018a0:	40020000 	.word	0x40020000
 80018a4:	40020400 	.word	0x40020400
 80018a8:	40020800 	.word	0x40020800
 80018ac:	40020c00 	.word	0x40020c00
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40021400 	.word	0x40021400
 80018b8:	40021800 	.word	0x40021800
 80018bc:	40021c00 	.word	0x40021c00
 80018c0:	40013c00 	.word	0x40013c00

080018c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	460b      	mov	r3, r1
 80018ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	887b      	ldrh	r3, [r7, #2]
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d002      	beq.n	80018e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018dc:	2301      	movs	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	e001      	b.n	80018e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018e2:	2300      	movs	r3, #0
 80018e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	807b      	strh	r3, [r7, #2]
 8001900:	4613      	mov	r3, r2
 8001902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001904:	787b      	ldrb	r3, [r7, #1]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800190a:	887a      	ldrh	r2, [r7, #2]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001910:	e003      	b.n	800191a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001912:	887b      	ldrh	r3, [r7, #2]
 8001914:	041a      	lsls	r2, r3, #16
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	619a      	str	r2, [r3, #24]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001926:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001928:	b08f      	sub	sp, #60	; 0x3c
 800192a:	af0a      	add	r7, sp, #40	; 0x28
 800192c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e116      	b.n	8001b66 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d106      	bne.n	8001958 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff fa36 	bl	8000dc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2203      	movs	r2, #3
 800195c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d102      	bne.n	8001972 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f003 f858 	bl	8004a2c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	603b      	str	r3, [r7, #0]
 8001982:	687e      	ldr	r6, [r7, #4]
 8001984:	466d      	mov	r5, sp
 8001986:	f106 0410 	add.w	r4, r6, #16
 800198a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800198c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800198e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001990:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001992:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001996:	e885 0003 	stmia.w	r5, {r0, r1}
 800199a:	1d33      	adds	r3, r6, #4
 800199c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800199e:	6838      	ldr	r0, [r7, #0]
 80019a0:	f002 ffbc 	bl	800491c <USB_CoreInit>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2202      	movs	r2, #2
 80019ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e0d7      	b.n	8001b66 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f003 f846 	bl	8004a4e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	73fb      	strb	r3, [r7, #15]
 80019c6:	e04a      	b.n	8001a5e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	6879      	ldr	r1, [r7, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4413      	add	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	333d      	adds	r3, #61	; 0x3d
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80019dc:	7bfa      	ldrb	r2, [r7, #15]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	4413      	add	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	333c      	adds	r3, #60	; 0x3c
 80019ec:	7bfa      	ldrb	r2, [r7, #15]
 80019ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019f0:	7bfa      	ldrb	r2, [r7, #15]
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	b298      	uxth	r0, r3
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	3344      	adds	r3, #68	; 0x44
 8001a04:	4602      	mov	r2, r0
 8001a06:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a08:	7bfa      	ldrb	r2, [r7, #15]
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4413      	add	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	440b      	add	r3, r1
 8001a16:	3340      	adds	r3, #64	; 0x40
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a1c:	7bfa      	ldrb	r2, [r7, #15]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4413      	add	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	3348      	adds	r3, #72	; 0x48
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a30:	7bfa      	ldrb	r2, [r7, #15]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4413      	add	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	334c      	adds	r3, #76	; 0x4c
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a44:	7bfa      	ldrb	r2, [r7, #15]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	3354      	adds	r3, #84	; 0x54
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
 8001a5e:	7bfa      	ldrb	r2, [r7, #15]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d3af      	bcc.n	80019c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	73fb      	strb	r3, [r7, #15]
 8001a6c:	e044      	b.n	8001af8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a6e:	7bfa      	ldrb	r2, [r7, #15]
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	4613      	mov	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001a80:	2200      	movs	r2, #0
 8001a82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a84:	7bfa      	ldrb	r2, [r7, #15]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001a96:	7bfa      	ldrb	r2, [r7, #15]
 8001a98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a9a:	7bfa      	ldrb	r2, [r7, #15]
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ab0:	7bfa      	ldrb	r2, [r7, #15]
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	440b      	add	r3, r1
 8001abe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ac6:	7bfa      	ldrb	r2, [r7, #15]
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4613      	mov	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	4413      	add	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001adc:	7bfa      	ldrb	r2, [r7, #15]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	3301      	adds	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
 8001af8:	7bfa      	ldrb	r2, [r7, #15]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d3b5      	bcc.n	8001a6e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	687e      	ldr	r6, [r7, #4]
 8001b0a:	466d      	mov	r5, sp
 8001b0c:	f106 0410 	add.w	r4, r6, #16
 8001b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b20:	1d33      	adds	r3, r6, #4
 8001b22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b24:	6838      	ldr	r0, [r7, #0]
 8001b26:	f002 ffdf 	bl	8004ae8 <USB_DevInit>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2202      	movs	r2, #2
 8001b34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e014      	b.n	8001b66 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d102      	bne.n	8001b5a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f80b 	bl	8001b70 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f003 f9ad 	bl	8004ebe <USB_DevDisconnect>

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001b70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001b9e:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_PCDEx_ActivateLPM+0x44>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	10000003 	.word	0x10000003

08001bb8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40007000 	.word	0x40007000

08001bd8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001be2:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <HAL_PWREx_EnableOverDrive+0x98>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a22      	ldr	r2, [pc, #136]	; (8001c70 <HAL_PWREx_EnableOverDrive+0x98>)
 8001be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
 8001bee:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <HAL_PWREx_EnableOverDrive+0x98>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a1d      	ldr	r2, [pc, #116]	; (8001c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c06:	f7ff fa2b 	bl	8001060 <HAL_GetTick>
 8001c0a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c0c:	e009      	b.n	8001c22 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c0e:	f7ff fa27 	bl	8001060 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c1c:	d901      	bls.n	8001c22 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e022      	b.n	8001c68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c22:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2e:	d1ee      	bne.n	8001c0e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c30:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0f      	ldr	r2, [pc, #60]	; (8001c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c3c:	f7ff fa10 	bl	8001060 <HAL_GetTick>
 8001c40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c42:	e009      	b.n	8001c58 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c44:	f7ff fa0c 	bl	8001060 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c52:	d901      	bls.n	8001c58 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e007      	b.n	8001c68 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c64:	d1ee      	bne.n	8001c44 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40007000 	.word	0x40007000

08001c78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c80:	2300      	movs	r3, #0
 8001c82:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e291      	b.n	80021b2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 8087 	beq.w	8001daa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c9c:	4b96      	ldr	r3, [pc, #600]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	d00c      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ca8:	4b93      	ldr	r3, [pc, #588]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d112      	bne.n	8001cda <HAL_RCC_OscConfig+0x62>
 8001cb4:	4b90      	ldr	r3, [pc, #576]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cc0:	d10b      	bne.n	8001cda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc2:	4b8d      	ldr	r3, [pc, #564]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d06c      	beq.n	8001da8 <HAL_RCC_OscConfig+0x130>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d168      	bne.n	8001da8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e26b      	b.n	80021b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x7a>
 8001ce4:	4b84      	ldr	r3, [pc, #528]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a83      	ldr	r2, [pc, #524]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	e02e      	b.n	8001d50 <HAL_RCC_OscConfig+0xd8>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x9c>
 8001cfa:	4b7f      	ldr	r3, [pc, #508]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a7e      	ldr	r2, [pc, #504]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	4b7c      	ldr	r3, [pc, #496]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a7b      	ldr	r2, [pc, #492]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001d0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	e01d      	b.n	8001d50 <HAL_RCC_OscConfig+0xd8>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d1c:	d10c      	bne.n	8001d38 <HAL_RCC_OscConfig+0xc0>
 8001d1e:	4b76      	ldr	r3, [pc, #472]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a75      	ldr	r2, [pc, #468]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	4b73      	ldr	r3, [pc, #460]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a72      	ldr	r2, [pc, #456]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	e00b      	b.n	8001d50 <HAL_RCC_OscConfig+0xd8>
 8001d38:	4b6f      	ldr	r3, [pc, #444]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a6e      	ldr	r2, [pc, #440]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001d3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b6c      	ldr	r3, [pc, #432]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a6b      	ldr	r2, [pc, #428]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d013      	beq.n	8001d80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7ff f982 	bl	8001060 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d60:	f7ff f97e 	bl	8001060 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b64      	cmp	r3, #100	; 0x64
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e21f      	b.n	80021b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d72:	4b61      	ldr	r3, [pc, #388]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0xe8>
 8001d7e:	e014      	b.n	8001daa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d80:	f7ff f96e 	bl	8001060 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d88:	f7ff f96a 	bl	8001060 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b64      	cmp	r3, #100	; 0x64
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e20b      	b.n	80021b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9a:	4b57      	ldr	r3, [pc, #348]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x110>
 8001da6:	e000      	b.n	8001daa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d069      	beq.n	8001e8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001db6:	4b50      	ldr	r3, [pc, #320]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00b      	beq.n	8001dda <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dc2:	4b4d      	ldr	r3, [pc, #308]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d11c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x190>
 8001dce:	4b4a      	ldr	r3, [pc, #296]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d116      	bne.n	8001e08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dda:	4b47      	ldr	r3, [pc, #284]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_RCC_OscConfig+0x17a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d001      	beq.n	8001df2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e1df      	b.n	80021b2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df2:	4b41      	ldr	r3, [pc, #260]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	493d      	ldr	r1, [pc, #244]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e06:	e040      	b.n	8001e8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d023      	beq.n	8001e58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e10:	4b39      	ldr	r3, [pc, #228]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a38      	ldr	r2, [pc, #224]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7ff f920 	bl	8001060 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e24:	f7ff f91c 	bl	8001060 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e1bd      	b.n	80021b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e36:	4b30      	ldr	r3, [pc, #192]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e42:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4929      	ldr	r1, [pc, #164]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]
 8001e56:	e018      	b.n	8001e8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e58:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a26      	ldr	r2, [pc, #152]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001e5e:	f023 0301 	bic.w	r3, r3, #1
 8001e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7ff f8fc 	bl	8001060 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6c:	f7ff f8f8 	bl	8001060 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e199      	b.n	80021b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0308 	and.w	r3, r3, #8
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d038      	beq.n	8001f08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d019      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e9e:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea2:	4a15      	ldr	r2, [pc, #84]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eaa:	f7ff f8d9 	bl	8001060 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb2:	f7ff f8d5 	bl	8001060 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e176      	b.n	80021b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001ec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x23a>
 8001ed0:	e01a      	b.n	8001f08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ed6:	4a08      	ldr	r2, [pc, #32]	; (8001ef8 <HAL_RCC_OscConfig+0x280>)
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ede:	f7ff f8bf 	bl	8001060 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee4:	e00a      	b.n	8001efc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee6:	f7ff f8bb 	bl	8001060 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d903      	bls.n	8001efc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e15c      	b.n	80021b2 <HAL_RCC_OscConfig+0x53a>
 8001ef8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efc:	4b91      	ldr	r3, [pc, #580]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8001efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1ee      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 80a4 	beq.w	800205e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f16:	4b8b      	ldr	r3, [pc, #556]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10d      	bne.n	8001f3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	4b88      	ldr	r3, [pc, #544]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	4a87      	ldr	r2, [pc, #540]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8001f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2e:	4b85      	ldr	r3, [pc, #532]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f3e:	4b82      	ldr	r3, [pc, #520]	; (8002148 <HAL_RCC_OscConfig+0x4d0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d118      	bne.n	8001f7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f4a:	4b7f      	ldr	r3, [pc, #508]	; (8002148 <HAL_RCC_OscConfig+0x4d0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a7e      	ldr	r2, [pc, #504]	; (8002148 <HAL_RCC_OscConfig+0x4d0>)
 8001f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f56:	f7ff f883 	bl	8001060 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5e:	f7ff f87f 	bl	8001060 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b64      	cmp	r3, #100	; 0x64
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e120      	b.n	80021b2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f70:	4b75      	ldr	r3, [pc, #468]	; (8002148 <HAL_RCC_OscConfig+0x4d0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d106      	bne.n	8001f92 <HAL_RCC_OscConfig+0x31a>
 8001f84:	4b6f      	ldr	r3, [pc, #444]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8001f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f88:	4a6e      	ldr	r2, [pc, #440]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f90:	e02d      	b.n	8001fee <HAL_RCC_OscConfig+0x376>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x33c>
 8001f9a:	4b6a      	ldr	r3, [pc, #424]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9e:	4a69      	ldr	r2, [pc, #420]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa6:	4b67      	ldr	r3, [pc, #412]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8001fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001faa:	4a66      	ldr	r2, [pc, #408]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8001fac:	f023 0304 	bic.w	r3, r3, #4
 8001fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb2:	e01c      	b.n	8001fee <HAL_RCC_OscConfig+0x376>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b05      	cmp	r3, #5
 8001fba:	d10c      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x35e>
 8001fbc:	4b61      	ldr	r3, [pc, #388]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8001fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc0:	4a60      	ldr	r2, [pc, #384]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8001fc2:	f043 0304 	orr.w	r3, r3, #4
 8001fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fc8:	4b5e      	ldr	r3, [pc, #376]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8001fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fcc:	4a5d      	ldr	r2, [pc, #372]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd4:	e00b      	b.n	8001fee <HAL_RCC_OscConfig+0x376>
 8001fd6:	4b5b      	ldr	r3, [pc, #364]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fda:	4a5a      	ldr	r2, [pc, #360]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe2:	4b58      	ldr	r3, [pc, #352]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe6:	4a57      	ldr	r2, [pc, #348]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8001fe8:	f023 0304 	bic.w	r3, r3, #4
 8001fec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d015      	beq.n	8002022 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff6:	f7ff f833 	bl	8001060 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ffc:	e00a      	b.n	8002014 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f7ff f82f 	bl	8001060 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f241 3288 	movw	r2, #5000	; 0x1388
 800200c:	4293      	cmp	r3, r2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e0ce      	b.n	80021b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002014:	4b4b      	ldr	r3, [pc, #300]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0ee      	beq.n	8001ffe <HAL_RCC_OscConfig+0x386>
 8002020:	e014      	b.n	800204c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002022:	f7ff f81d 	bl	8001060 <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002028:	e00a      	b.n	8002040 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202a:	f7ff f819 	bl	8001060 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	f241 3288 	movw	r2, #5000	; 0x1388
 8002038:	4293      	cmp	r3, r2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e0b8      	b.n	80021b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002040:	4b40      	ldr	r3, [pc, #256]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8002042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1ee      	bne.n	800202a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800204c:	7dfb      	ldrb	r3, [r7, #23]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d105      	bne.n	800205e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002052:	4b3c      	ldr	r3, [pc, #240]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a3b      	ldr	r2, [pc, #236]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8002058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 80a4 	beq.w	80021b0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002068:	4b36      	ldr	r3, [pc, #216]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	2b08      	cmp	r3, #8
 8002072:	d06b      	beq.n	800214c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d149      	bne.n	8002110 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207c:	4b31      	ldr	r3, [pc, #196]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a30      	ldr	r2, [pc, #192]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8002082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7fe ffea 	bl	8001060 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002090:	f7fe ffe6 	bl	8001060 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e087      	b.n	80021b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a2:	4b28      	ldr	r3, [pc, #160]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69da      	ldr	r2, [r3, #28]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	019b      	lsls	r3, r3, #6
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c4:	085b      	lsrs	r3, r3, #1
 80020c6:	3b01      	subs	r3, #1
 80020c8:	041b      	lsls	r3, r3, #16
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	061b      	lsls	r3, r3, #24
 80020d2:	4313      	orrs	r3, r2
 80020d4:	4a1b      	ldr	r2, [pc, #108]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 80020d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020da:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a18      	ldr	r2, [pc, #96]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 80020e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e8:	f7fe ffba 	bl	8001060 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f0:	f7fe ffb6 	bl	8001060 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e057      	b.n	80021b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0x478>
 800210e:	e04f      	b.n	80021b0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0b      	ldr	r2, [pc, #44]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8002116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800211a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7fe ffa0 	bl	8001060 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002124:	f7fe ff9c 	bl	8001060 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e03d      	b.n	80021b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002136:	4b03      	ldr	r3, [pc, #12]	; (8002144 <HAL_RCC_OscConfig+0x4cc>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x4ac>
 8002142:	e035      	b.n	80021b0 <HAL_RCC_OscConfig+0x538>
 8002144:	40023800 	.word	0x40023800
 8002148:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800214c:	4b1b      	ldr	r3, [pc, #108]	; (80021bc <HAL_RCC_OscConfig+0x544>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d028      	beq.n	80021ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002164:	429a      	cmp	r2, r3
 8002166:	d121      	bne.n	80021ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002172:	429a      	cmp	r2, r3
 8002174:	d11a      	bne.n	80021ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800217c:	4013      	ands	r3, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002182:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002184:	4293      	cmp	r3, r2
 8002186:	d111      	bne.n	80021ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	085b      	lsrs	r3, r3, #1
 8002194:	3b01      	subs	r3, #1
 8002196:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002198:	429a      	cmp	r2, r3
 800219a:	d107      	bne.n	80021ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800

080021c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0d0      	b.n	800237a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021d8:	4b6a      	ldr	r3, [pc, #424]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 030f 	and.w	r3, r3, #15
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d910      	bls.n	8002208 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e6:	4b67      	ldr	r3, [pc, #412]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 020f 	bic.w	r2, r3, #15
 80021ee:	4965      	ldr	r1, [pc, #404]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b63      	ldr	r3, [pc, #396]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0b8      	b.n	800237a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d020      	beq.n	8002256 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002220:	4b59      	ldr	r3, [pc, #356]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	4a58      	ldr	r2, [pc, #352]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 8002226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800222a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002238:	4b53      	ldr	r3, [pc, #332]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	4a52      	ldr	r2, [pc, #328]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 800223e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002242:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002244:	4b50      	ldr	r3, [pc, #320]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	494d      	ldr	r1, [pc, #308]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 8002252:	4313      	orrs	r3, r2
 8002254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d040      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d107      	bne.n	800227a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226a:	4b47      	ldr	r3, [pc, #284]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d115      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e07f      	b.n	800237a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d107      	bne.n	8002292 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002282:	4b41      	ldr	r3, [pc, #260]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e073      	b.n	800237a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002292:	4b3d      	ldr	r3, [pc, #244]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e06b      	b.n	800237a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a2:	4b39      	ldr	r3, [pc, #228]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f023 0203 	bic.w	r2, r3, #3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4936      	ldr	r1, [pc, #216]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022b4:	f7fe fed4 	bl	8001060 <HAL_GetTick>
 80022b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ba:	e00a      	b.n	80022d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022bc:	f7fe fed0 	bl	8001060 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e053      	b.n	800237a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d2:	4b2d      	ldr	r3, [pc, #180]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 020c 	and.w	r2, r3, #12
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d1eb      	bne.n	80022bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022e4:	4b27      	ldr	r3, [pc, #156]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d210      	bcs.n	8002314 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b24      	ldr	r3, [pc, #144]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 020f 	bic.w	r2, r3, #15
 80022fa:	4922      	ldr	r1, [pc, #136]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b20      	ldr	r3, [pc, #128]	; (8002384 <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e032      	b.n	800237a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d008      	beq.n	8002332 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002320:	4b19      	ldr	r3, [pc, #100]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4916      	ldr	r1, [pc, #88]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d009      	beq.n	8002352 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800233e:	4b12      	ldr	r3, [pc, #72]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	490e      	ldr	r1, [pc, #56]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002352:	f000 f821 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8002356:	4602      	mov	r2, r0
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_RCC_ClockConfig+0x1c8>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	490a      	ldr	r1, [pc, #40]	; (800238c <HAL_RCC_ClockConfig+0x1cc>)
 8002364:	5ccb      	ldrb	r3, [r1, r3]
 8002366:	fa22 f303 	lsr.w	r3, r2, r3
 800236a:	4a09      	ldr	r2, [pc, #36]	; (8002390 <HAL_RCC_ClockConfig+0x1d0>)
 800236c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <HAL_RCC_ClockConfig+0x1d4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe fe30 	bl	8000fd8 <HAL_InitTick>

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023c00 	.word	0x40023c00
 8002388:	40023800 	.word	0x40023800
 800238c:	08005074 	.word	0x08005074
 8002390:	20000008 	.word	0x20000008
 8002394:	2000000c 	.word	0x2000000c

08002398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800239c:	b094      	sub	sp, #80	; 0x50
 800239e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	647b      	str	r3, [r7, #68]	; 0x44
 80023a4:	2300      	movs	r3, #0
 80023a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023a8:	2300      	movs	r3, #0
 80023aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023b0:	4b79      	ldr	r3, [pc, #484]	; (8002598 <HAL_RCC_GetSysClockFreq+0x200>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d00d      	beq.n	80023d8 <HAL_RCC_GetSysClockFreq+0x40>
 80023bc:	2b08      	cmp	r3, #8
 80023be:	f200 80e1 	bhi.w	8002584 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x34>
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d003      	beq.n	80023d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80023ca:	e0db      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023cc:	4b73      	ldr	r3, [pc, #460]	; (800259c <HAL_RCC_GetSysClockFreq+0x204>)
 80023ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023d0:	e0db      	b.n	800258a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023d2:	4b73      	ldr	r3, [pc, #460]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80023d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023d6:	e0d8      	b.n	800258a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023d8:	4b6f      	ldr	r3, [pc, #444]	; (8002598 <HAL_RCC_GetSysClockFreq+0x200>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023e0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80023e2:	4b6d      	ldr	r3, [pc, #436]	; (8002598 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d063      	beq.n	80024b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ee:	4b6a      	ldr	r3, [pc, #424]	; (8002598 <HAL_RCC_GetSysClockFreq+0x200>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	099b      	lsrs	r3, r3, #6
 80023f4:	2200      	movs	r2, #0
 80023f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80023f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80023fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002400:	633b      	str	r3, [r7, #48]	; 0x30
 8002402:	2300      	movs	r3, #0
 8002404:	637b      	str	r3, [r7, #52]	; 0x34
 8002406:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800240a:	4622      	mov	r2, r4
 800240c:	462b      	mov	r3, r5
 800240e:	f04f 0000 	mov.w	r0, #0
 8002412:	f04f 0100 	mov.w	r1, #0
 8002416:	0159      	lsls	r1, r3, #5
 8002418:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800241c:	0150      	lsls	r0, r2, #5
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4621      	mov	r1, r4
 8002424:	1a51      	subs	r1, r2, r1
 8002426:	6139      	str	r1, [r7, #16]
 8002428:	4629      	mov	r1, r5
 800242a:	eb63 0301 	sbc.w	r3, r3, r1
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800243c:	4659      	mov	r1, fp
 800243e:	018b      	lsls	r3, r1, #6
 8002440:	4651      	mov	r1, sl
 8002442:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002446:	4651      	mov	r1, sl
 8002448:	018a      	lsls	r2, r1, #6
 800244a:	4651      	mov	r1, sl
 800244c:	ebb2 0801 	subs.w	r8, r2, r1
 8002450:	4659      	mov	r1, fp
 8002452:	eb63 0901 	sbc.w	r9, r3, r1
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002462:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002466:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800246a:	4690      	mov	r8, r2
 800246c:	4699      	mov	r9, r3
 800246e:	4623      	mov	r3, r4
 8002470:	eb18 0303 	adds.w	r3, r8, r3
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	462b      	mov	r3, r5
 8002478:	eb49 0303 	adc.w	r3, r9, r3
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800248a:	4629      	mov	r1, r5
 800248c:	024b      	lsls	r3, r1, #9
 800248e:	4621      	mov	r1, r4
 8002490:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002494:	4621      	mov	r1, r4
 8002496:	024a      	lsls	r2, r1, #9
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800249e:	2200      	movs	r2, #0
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024a8:	f7fd fec2 	bl	8000230 <__aeabi_uldivmod>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4613      	mov	r3, r2
 80024b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024b4:	e058      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b6:	4b38      	ldr	r3, [pc, #224]	; (8002598 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	099b      	lsrs	r3, r3, #6
 80024bc:	2200      	movs	r2, #0
 80024be:	4618      	mov	r0, r3
 80024c0:	4611      	mov	r1, r2
 80024c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024c6:	623b      	str	r3, [r7, #32]
 80024c8:	2300      	movs	r3, #0
 80024ca:	627b      	str	r3, [r7, #36]	; 0x24
 80024cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024d0:	4642      	mov	r2, r8
 80024d2:	464b      	mov	r3, r9
 80024d4:	f04f 0000 	mov.w	r0, #0
 80024d8:	f04f 0100 	mov.w	r1, #0
 80024dc:	0159      	lsls	r1, r3, #5
 80024de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024e2:	0150      	lsls	r0, r2, #5
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4641      	mov	r1, r8
 80024ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80024ee:	4649      	mov	r1, r9
 80024f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	f04f 0300 	mov.w	r3, #0
 80024fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002500:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002504:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002508:	ebb2 040a 	subs.w	r4, r2, sl
 800250c:	eb63 050b 	sbc.w	r5, r3, fp
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	00eb      	lsls	r3, r5, #3
 800251a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800251e:	00e2      	lsls	r2, r4, #3
 8002520:	4614      	mov	r4, r2
 8002522:	461d      	mov	r5, r3
 8002524:	4643      	mov	r3, r8
 8002526:	18e3      	adds	r3, r4, r3
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	464b      	mov	r3, r9
 800252c:	eb45 0303 	adc.w	r3, r5, r3
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800253e:	4629      	mov	r1, r5
 8002540:	028b      	lsls	r3, r1, #10
 8002542:	4621      	mov	r1, r4
 8002544:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002548:	4621      	mov	r1, r4
 800254a:	028a      	lsls	r2, r1, #10
 800254c:	4610      	mov	r0, r2
 800254e:	4619      	mov	r1, r3
 8002550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002552:	2200      	movs	r2, #0
 8002554:	61bb      	str	r3, [r7, #24]
 8002556:	61fa      	str	r2, [r7, #28]
 8002558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800255c:	f7fd fe68 	bl	8000230 <__aeabi_uldivmod>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4613      	mov	r3, r2
 8002566:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002568:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCC_GetSysClockFreq+0x200>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	0c1b      	lsrs	r3, r3, #16
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	3301      	adds	r3, #1
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002578:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800257a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800257c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002580:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002582:	e002      	b.n	800258a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_RCC_GetSysClockFreq+0x204>)
 8002586:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002588:	bf00      	nop
    }
  }
  return sysclockfreq;
 800258a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800258c:	4618      	mov	r0, r3
 800258e:	3750      	adds	r7, #80	; 0x50
 8002590:	46bd      	mov	sp, r7
 8002592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	00f42400 	.word	0x00f42400
 80025a0:	007a1200 	.word	0x007a1200

080025a4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025aa:	681b      	ldr	r3, [r3, #0]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	20000008 	.word	0x20000008

080025bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025c0:	f7ff fff0 	bl	80025a4 <HAL_RCC_GetHCLKFreq>
 80025c4:	4602      	mov	r2, r0
 80025c6:	4b05      	ldr	r3, [pc, #20]	; (80025dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	0a9b      	lsrs	r3, r3, #10
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	4903      	ldr	r1, [pc, #12]	; (80025e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d2:	5ccb      	ldrb	r3, [r1, r3]
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40023800 	.word	0x40023800
 80025e0:	08005084 	.word	0x08005084

080025e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025e8:	f7ff ffdc 	bl	80025a4 <HAL_RCC_GetHCLKFreq>
 80025ec:	4602      	mov	r2, r0
 80025ee:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	0b5b      	lsrs	r3, r3, #13
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	4903      	ldr	r1, [pc, #12]	; (8002608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025fa:	5ccb      	ldrb	r3, [r1, r3]
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002600:	4618      	mov	r0, r3
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40023800 	.word	0x40023800
 8002608:	08005084 	.word	0x08005084

0800260c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d012      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002630:	4b65      	ldr	r3, [pc, #404]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a64      	ldr	r2, [pc, #400]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002636:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800263a:	6093      	str	r3, [r2, #8]
 800263c:	4b62      	ldr	r3, [pc, #392]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	4960      	ldr	r1, [pc, #384]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002646:	4313      	orrs	r3, r2
 8002648:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8002652:	2301      	movs	r3, #1
 8002654:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d017      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002662:	4b59      	ldr	r3, [pc, #356]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002670:	4955      	ldr	r1, [pc, #340]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002680:	d101      	bne.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8002682:	2301      	movs	r3, #1
 8002684:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800268e:	2301      	movs	r3, #1
 8002690:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d017      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800269e:	4b4a      	ldr	r3, [pc, #296]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	4946      	ldr	r1, [pc, #280]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026bc:	d101      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80026be:	2301      	movs	r3, #1
 80026c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80026ca:	2301      	movs	r3, #1
 80026cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0320 	and.w	r3, r3, #32
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 808b 	beq.w	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80026dc:	4b3a      	ldr	r3, [pc, #232]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	4a39      	ldr	r2, [pc, #228]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e6:	6413      	str	r3, [r2, #64]	; 0x40
 80026e8:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026f4:	4b35      	ldr	r3, [pc, #212]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a34      	ldr	r2, [pc, #208]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002700:	f7fe fcae 	bl	8001060 <HAL_GetTick>
 8002704:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002708:	f7fe fcaa 	bl	8001060 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e2bc      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800271a:	4b2c      	ldr	r3, [pc, #176]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002726:	4b28      	ldr	r3, [pc, #160]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800272e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d035      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273e:	693a      	ldr	r2, [r7, #16]
 8002740:	429a      	cmp	r2, r3
 8002742:	d02e      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002744:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800274c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800274e:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002752:	4a1d      	ldr	r2, [pc, #116]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002758:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800275a:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	4a1a      	ldr	r2, [pc, #104]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002764:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002766:	4a18      	ldr	r2, [pc, #96]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800276c:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b01      	cmp	r3, #1
 8002776:	d114      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7fe fc72 	bl	8001060 <HAL_GetTick>
 800277c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277e:	e00a      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002780:	f7fe fc6e 	bl	8001060 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	; 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e27e      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002796:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0ee      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027ae:	d111      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80027bc:	4b04      	ldr	r3, [pc, #16]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80027be:	400b      	ands	r3, r1
 80027c0:	4901      	ldr	r1, [pc, #4]	; (80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	608b      	str	r3, [r1, #8]
 80027c6:	e00b      	b.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40007000 	.word	0x40007000
 80027d0:	0ffffcff 	.word	0x0ffffcff
 80027d4:	4ba4      	ldr	r3, [pc, #656]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	4aa3      	ldr	r2, [pc, #652]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80027de:	6093      	str	r3, [r2, #8]
 80027e0:	4ba1      	ldr	r3, [pc, #644]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ec:	499e      	ldr	r1, [pc, #632]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d010      	beq.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80027fe:	4b9a      	ldr	r3, [pc, #616]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002804:	4a98      	ldr	r2, [pc, #608]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800280a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800280e:	4b96      	ldr	r3, [pc, #600]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002810:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	4993      	ldr	r1, [pc, #588]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800281a:	4313      	orrs	r3, r2
 800281c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800282c:	4b8e      	ldr	r3, [pc, #568]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002832:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	498b      	ldr	r1, [pc, #556]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800283c:	4313      	orrs	r3, r2
 800283e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800284e:	4b86      	ldr	r3, [pc, #536]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002854:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800285c:	4982      	ldr	r1, [pc, #520]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002870:	4b7d      	ldr	r3, [pc, #500]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002876:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800287e:	497a      	ldr	r1, [pc, #488]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002892:	4b75      	ldr	r3, [pc, #468]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002898:	f023 0203 	bic.w	r2, r3, #3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a0:	4971      	ldr	r1, [pc, #452]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028b4:	4b6c      	ldr	r3, [pc, #432]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ba:	f023 020c 	bic.w	r2, r3, #12
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	4969      	ldr	r1, [pc, #420]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028d6:	4b64      	ldr	r3, [pc, #400]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e4:	4960      	ldr	r1, [pc, #384]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028f8:	4b5b      	ldr	r3, [pc, #364]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002906:	4958      	ldr	r1, [pc, #352]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800291a:	4b53      	ldr	r3, [pc, #332]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800291c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002920:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002928:	494f      	ldr	r1, [pc, #316]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800293c:	4b4a      	ldr	r3, [pc, #296]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002942:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294a:	4947      	ldr	r1, [pc, #284]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800295e:	4b42      	ldr	r3, [pc, #264]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002964:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296c:	493e      	ldr	r1, [pc, #248]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002980:	4b39      	ldr	r3, [pc, #228]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002986:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298e:	4936      	ldr	r1, [pc, #216]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d011      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80029a2:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b0:	492d      	ldr	r1, [pc, #180]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029c0:	d101      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80029c2:	2301      	movs	r3, #1
 80029c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029d2:	4b25      	ldr	r3, [pc, #148]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e0:	4921      	ldr	r1, [pc, #132]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029f4:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a02:	4919      	ldr	r1, [pc, #100]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002a16:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a24:	4910      	ldr	r1, [pc, #64]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d006      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 809d 	beq.w	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a08      	ldr	r2, [pc, #32]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a4c:	f7fe fb08 	bl	8001060 <HAL_GetTick>
 8002a50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a52:	e00b      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a54:	f7fe fb04 	bl	8001060 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	; 0x64
 8002a60:	d904      	bls.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e116      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002a66:	bf00      	nop
 8002a68:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a6c:	4b8b      	ldr	r3, [pc, #556]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1ed      	bne.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d017      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d113      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a8c:	4b83      	ldr	r3, [pc, #524]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a92:	0e1b      	lsrs	r3, r3, #24
 8002a94:	f003 030f 	and.w	r3, r3, #15
 8002a98:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	019a      	lsls	r2, r3, #6
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	061b      	lsls	r3, r3, #24
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	071b      	lsls	r3, r3, #28
 8002aac:	497b      	ldr	r1, [pc, #492]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d004      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d024      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ade:	d11f      	bne.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002ae0:	4b6e      	ldr	r3, [pc, #440]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae6:	0f1b      	lsrs	r3, r3, #28
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	019a      	lsls	r2, r3, #6
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	061b      	lsls	r3, r3, #24
 8002afa:	431a      	orrs	r2, r3
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	071b      	lsls	r3, r3, #28
 8002b00:	4966      	ldr	r1, [pc, #408]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002b08:	4b64      	ldr	r3, [pc, #400]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b0e:	f023 021f 	bic.w	r2, r3, #31
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	4960      	ldr	r1, [pc, #384]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00d      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	019a      	lsls	r2, r3, #6
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	061b      	lsls	r3, r3, #24
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	071b      	lsls	r3, r3, #28
 8002b40:	4956      	ldr	r1, [pc, #344]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b48:	4b54      	ldr	r3, [pc, #336]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a53      	ldr	r2, [pc, #332]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002b4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b54:	f7fe fa84 	bl	8001060 <HAL_GetTick>
 8002b58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b5c:	f7fe fa80 	bl	8001060 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	; 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e092      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b6e:	4b4b      	ldr	r3, [pc, #300]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	f040 8088 	bne.w	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b82:	4b46      	ldr	r3, [pc, #280]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a45      	ldr	r2, [pc, #276]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b8e:	f7fe fa67 	bl	8001060 <HAL_GetTick>
 8002b92:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b94:	e008      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b96:	f7fe fa63 	bl	8001060 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b64      	cmp	r3, #100	; 0x64
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e075      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ba8:	4b3c      	ldr	r3, [pc, #240]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bb4:	d0ef      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d024      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d120      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002bde:	4b2f      	ldr	r3, [pc, #188]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be4:	0c1b      	lsrs	r3, r3, #16
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	019a      	lsls	r2, r3, #6
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	041b      	lsls	r3, r3, #16
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	061b      	lsls	r3, r3, #24
 8002bfe:	4927      	ldr	r1, [pc, #156]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c06:	4b25      	ldr	r3, [pc, #148]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	4920      	ldr	r1, [pc, #128]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d018      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x652>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c34:	d113      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c36:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3c:	0e1b      	lsrs	r3, r3, #24
 8002c3e:	f003 030f 	and.w	r3, r3, #15
 8002c42:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	019a      	lsls	r2, r3, #6
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	041b      	lsls	r3, r3, #16
 8002c50:	431a      	orrs	r2, r3
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	061b      	lsls	r3, r3, #24
 8002c56:	4911      	ldr	r1, [pc, #68]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a0e      	ldr	r2, [pc, #56]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c6a:	f7fe f9f9 	bl	8001060 <HAL_GetTick>
 8002c6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c70:	e008      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002c72:	f7fe f9f5 	bl	8001060 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b64      	cmp	r3, #100	; 0x64
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e007      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c90:	d1ef      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3720      	adds	r7, #32
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40023800 	.word	0x40023800

08002ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e049      	b.n	8002d46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fd ffd2 	bl	8000c70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3304      	adds	r3, #4
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4610      	mov	r0, r2
 8002ce0:	f000 f9f6 	bl	80030d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d001      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e054      	b.n	8002e12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a26      	ldr	r2, [pc, #152]	; (8002e20 <HAL_TIM_Base_Start_IT+0xd0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d022      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x80>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d92:	d01d      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x80>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a22      	ldr	r2, [pc, #136]	; (8002e24 <HAL_TIM_Base_Start_IT+0xd4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d018      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x80>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a21      	ldr	r2, [pc, #132]	; (8002e28 <HAL_TIM_Base_Start_IT+0xd8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d013      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x80>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1f      	ldr	r2, [pc, #124]	; (8002e2c <HAL_TIM_Base_Start_IT+0xdc>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00e      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x80>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1e      	ldr	r2, [pc, #120]	; (8002e30 <HAL_TIM_Base_Start_IT+0xe0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d009      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x80>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1c      	ldr	r2, [pc, #112]	; (8002e34 <HAL_TIM_Base_Start_IT+0xe4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x80>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a1b      	ldr	r2, [pc, #108]	; (8002e38 <HAL_TIM_Base_Start_IT+0xe8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d115      	bne.n	8002dfc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <HAL_TIM_Base_Start_IT+0xec>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d015      	beq.n	8002e0e <HAL_TIM_Base_Start_IT+0xbe>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de8:	d011      	beq.n	8002e0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0201 	orr.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dfa:	e008      	b.n	8002e0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	e000      	b.n	8002e10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40010000 	.word	0x40010000
 8002e24:	40000400 	.word	0x40000400
 8002e28:	40000800 	.word	0x40000800
 8002e2c:	40000c00 	.word	0x40000c00
 8002e30:	40010400 	.word	0x40010400
 8002e34:	40014000 	.word	0x40014000
 8002e38:	40001800 	.word	0x40001800
 8002e3c:	00010007 	.word	0x00010007

08002e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d122      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d11b      	bne.n	8002e9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f06f 0202 	mvn.w	r2, #2
 8002e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f905 	bl	8003092 <HAL_TIM_IC_CaptureCallback>
 8002e88:	e005      	b.n	8002e96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f8f7 	bl	800307e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f908 	bl	80030a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d122      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d11b      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f06f 0204 	mvn.w	r2, #4
 8002ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f8db 	bl	8003092 <HAL_TIM_IC_CaptureCallback>
 8002edc:	e005      	b.n	8002eea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f8cd 	bl	800307e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f8de 	bl	80030a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d122      	bne.n	8002f44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0308 	and.w	r3, r3, #8
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d11b      	bne.n	8002f44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0208 	mvn.w	r2, #8
 8002f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2204      	movs	r2, #4
 8002f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f8b1 	bl	8003092 <HAL_TIM_IC_CaptureCallback>
 8002f30:	e005      	b.n	8002f3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f8a3 	bl	800307e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f8b4 	bl	80030a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b10      	cmp	r3, #16
 8002f50:	d122      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f003 0310 	and.w	r3, r3, #16
 8002f5c:	2b10      	cmp	r3, #16
 8002f5e:	d11b      	bne.n	8002f98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 0210 	mvn.w	r2, #16
 8002f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f887 	bl	8003092 <HAL_TIM_IC_CaptureCallback>
 8002f84:	e005      	b.n	8002f92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f879 	bl	800307e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f88a 	bl	80030a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d10e      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d107      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f06f 0201 	mvn.w	r2, #1
 8002fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fd fd5c 	bl	8000a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fce:	2b80      	cmp	r3, #128	; 0x80
 8002fd0:	d10e      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fdc:	2b80      	cmp	r3, #128	; 0x80
 8002fde:	d107      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f91a 	bl	8003224 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ffe:	d10e      	bne.n	800301e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300a:	2b80      	cmp	r3, #128	; 0x80
 800300c:	d107      	bne.n	800301e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f90d 	bl	8003238 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003028:	2b40      	cmp	r3, #64	; 0x40
 800302a:	d10e      	bne.n	800304a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003036:	2b40      	cmp	r3, #64	; 0x40
 8003038:	d107      	bne.n	800304a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003042:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f838 	bl	80030ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	f003 0320 	and.w	r3, r3, #32
 8003054:	2b20      	cmp	r3, #32
 8003056:	d10e      	bne.n	8003076 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f003 0320 	and.w	r3, r3, #32
 8003062:	2b20      	cmp	r3, #32
 8003064:	d107      	bne.n	8003076 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f06f 0220 	mvn.w	r2, #32
 800306e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f8cd 	bl	8003210 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
	...

080030d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a40      	ldr	r2, [pc, #256]	; (80031e4 <TIM_Base_SetConfig+0x114>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d013      	beq.n	8003110 <TIM_Base_SetConfig+0x40>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ee:	d00f      	beq.n	8003110 <TIM_Base_SetConfig+0x40>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a3d      	ldr	r2, [pc, #244]	; (80031e8 <TIM_Base_SetConfig+0x118>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00b      	beq.n	8003110 <TIM_Base_SetConfig+0x40>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a3c      	ldr	r2, [pc, #240]	; (80031ec <TIM_Base_SetConfig+0x11c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d007      	beq.n	8003110 <TIM_Base_SetConfig+0x40>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a3b      	ldr	r2, [pc, #236]	; (80031f0 <TIM_Base_SetConfig+0x120>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d003      	beq.n	8003110 <TIM_Base_SetConfig+0x40>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a3a      	ldr	r2, [pc, #232]	; (80031f4 <TIM_Base_SetConfig+0x124>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d108      	bne.n	8003122 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a2f      	ldr	r2, [pc, #188]	; (80031e4 <TIM_Base_SetConfig+0x114>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d02b      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003130:	d027      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a2c      	ldr	r2, [pc, #176]	; (80031e8 <TIM_Base_SetConfig+0x118>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d023      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a2b      	ldr	r2, [pc, #172]	; (80031ec <TIM_Base_SetConfig+0x11c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d01f      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a2a      	ldr	r2, [pc, #168]	; (80031f0 <TIM_Base_SetConfig+0x120>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d01b      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a29      	ldr	r2, [pc, #164]	; (80031f4 <TIM_Base_SetConfig+0x124>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d017      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a28      	ldr	r2, [pc, #160]	; (80031f8 <TIM_Base_SetConfig+0x128>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a27      	ldr	r2, [pc, #156]	; (80031fc <TIM_Base_SetConfig+0x12c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00f      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a26      	ldr	r2, [pc, #152]	; (8003200 <TIM_Base_SetConfig+0x130>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d00b      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a25      	ldr	r2, [pc, #148]	; (8003204 <TIM_Base_SetConfig+0x134>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d007      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a24      	ldr	r2, [pc, #144]	; (8003208 <TIM_Base_SetConfig+0x138>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d003      	beq.n	8003182 <TIM_Base_SetConfig+0xb2>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a23      	ldr	r2, [pc, #140]	; (800320c <TIM_Base_SetConfig+0x13c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d108      	bne.n	8003194 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <TIM_Base_SetConfig+0x114>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d003      	beq.n	80031c8 <TIM_Base_SetConfig+0xf8>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a0c      	ldr	r2, [pc, #48]	; (80031f4 <TIM_Base_SetConfig+0x124>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d103      	bne.n	80031d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	615a      	str	r2, [r3, #20]
}
 80031d6:	bf00      	nop
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40010000 	.word	0x40010000
 80031e8:	40000400 	.word	0x40000400
 80031ec:	40000800 	.word	0x40000800
 80031f0:	40000c00 	.word	0x40000c00
 80031f4:	40010400 	.word	0x40010400
 80031f8:	40014000 	.word	0x40014000
 80031fc:	40014400 	.word	0x40014400
 8003200:	40014800 	.word	0x40014800
 8003204:	40001800 	.word	0x40001800
 8003208:	40001c00 	.word	0x40001c00
 800320c:	40002000 	.word	0x40002000

08003210 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e040      	b.n	80032e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fd fd40 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2224      	movs	r2, #36	; 0x24
 8003278:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fbb6 	bl	80039fc <UART_SetConfig>
 8003290:	4603      	mov	r3, r0
 8003292:	2b01      	cmp	r3, #1
 8003294:	d101      	bne.n	800329a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e022      	b.n	80032e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fe0e 	bl	8003ec4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0201 	orr.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fe95 	bl	8004008 <UART_CheckIdleState>
 80032de:	4603      	mov	r3, r0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b08b      	sub	sp, #44	; 0x2c
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	4613      	mov	r3, r2
 80032f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032fa:	2b20      	cmp	r3, #32
 80032fc:	d147      	bne.n	800338e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <HAL_UART_Transmit_IT+0x22>
 8003304:	88fb      	ldrh	r3, [r7, #6]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e040      	b.n	8003390 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	68ba      	ldr	r2, [r7, #8]
 8003312:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	88fa      	ldrh	r2, [r7, #6]
 8003318:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	88fa      	ldrh	r2, [r7, #6]
 8003320:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2200      	movs	r2, #0
 8003328:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2221      	movs	r2, #33	; 0x21
 8003336:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003340:	d107      	bne.n	8003352 <HAL_UART_Transmit_IT+0x6a>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d103      	bne.n	8003352 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	4a13      	ldr	r2, [pc, #76]	; (800339c <HAL_UART_Transmit_IT+0xb4>)
 800334e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003350:	e002      	b.n	8003358 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <HAL_UART_Transmit_IT+0xb8>)
 8003356:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	e853 3f00 	ldrex	r3, [r3]
 8003364:	613b      	str	r3, [r7, #16]
   return(result);
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	623b      	str	r3, [r7, #32]
 8003378:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337a:	69f9      	ldr	r1, [r7, #28]
 800337c:	6a3a      	ldr	r2, [r7, #32]
 800337e:	e841 2300 	strex	r3, r2, [r1]
 8003382:	61bb      	str	r3, [r7, #24]
   return(result);
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1e6      	bne.n	8003358 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	e000      	b.n	8003390 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800338e:	2302      	movs	r3, #2
  }
}
 8003390:	4618      	mov	r0, r3
 8003392:	372c      	adds	r7, #44	; 0x2c
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	0800453b 	.word	0x0800453b
 80033a0:	08004485 	.word	0x08004485

080033a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	; 0x28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	4613      	mov	r3, r2
 80033b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033b8:	2b20      	cmp	r3, #32
 80033ba:	d132      	bne.n	8003422 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <HAL_UART_Receive_IT+0x24>
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e02b      	b.n	8003424 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d018      	beq.n	8003412 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	e853 3f00 	ldrex	r3, [r3]
 80033ec:	613b      	str	r3, [r7, #16]
   return(result);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	623b      	str	r3, [r7, #32]
 8003400:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003402:	69f9      	ldr	r1, [r7, #28]
 8003404:	6a3a      	ldr	r2, [r7, #32]
 8003406:	e841 2300 	strex	r3, r2, [r1]
 800340a:	61bb      	str	r3, [r7, #24]
   return(result);
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1e6      	bne.n	80033e0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	461a      	mov	r2, r3
 8003416:	68b9      	ldr	r1, [r7, #8]
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fef3 	bl	8004204 <UART_Start_Receive_IT>
 800341e:	4603      	mov	r3, r0
 8003420:	e000      	b.n	8003424 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003422:	2302      	movs	r3, #2
  }
}
 8003424:	4618      	mov	r0, r3
 8003426:	3728      	adds	r7, #40	; 0x28
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b0ba      	sub	sp, #232	; 0xe8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003452:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003456:	f640 030f 	movw	r3, #2063	; 0x80f
 800345a:	4013      	ands	r3, r2
 800345c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003464:	2b00      	cmp	r3, #0
 8003466:	d115      	bne.n	8003494 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00f      	beq.n	8003494 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d009      	beq.n	8003494 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8297 	beq.w	80039b8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	4798      	blx	r3
      }
      return;
 8003492:	e291      	b.n	80039b8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8117 	beq.w	80036cc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800349e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80034ae:	4b85      	ldr	r3, [pc, #532]	; (80036c4 <HAL_UART_IRQHandler+0x298>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 810a 	beq.w	80036cc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d011      	beq.n	80034e8 <HAL_UART_IRQHandler+0xbc>
 80034c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00b      	beq.n	80034e8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2201      	movs	r2, #1
 80034d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034de:	f043 0201 	orr.w	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d011      	beq.n	8003518 <HAL_UART_IRQHandler+0xec>
 80034f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00b      	beq.n	8003518 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2202      	movs	r2, #2
 8003506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800350e:	f043 0204 	orr.w	r2, r3, #4
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d011      	beq.n	8003548 <HAL_UART_IRQHandler+0x11c>
 8003524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00b      	beq.n	8003548 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2204      	movs	r2, #4
 8003536:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800353e:	f043 0202 	orr.w	r2, r3, #2
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d017      	beq.n	8003584 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003558:	f003 0320 	and.w	r3, r3, #32
 800355c:	2b00      	cmp	r3, #0
 800355e:	d105      	bne.n	800356c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003564:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00b      	beq.n	8003584 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2208      	movs	r2, #8
 8003572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800357a:	f043 0208 	orr.w	r2, r3, #8
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800358c:	2b00      	cmp	r3, #0
 800358e:	d012      	beq.n	80035b6 <HAL_UART_IRQHandler+0x18a>
 8003590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003594:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00c      	beq.n	80035b6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ac:	f043 0220 	orr.w	r2, r3, #32
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 81fd 	beq.w	80039bc <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80035c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00d      	beq.n	80035ea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d007      	beq.n	80035ea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b40      	cmp	r3, #64	; 0x40
 8003600:	d005      	beq.n	800360e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003606:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800360a:	2b00      	cmp	r3, #0
 800360c:	d04f      	beq.n	80036ae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 febe 	bl	8004390 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b40      	cmp	r3, #64	; 0x40
 8003620:	d141      	bne.n	80036a6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3308      	adds	r3, #8
 8003628:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003630:	e853 3f00 	ldrex	r3, [r3]
 8003634:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003638:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800363c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3308      	adds	r3, #8
 800364a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800364e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003652:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003656:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800365a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800365e:	e841 2300 	strex	r3, r2, [r1]
 8003662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1d9      	bne.n	8003622 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003672:	2b00      	cmp	r3, #0
 8003674:	d013      	beq.n	800369e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367a:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <HAL_UART_IRQHandler+0x29c>)
 800367c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003682:	4618      	mov	r0, r3
 8003684:	f7fd ff60 	bl	8001548 <HAL_DMA_Abort_IT>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d017      	beq.n	80036be <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003698:	4610      	mov	r0, r2
 800369a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800369c:	e00f      	b.n	80036be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f996 	bl	80039d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a4:	e00b      	b.n	80036be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f992 	bl	80039d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ac:	e007      	b.n	80036be <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f98e 	bl	80039d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80036bc:	e17e      	b.n	80039bc <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036be:	bf00      	nop
    return;
 80036c0:	e17c      	b.n	80039bc <HAL_UART_IRQHandler+0x590>
 80036c2:	bf00      	nop
 80036c4:	04000120 	.word	0x04000120
 80036c8:	08004459 	.word	0x08004459

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	f040 814c 	bne.w	800396e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80036d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8145 	beq.w	800396e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80036e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 813e 	beq.w	800396e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2210      	movs	r2, #16
 80036f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003704:	2b40      	cmp	r3, #64	; 0x40
 8003706:	f040 80b6 	bne.w	8003876 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003716:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 8150 	beq.w	80039c0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003726:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800372a:	429a      	cmp	r2, r3
 800372c:	f080 8148 	bcs.w	80039c0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003736:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003744:	f000 8086 	beq.w	8003854 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003750:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003754:	e853 3f00 	ldrex	r3, [r3]
 8003758:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800375c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003764:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	461a      	mov	r2, r3
 800376e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003772:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003776:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800377e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003782:	e841 2300 	strex	r3, r2, [r1]
 8003786:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800378a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1da      	bne.n	8003748 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3308      	adds	r3, #8
 8003798:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800379c:	e853 3f00 	ldrex	r3, [r3]
 80037a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037a4:	f023 0301 	bic.w	r3, r3, #1
 80037a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3308      	adds	r3, #8
 80037b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037c2:	e841 2300 	strex	r3, r2, [r1]
 80037c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1e1      	bne.n	8003792 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3308      	adds	r3, #8
 80037d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037d8:	e853 3f00 	ldrex	r3, [r3]
 80037dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3308      	adds	r3, #8
 80037ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037fa:	e841 2300 	strex	r3, r2, [r1]
 80037fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1e3      	bne.n	80037ce <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800381c:	e853 3f00 	ldrex	r3, [r3]
 8003820:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003824:	f023 0310 	bic.w	r3, r3, #16
 8003828:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	461a      	mov	r2, r3
 8003832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003836:	65bb      	str	r3, [r7, #88]	; 0x58
 8003838:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800383c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800383e:	e841 2300 	strex	r3, r2, [r1]
 8003842:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1e4      	bne.n	8003814 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800384e:	4618      	mov	r0, r3
 8003850:	f7fd fe0a 	bl	8001468 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003866:	b29b      	uxth	r3, r3
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	b29b      	uxth	r3, r3
 800386c:	4619      	mov	r1, r3
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f8b8 	bl	80039e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003874:	e0a4      	b.n	80039c0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003882:	b29b      	uxth	r3, r3
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 8096 	beq.w	80039c4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003898:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 8091 	beq.w	80039c4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038aa:	e853 3f00 	ldrex	r3, [r3]
 80038ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	461a      	mov	r2, r3
 80038c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80038c4:	647b      	str	r3, [r7, #68]	; 0x44
 80038c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038cc:	e841 2300 	strex	r3, r2, [r1]
 80038d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1e4      	bne.n	80038a2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3308      	adds	r3, #8
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	e853 3f00 	ldrex	r3, [r3]
 80038e6:	623b      	str	r3, [r7, #32]
   return(result);
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	f023 0301 	bic.w	r3, r3, #1
 80038ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3308      	adds	r3, #8
 80038f8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038fc:	633a      	str	r2, [r7, #48]	; 0x30
 80038fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003904:	e841 2300 	strex	r3, r2, [r1]
 8003908:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800390a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e3      	bne.n	80038d8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	60fb      	str	r3, [r7, #12]
   return(result);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f023 0310 	bic.w	r3, r3, #16
 8003938:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	461a      	mov	r2, r3
 8003942:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003946:	61fb      	str	r3, [r7, #28]
 8003948:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394a:	69b9      	ldr	r1, [r7, #24]
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	e841 2300 	strex	r3, r2, [r1]
 8003952:	617b      	str	r3, [r7, #20]
   return(result);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1e4      	bne.n	8003924 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2202      	movs	r2, #2
 800395e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003960:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003964:	4619      	mov	r1, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f83c 	bl	80039e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800396c:	e02a      	b.n	80039c4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800396e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00e      	beq.n	8003998 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800397a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800397e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003982:	2b00      	cmp	r3, #0
 8003984:	d008      	beq.n	8003998 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800398a:	2b00      	cmp	r3, #0
 800398c:	d01c      	beq.n	80039c8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	4798      	blx	r3
    }
    return;
 8003996:	e017      	b.n	80039c8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d012      	beq.n	80039ca <HAL_UART_IRQHandler+0x59e>
 80039a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00c      	beq.n	80039ca <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fe22 	bl	80045fa <UART_EndTransmit_IT>
    return;
 80039b6:	e008      	b.n	80039ca <HAL_UART_IRQHandler+0x59e>
      return;
 80039b8:	bf00      	nop
 80039ba:	e006      	b.n	80039ca <HAL_UART_IRQHandler+0x59e>
    return;
 80039bc:	bf00      	nop
 80039be:	e004      	b.n	80039ca <HAL_UART_IRQHandler+0x59e>
      return;
 80039c0:	bf00      	nop
 80039c2:	e002      	b.n	80039ca <HAL_UART_IRQHandler+0x59e>
      return;
 80039c4:	bf00      	nop
 80039c6:	e000      	b.n	80039ca <HAL_UART_IRQHandler+0x59e>
    return;
 80039c8:	bf00      	nop
  }

}
 80039ca:	37e8      	adds	r7, #232	; 0xe8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039f0:	bf00      	nop
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	4ba6      	ldr	r3, [pc, #664]	; (8003cc0 <UART_SetConfig+0x2c4>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	6979      	ldr	r1, [r7, #20]
 8003a30:	430b      	orrs	r3, r1
 8003a32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a94      	ldr	r2, [pc, #592]	; (8003cc4 <UART_SetConfig+0x2c8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d120      	bne.n	8003aba <UART_SetConfig+0xbe>
 8003a78:	4b93      	ldr	r3, [pc, #588]	; (8003cc8 <UART_SetConfig+0x2cc>)
 8003a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d816      	bhi.n	8003ab4 <UART_SetConfig+0xb8>
 8003a86:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <UART_SetConfig+0x90>)
 8003a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8c:	08003a9d 	.word	0x08003a9d
 8003a90:	08003aa9 	.word	0x08003aa9
 8003a94:	08003aa3 	.word	0x08003aa3
 8003a98:	08003aaf 	.word	0x08003aaf
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	77fb      	strb	r3, [r7, #31]
 8003aa0:	e150      	b.n	8003d44 <UART_SetConfig+0x348>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	77fb      	strb	r3, [r7, #31]
 8003aa6:	e14d      	b.n	8003d44 <UART_SetConfig+0x348>
 8003aa8:	2304      	movs	r3, #4
 8003aaa:	77fb      	strb	r3, [r7, #31]
 8003aac:	e14a      	b.n	8003d44 <UART_SetConfig+0x348>
 8003aae:	2308      	movs	r3, #8
 8003ab0:	77fb      	strb	r3, [r7, #31]
 8003ab2:	e147      	b.n	8003d44 <UART_SetConfig+0x348>
 8003ab4:	2310      	movs	r3, #16
 8003ab6:	77fb      	strb	r3, [r7, #31]
 8003ab8:	e144      	b.n	8003d44 <UART_SetConfig+0x348>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a83      	ldr	r2, [pc, #524]	; (8003ccc <UART_SetConfig+0x2d0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d132      	bne.n	8003b2a <UART_SetConfig+0x12e>
 8003ac4:	4b80      	ldr	r3, [pc, #512]	; (8003cc8 <UART_SetConfig+0x2cc>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aca:	f003 030c 	and.w	r3, r3, #12
 8003ace:	2b0c      	cmp	r3, #12
 8003ad0:	d828      	bhi.n	8003b24 <UART_SetConfig+0x128>
 8003ad2:	a201      	add	r2, pc, #4	; (adr r2, 8003ad8 <UART_SetConfig+0xdc>)
 8003ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad8:	08003b0d 	.word	0x08003b0d
 8003adc:	08003b25 	.word	0x08003b25
 8003ae0:	08003b25 	.word	0x08003b25
 8003ae4:	08003b25 	.word	0x08003b25
 8003ae8:	08003b19 	.word	0x08003b19
 8003aec:	08003b25 	.word	0x08003b25
 8003af0:	08003b25 	.word	0x08003b25
 8003af4:	08003b25 	.word	0x08003b25
 8003af8:	08003b13 	.word	0x08003b13
 8003afc:	08003b25 	.word	0x08003b25
 8003b00:	08003b25 	.word	0x08003b25
 8003b04:	08003b25 	.word	0x08003b25
 8003b08:	08003b1f 	.word	0x08003b1f
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	77fb      	strb	r3, [r7, #31]
 8003b10:	e118      	b.n	8003d44 <UART_SetConfig+0x348>
 8003b12:	2302      	movs	r3, #2
 8003b14:	77fb      	strb	r3, [r7, #31]
 8003b16:	e115      	b.n	8003d44 <UART_SetConfig+0x348>
 8003b18:	2304      	movs	r3, #4
 8003b1a:	77fb      	strb	r3, [r7, #31]
 8003b1c:	e112      	b.n	8003d44 <UART_SetConfig+0x348>
 8003b1e:	2308      	movs	r3, #8
 8003b20:	77fb      	strb	r3, [r7, #31]
 8003b22:	e10f      	b.n	8003d44 <UART_SetConfig+0x348>
 8003b24:	2310      	movs	r3, #16
 8003b26:	77fb      	strb	r3, [r7, #31]
 8003b28:	e10c      	b.n	8003d44 <UART_SetConfig+0x348>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a68      	ldr	r2, [pc, #416]	; (8003cd0 <UART_SetConfig+0x2d4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d120      	bne.n	8003b76 <UART_SetConfig+0x17a>
 8003b34:	4b64      	ldr	r3, [pc, #400]	; (8003cc8 <UART_SetConfig+0x2cc>)
 8003b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b3e:	2b30      	cmp	r3, #48	; 0x30
 8003b40:	d013      	beq.n	8003b6a <UART_SetConfig+0x16e>
 8003b42:	2b30      	cmp	r3, #48	; 0x30
 8003b44:	d814      	bhi.n	8003b70 <UART_SetConfig+0x174>
 8003b46:	2b20      	cmp	r3, #32
 8003b48:	d009      	beq.n	8003b5e <UART_SetConfig+0x162>
 8003b4a:	2b20      	cmp	r3, #32
 8003b4c:	d810      	bhi.n	8003b70 <UART_SetConfig+0x174>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <UART_SetConfig+0x15c>
 8003b52:	2b10      	cmp	r3, #16
 8003b54:	d006      	beq.n	8003b64 <UART_SetConfig+0x168>
 8003b56:	e00b      	b.n	8003b70 <UART_SetConfig+0x174>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	77fb      	strb	r3, [r7, #31]
 8003b5c:	e0f2      	b.n	8003d44 <UART_SetConfig+0x348>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	77fb      	strb	r3, [r7, #31]
 8003b62:	e0ef      	b.n	8003d44 <UART_SetConfig+0x348>
 8003b64:	2304      	movs	r3, #4
 8003b66:	77fb      	strb	r3, [r7, #31]
 8003b68:	e0ec      	b.n	8003d44 <UART_SetConfig+0x348>
 8003b6a:	2308      	movs	r3, #8
 8003b6c:	77fb      	strb	r3, [r7, #31]
 8003b6e:	e0e9      	b.n	8003d44 <UART_SetConfig+0x348>
 8003b70:	2310      	movs	r3, #16
 8003b72:	77fb      	strb	r3, [r7, #31]
 8003b74:	e0e6      	b.n	8003d44 <UART_SetConfig+0x348>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a56      	ldr	r2, [pc, #344]	; (8003cd4 <UART_SetConfig+0x2d8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d120      	bne.n	8003bc2 <UART_SetConfig+0x1c6>
 8003b80:	4b51      	ldr	r3, [pc, #324]	; (8003cc8 <UART_SetConfig+0x2cc>)
 8003b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b8a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b8c:	d013      	beq.n	8003bb6 <UART_SetConfig+0x1ba>
 8003b8e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b90:	d814      	bhi.n	8003bbc <UART_SetConfig+0x1c0>
 8003b92:	2b80      	cmp	r3, #128	; 0x80
 8003b94:	d009      	beq.n	8003baa <UART_SetConfig+0x1ae>
 8003b96:	2b80      	cmp	r3, #128	; 0x80
 8003b98:	d810      	bhi.n	8003bbc <UART_SetConfig+0x1c0>
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <UART_SetConfig+0x1a8>
 8003b9e:	2b40      	cmp	r3, #64	; 0x40
 8003ba0:	d006      	beq.n	8003bb0 <UART_SetConfig+0x1b4>
 8003ba2:	e00b      	b.n	8003bbc <UART_SetConfig+0x1c0>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	77fb      	strb	r3, [r7, #31]
 8003ba8:	e0cc      	b.n	8003d44 <UART_SetConfig+0x348>
 8003baa:	2302      	movs	r3, #2
 8003bac:	77fb      	strb	r3, [r7, #31]
 8003bae:	e0c9      	b.n	8003d44 <UART_SetConfig+0x348>
 8003bb0:	2304      	movs	r3, #4
 8003bb2:	77fb      	strb	r3, [r7, #31]
 8003bb4:	e0c6      	b.n	8003d44 <UART_SetConfig+0x348>
 8003bb6:	2308      	movs	r3, #8
 8003bb8:	77fb      	strb	r3, [r7, #31]
 8003bba:	e0c3      	b.n	8003d44 <UART_SetConfig+0x348>
 8003bbc:	2310      	movs	r3, #16
 8003bbe:	77fb      	strb	r3, [r7, #31]
 8003bc0:	e0c0      	b.n	8003d44 <UART_SetConfig+0x348>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a44      	ldr	r2, [pc, #272]	; (8003cd8 <UART_SetConfig+0x2dc>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d125      	bne.n	8003c18 <UART_SetConfig+0x21c>
 8003bcc:	4b3e      	ldr	r3, [pc, #248]	; (8003cc8 <UART_SetConfig+0x2cc>)
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bda:	d017      	beq.n	8003c0c <UART_SetConfig+0x210>
 8003bdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003be0:	d817      	bhi.n	8003c12 <UART_SetConfig+0x216>
 8003be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be6:	d00b      	beq.n	8003c00 <UART_SetConfig+0x204>
 8003be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bec:	d811      	bhi.n	8003c12 <UART_SetConfig+0x216>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <UART_SetConfig+0x1fe>
 8003bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf6:	d006      	beq.n	8003c06 <UART_SetConfig+0x20a>
 8003bf8:	e00b      	b.n	8003c12 <UART_SetConfig+0x216>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	77fb      	strb	r3, [r7, #31]
 8003bfe:	e0a1      	b.n	8003d44 <UART_SetConfig+0x348>
 8003c00:	2302      	movs	r3, #2
 8003c02:	77fb      	strb	r3, [r7, #31]
 8003c04:	e09e      	b.n	8003d44 <UART_SetConfig+0x348>
 8003c06:	2304      	movs	r3, #4
 8003c08:	77fb      	strb	r3, [r7, #31]
 8003c0a:	e09b      	b.n	8003d44 <UART_SetConfig+0x348>
 8003c0c:	2308      	movs	r3, #8
 8003c0e:	77fb      	strb	r3, [r7, #31]
 8003c10:	e098      	b.n	8003d44 <UART_SetConfig+0x348>
 8003c12:	2310      	movs	r3, #16
 8003c14:	77fb      	strb	r3, [r7, #31]
 8003c16:	e095      	b.n	8003d44 <UART_SetConfig+0x348>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a2f      	ldr	r2, [pc, #188]	; (8003cdc <UART_SetConfig+0x2e0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d125      	bne.n	8003c6e <UART_SetConfig+0x272>
 8003c22:	4b29      	ldr	r3, [pc, #164]	; (8003cc8 <UART_SetConfig+0x2cc>)
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c30:	d017      	beq.n	8003c62 <UART_SetConfig+0x266>
 8003c32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c36:	d817      	bhi.n	8003c68 <UART_SetConfig+0x26c>
 8003c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c3c:	d00b      	beq.n	8003c56 <UART_SetConfig+0x25a>
 8003c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c42:	d811      	bhi.n	8003c68 <UART_SetConfig+0x26c>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <UART_SetConfig+0x254>
 8003c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4c:	d006      	beq.n	8003c5c <UART_SetConfig+0x260>
 8003c4e:	e00b      	b.n	8003c68 <UART_SetConfig+0x26c>
 8003c50:	2301      	movs	r3, #1
 8003c52:	77fb      	strb	r3, [r7, #31]
 8003c54:	e076      	b.n	8003d44 <UART_SetConfig+0x348>
 8003c56:	2302      	movs	r3, #2
 8003c58:	77fb      	strb	r3, [r7, #31]
 8003c5a:	e073      	b.n	8003d44 <UART_SetConfig+0x348>
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	e070      	b.n	8003d44 <UART_SetConfig+0x348>
 8003c62:	2308      	movs	r3, #8
 8003c64:	77fb      	strb	r3, [r7, #31]
 8003c66:	e06d      	b.n	8003d44 <UART_SetConfig+0x348>
 8003c68:	2310      	movs	r3, #16
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e06a      	b.n	8003d44 <UART_SetConfig+0x348>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a1b      	ldr	r2, [pc, #108]	; (8003ce0 <UART_SetConfig+0x2e4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d138      	bne.n	8003cea <UART_SetConfig+0x2ee>
 8003c78:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <UART_SetConfig+0x2cc>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003c82:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c86:	d017      	beq.n	8003cb8 <UART_SetConfig+0x2bc>
 8003c88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c8c:	d82a      	bhi.n	8003ce4 <UART_SetConfig+0x2e8>
 8003c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c92:	d00b      	beq.n	8003cac <UART_SetConfig+0x2b0>
 8003c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c98:	d824      	bhi.n	8003ce4 <UART_SetConfig+0x2e8>
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <UART_SetConfig+0x2aa>
 8003c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca2:	d006      	beq.n	8003cb2 <UART_SetConfig+0x2b6>
 8003ca4:	e01e      	b.n	8003ce4 <UART_SetConfig+0x2e8>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	77fb      	strb	r3, [r7, #31]
 8003caa:	e04b      	b.n	8003d44 <UART_SetConfig+0x348>
 8003cac:	2302      	movs	r3, #2
 8003cae:	77fb      	strb	r3, [r7, #31]
 8003cb0:	e048      	b.n	8003d44 <UART_SetConfig+0x348>
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	77fb      	strb	r3, [r7, #31]
 8003cb6:	e045      	b.n	8003d44 <UART_SetConfig+0x348>
 8003cb8:	2308      	movs	r3, #8
 8003cba:	77fb      	strb	r3, [r7, #31]
 8003cbc:	e042      	b.n	8003d44 <UART_SetConfig+0x348>
 8003cbe:	bf00      	nop
 8003cc0:	efff69f3 	.word	0xefff69f3
 8003cc4:	40011000 	.word	0x40011000
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	40004400 	.word	0x40004400
 8003cd0:	40004800 	.word	0x40004800
 8003cd4:	40004c00 	.word	0x40004c00
 8003cd8:	40005000 	.word	0x40005000
 8003cdc:	40011400 	.word	0x40011400
 8003ce0:	40007800 	.word	0x40007800
 8003ce4:	2310      	movs	r3, #16
 8003ce6:	77fb      	strb	r3, [r7, #31]
 8003ce8:	e02c      	b.n	8003d44 <UART_SetConfig+0x348>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a72      	ldr	r2, [pc, #456]	; (8003eb8 <UART_SetConfig+0x4bc>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d125      	bne.n	8003d40 <UART_SetConfig+0x344>
 8003cf4:	4b71      	ldr	r3, [pc, #452]	; (8003ebc <UART_SetConfig+0x4c0>)
 8003cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cfa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003cfe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d02:	d017      	beq.n	8003d34 <UART_SetConfig+0x338>
 8003d04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d08:	d817      	bhi.n	8003d3a <UART_SetConfig+0x33e>
 8003d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d0e:	d00b      	beq.n	8003d28 <UART_SetConfig+0x32c>
 8003d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d14:	d811      	bhi.n	8003d3a <UART_SetConfig+0x33e>
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <UART_SetConfig+0x326>
 8003d1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d1e:	d006      	beq.n	8003d2e <UART_SetConfig+0x332>
 8003d20:	e00b      	b.n	8003d3a <UART_SetConfig+0x33e>
 8003d22:	2300      	movs	r3, #0
 8003d24:	77fb      	strb	r3, [r7, #31]
 8003d26:	e00d      	b.n	8003d44 <UART_SetConfig+0x348>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	77fb      	strb	r3, [r7, #31]
 8003d2c:	e00a      	b.n	8003d44 <UART_SetConfig+0x348>
 8003d2e:	2304      	movs	r3, #4
 8003d30:	77fb      	strb	r3, [r7, #31]
 8003d32:	e007      	b.n	8003d44 <UART_SetConfig+0x348>
 8003d34:	2308      	movs	r3, #8
 8003d36:	77fb      	strb	r3, [r7, #31]
 8003d38:	e004      	b.n	8003d44 <UART_SetConfig+0x348>
 8003d3a:	2310      	movs	r3, #16
 8003d3c:	77fb      	strb	r3, [r7, #31]
 8003d3e:	e001      	b.n	8003d44 <UART_SetConfig+0x348>
 8003d40:	2310      	movs	r3, #16
 8003d42:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d4c:	d15b      	bne.n	8003e06 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003d4e:	7ffb      	ldrb	r3, [r7, #31]
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d828      	bhi.n	8003da6 <UART_SetConfig+0x3aa>
 8003d54:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <UART_SetConfig+0x360>)
 8003d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5a:	bf00      	nop
 8003d5c:	08003d81 	.word	0x08003d81
 8003d60:	08003d89 	.word	0x08003d89
 8003d64:	08003d91 	.word	0x08003d91
 8003d68:	08003da7 	.word	0x08003da7
 8003d6c:	08003d97 	.word	0x08003d97
 8003d70:	08003da7 	.word	0x08003da7
 8003d74:	08003da7 	.word	0x08003da7
 8003d78:	08003da7 	.word	0x08003da7
 8003d7c:	08003d9f 	.word	0x08003d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d80:	f7fe fc1c 	bl	80025bc <HAL_RCC_GetPCLK1Freq>
 8003d84:	61b8      	str	r0, [r7, #24]
        break;
 8003d86:	e013      	b.n	8003db0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d88:	f7fe fc2c 	bl	80025e4 <HAL_RCC_GetPCLK2Freq>
 8003d8c:	61b8      	str	r0, [r7, #24]
        break;
 8003d8e:	e00f      	b.n	8003db0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d90:	4b4b      	ldr	r3, [pc, #300]	; (8003ec0 <UART_SetConfig+0x4c4>)
 8003d92:	61bb      	str	r3, [r7, #24]
        break;
 8003d94:	e00c      	b.n	8003db0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d96:	f7fe faff 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8003d9a:	61b8      	str	r0, [r7, #24]
        break;
 8003d9c:	e008      	b.n	8003db0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da2:	61bb      	str	r3, [r7, #24]
        break;
 8003da4:	e004      	b.n	8003db0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	77bb      	strb	r3, [r7, #30]
        break;
 8003dae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d074      	beq.n	8003ea0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	005a      	lsls	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	085b      	lsrs	r3, r3, #1
 8003dc0:	441a      	add	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	2b0f      	cmp	r3, #15
 8003dd0:	d916      	bls.n	8003e00 <UART_SetConfig+0x404>
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd8:	d212      	bcs.n	8003e00 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	f023 030f 	bic.w	r3, r3, #15
 8003de2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	085b      	lsrs	r3, r3, #1
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	89fb      	ldrh	r3, [r7, #14]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	89fa      	ldrh	r2, [r7, #14]
 8003dfc:	60da      	str	r2, [r3, #12]
 8003dfe:	e04f      	b.n	8003ea0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	77bb      	strb	r3, [r7, #30]
 8003e04:	e04c      	b.n	8003ea0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e06:	7ffb      	ldrb	r3, [r7, #31]
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d828      	bhi.n	8003e5e <UART_SetConfig+0x462>
 8003e0c:	a201      	add	r2, pc, #4	; (adr r2, 8003e14 <UART_SetConfig+0x418>)
 8003e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e12:	bf00      	nop
 8003e14:	08003e39 	.word	0x08003e39
 8003e18:	08003e41 	.word	0x08003e41
 8003e1c:	08003e49 	.word	0x08003e49
 8003e20:	08003e5f 	.word	0x08003e5f
 8003e24:	08003e4f 	.word	0x08003e4f
 8003e28:	08003e5f 	.word	0x08003e5f
 8003e2c:	08003e5f 	.word	0x08003e5f
 8003e30:	08003e5f 	.word	0x08003e5f
 8003e34:	08003e57 	.word	0x08003e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e38:	f7fe fbc0 	bl	80025bc <HAL_RCC_GetPCLK1Freq>
 8003e3c:	61b8      	str	r0, [r7, #24]
        break;
 8003e3e:	e013      	b.n	8003e68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e40:	f7fe fbd0 	bl	80025e4 <HAL_RCC_GetPCLK2Freq>
 8003e44:	61b8      	str	r0, [r7, #24]
        break;
 8003e46:	e00f      	b.n	8003e68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e48:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <UART_SetConfig+0x4c4>)
 8003e4a:	61bb      	str	r3, [r7, #24]
        break;
 8003e4c:	e00c      	b.n	8003e68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e4e:	f7fe faa3 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8003e52:	61b8      	str	r0, [r7, #24]
        break;
 8003e54:	e008      	b.n	8003e68 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e5a:	61bb      	str	r3, [r7, #24]
        break;
 8003e5c:	e004      	b.n	8003e68 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	77bb      	strb	r3, [r7, #30]
        break;
 8003e66:	bf00      	nop
    }

    if (pclk != 0U)
 8003e68:	69bb      	ldr	r3, [r7, #24]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d018      	beq.n	8003ea0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	085a      	lsrs	r2, r3, #1
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	441a      	add	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	2b0f      	cmp	r3, #15
 8003e86:	d909      	bls.n	8003e9c <UART_SetConfig+0x4a0>
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e8e:	d205      	bcs.n	8003e9c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60da      	str	r2, [r3, #12]
 8003e9a:	e001      	b.n	8003ea0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003eac:	7fbb      	ldrb	r3, [r7, #30]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3720      	adds	r7, #32
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40007c00 	.word	0x40007c00
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	00f42400 	.word	0x00f42400

08003ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d01a      	beq.n	8003fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fc2:	d10a      	bne.n	8003fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00a      	beq.n	8003ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	605a      	str	r2, [r3, #4]
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af02      	add	r7, sp, #8
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004018:	f7fd f822 	bl	8001060 <HAL_GetTick>
 800401c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b08      	cmp	r3, #8
 800402a:	d10e      	bne.n	800404a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800402c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f81b 	bl	8004076 <UART_WaitOnFlagUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e011      	b.n	800406e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2220      	movs	r2, #32
 800404e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b09c      	sub	sp, #112	; 0x70
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	603b      	str	r3, [r7, #0]
 8004082:	4613      	mov	r3, r2
 8004084:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004086:	e0a7      	b.n	80041d8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800408a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408e:	f000 80a3 	beq.w	80041d8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004092:	f7fc ffe5 	bl	8001060 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800409e:	429a      	cmp	r2, r3
 80040a0:	d302      	bcc.n	80040a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80040a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d13f      	bne.n	8004128 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040b0:	e853 3f00 	ldrex	r3, [r3]
 80040b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80040b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040bc:	667b      	str	r3, [r7, #100]	; 0x64
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040ce:	e841 2300 	strex	r3, r2, [r1]
 80040d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80040d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1e6      	bne.n	80040a8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3308      	adds	r3, #8
 80040e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	f023 0301 	bic.w	r3, r3, #1
 80040f0:	663b      	str	r3, [r7, #96]	; 0x60
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3308      	adds	r3, #8
 80040f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80040fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004100:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e5      	bne.n	80040da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2220      	movs	r2, #32
 8004112:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2220      	movs	r2, #32
 8004118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e068      	b.n	80041fa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b00      	cmp	r3, #0
 8004134:	d050      	beq.n	80041d8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004140:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004144:	d148      	bne.n	80041d8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800414e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004164:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800416e:	637b      	str	r3, [r7, #52]	; 0x34
 8004170:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004172:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800417c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1e6      	bne.n	8004150 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	3308      	adds	r3, #8
 8004188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	613b      	str	r3, [r7, #16]
   return(result);
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f023 0301 	bic.w	r3, r3, #1
 8004198:	66bb      	str	r3, [r7, #104]	; 0x68
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3308      	adds	r3, #8
 80041a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041a2:	623a      	str	r2, [r7, #32]
 80041a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	69f9      	ldr	r1, [r7, #28]
 80041a8:	6a3a      	ldr	r2, [r7, #32]
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e5      	bne.n	8004182 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2220      	movs	r2, #32
 80041c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e010      	b.n	80041fa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69da      	ldr	r2, [r3, #28]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	4013      	ands	r3, r2
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	bf0c      	ite	eq
 80041e8:	2301      	moveq	r3, #1
 80041ea:	2300      	movne	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	461a      	mov	r2, r3
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	f43f af48 	beq.w	8004088 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3770      	adds	r7, #112	; 0x70
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004204:	b480      	push	{r7}
 8004206:	b097      	sub	sp, #92	; 0x5c
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	4613      	mov	r3, r2
 8004210:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	88fa      	ldrh	r2, [r7, #6]
 800421c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	88fa      	ldrh	r2, [r7, #6]
 8004224:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004236:	d10e      	bne.n	8004256 <UART_Start_Receive_IT+0x52>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d105      	bne.n	800424c <UART_Start_Receive_IT+0x48>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004246:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800424a:	e02d      	b.n	80042a8 <UART_Start_Receive_IT+0xa4>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	22ff      	movs	r2, #255	; 0xff
 8004250:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004254:	e028      	b.n	80042a8 <UART_Start_Receive_IT+0xa4>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10d      	bne.n	800427a <UART_Start_Receive_IT+0x76>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d104      	bne.n	8004270 <UART_Start_Receive_IT+0x6c>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	22ff      	movs	r2, #255	; 0xff
 800426a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800426e:	e01b      	b.n	80042a8 <UART_Start_Receive_IT+0xa4>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	227f      	movs	r2, #127	; 0x7f
 8004274:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004278:	e016      	b.n	80042a8 <UART_Start_Receive_IT+0xa4>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004282:	d10d      	bne.n	80042a0 <UART_Start_Receive_IT+0x9c>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d104      	bne.n	8004296 <UART_Start_Receive_IT+0x92>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	227f      	movs	r2, #127	; 0x7f
 8004290:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004294:	e008      	b.n	80042a8 <UART_Start_Receive_IT+0xa4>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	223f      	movs	r2, #63	; 0x3f
 800429a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800429e:	e003      	b.n	80042a8 <UART_Start_Receive_IT+0xa4>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2222      	movs	r2, #34	; 0x22
 80042b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3308      	adds	r3, #8
 80042be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ca:	f043 0301 	orr.w	r3, r3, #1
 80042ce:	657b      	str	r3, [r7, #84]	; 0x54
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3308      	adds	r3, #8
 80042d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80042d8:	64ba      	str	r2, [r7, #72]	; 0x48
 80042da:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042e0:	e841 2300 	strex	r3, r2, [r1]
 80042e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e5      	bne.n	80042b8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f4:	d107      	bne.n	8004306 <UART_Start_Receive_IT+0x102>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d103      	bne.n	8004306 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4a21      	ldr	r2, [pc, #132]	; (8004388 <UART_Start_Receive_IT+0x184>)
 8004302:	669a      	str	r2, [r3, #104]	; 0x68
 8004304:	e002      	b.n	800430c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4a20      	ldr	r2, [pc, #128]	; (800438c <UART_Start_Receive_IT+0x188>)
 800430a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d019      	beq.n	8004348 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004328:	64fb      	str	r3, [r7, #76]	; 0x4c
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004332:	637b      	str	r3, [r7, #52]	; 0x34
 8004334:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004336:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004338:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800433a:	e841 2300 	strex	r3, r2, [r1]
 800433e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1e6      	bne.n	8004314 <UART_Start_Receive_IT+0x110>
 8004346:	e018      	b.n	800437a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	e853 3f00 	ldrex	r3, [r3]
 8004354:	613b      	str	r3, [r7, #16]
   return(result);
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f043 0320 	orr.w	r3, r3, #32
 800435c:	653b      	str	r3, [r7, #80]	; 0x50
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	461a      	mov	r2, r3
 8004364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004366:	623b      	str	r3, [r7, #32]
 8004368:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436a:	69f9      	ldr	r1, [r7, #28]
 800436c:	6a3a      	ldr	r2, [r7, #32]
 800436e:	e841 2300 	strex	r3, r2, [r1]
 8004372:	61bb      	str	r3, [r7, #24]
   return(result);
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1e6      	bne.n	8004348 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	375c      	adds	r7, #92	; 0x5c
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr
 8004388:	080047b5 	.word	0x080047b5
 800438c:	0800464f 	.word	0x0800464f

08004390 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004390:	b480      	push	{r7}
 8004392:	b095      	sub	sp, #84	; 0x54
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b6:	643b      	str	r3, [r7, #64]	; 0x40
 80043b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e6      	bne.n	8004398 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3308      	adds	r3, #8
 80043d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	e853 3f00 	ldrex	r3, [r3]
 80043d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	f023 0301 	bic.w	r3, r3, #1
 80043e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3308      	adds	r3, #8
 80043e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f2:	e841 2300 	strex	r3, r2, [r1]
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e5      	bne.n	80043ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004402:	2b01      	cmp	r3, #1
 8004404:	d118      	bne.n	8004438 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	e853 3f00 	ldrex	r3, [r3]
 8004412:	60bb      	str	r3, [r7, #8]
   return(result);
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f023 0310 	bic.w	r3, r3, #16
 800441a:	647b      	str	r3, [r7, #68]	; 0x44
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	6979      	ldr	r1, [r7, #20]
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	613b      	str	r3, [r7, #16]
   return(result);
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e6      	bne.n	8004406 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800444c:	bf00      	nop
 800444e:	3754      	adds	r7, #84	; 0x54
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004464:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f7ff faaa 	bl	80039d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800447c:	bf00      	nop
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004484:	b480      	push	{r7}
 8004486:	b08f      	sub	sp, #60	; 0x3c
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004490:	2b21      	cmp	r3, #33	; 0x21
 8004492:	d14c      	bne.n	800452e <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d132      	bne.n	8004506 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	e853 3f00 	ldrex	r3, [r3]
 80044ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044b4:	637b      	str	r3, [r7, #52]	; 0x34
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	461a      	mov	r2, r3
 80044bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044c0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044c6:	e841 2300 	strex	r3, r2, [r1]
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1e6      	bne.n	80044a0 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	e853 3f00 	ldrex	r3, [r3]
 80044de:	60bb      	str	r3, [r7, #8]
   return(result);
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044e6:	633b      	str	r3, [r7, #48]	; 0x30
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	61bb      	str	r3, [r7, #24]
 80044f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f4:	6979      	ldr	r1, [r7, #20]
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	e841 2300 	strex	r3, r2, [r1]
 80044fc:	613b      	str	r3, [r7, #16]
   return(result);
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e6      	bne.n	80044d2 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004504:	e013      	b.n	800452e <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450a:	781a      	ldrb	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004516:	1c5a      	adds	r2, r3, #1
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004522:	b29b      	uxth	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800452e:	bf00      	nop
 8004530:	373c      	adds	r7, #60	; 0x3c
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800453a:	b480      	push	{r7}
 800453c:	b091      	sub	sp, #68	; 0x44
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004546:	2b21      	cmp	r3, #33	; 0x21
 8004548:	d151      	bne.n	80045ee <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004550:	b29b      	uxth	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d132      	bne.n	80045bc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	e853 3f00 	ldrex	r3, [r3]
 8004562:	623b      	str	r3, [r7, #32]
   return(result);
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800456a:	63bb      	str	r3, [r7, #56]	; 0x38
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	461a      	mov	r2, r3
 8004572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004574:	633b      	str	r3, [r7, #48]	; 0x30
 8004576:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004578:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800457a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800457c:	e841 2300 	strex	r3, r2, [r1]
 8004580:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1e6      	bne.n	8004556 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	e853 3f00 	ldrex	r3, [r3]
 8004594:	60fb      	str	r3, [r7, #12]
   return(result);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800459c:	637b      	str	r3, [r7, #52]	; 0x34
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a6:	61fb      	str	r3, [r7, #28]
 80045a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045aa:	69b9      	ldr	r1, [r7, #24]
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	e841 2300 	strex	r3, r2, [r1]
 80045b2:	617b      	str	r3, [r7, #20]
   return(result);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e6      	bne.n	8004588 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80045ba:	e018      	b.n	80045ee <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80045c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	461a      	mov	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045d0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d6:	1c9a      	adds	r2, r3, #2
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80045ee:	bf00      	nop
 80045f0:	3744      	adds	r7, #68	; 0x44
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b088      	sub	sp, #32
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	e853 3f00 	ldrex	r3, [r3]
 800460e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	461a      	mov	r2, r3
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	6979      	ldr	r1, [r7, #20]
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	613b      	str	r3, [r7, #16]
   return(result);
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e6      	bne.n	8004602 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7fb ffdb 	bl	80005fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004646:	bf00      	nop
 8004648:	3720      	adds	r7, #32
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b096      	sub	sp, #88	; 0x58
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800465c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004666:	2b22      	cmp	r3, #34	; 0x22
 8004668:	f040 8098 	bne.w	800479c <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004676:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800467a:	b2d9      	uxtb	r1, r3
 800467c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004680:	b2da      	uxtb	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004686:	400a      	ands	r2, r1
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d17b      	bne.n	80047ac <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046c8:	653b      	str	r3, [r7, #80]	; 0x50
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046d2:	647b      	str	r3, [r7, #68]	; 0x44
 80046d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e6      	bne.n	80046b4 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3308      	adds	r3, #8
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	623b      	str	r3, [r7, #32]
   return(result);
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	f023 0301 	bic.w	r3, r3, #1
 80046fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3308      	adds	r3, #8
 8004704:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004706:	633a      	str	r2, [r7, #48]	; 0x30
 8004708:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800470c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800470e:	e841 2300 	strex	r3, r2, [r1]
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1e5      	bne.n	80046e6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2220      	movs	r2, #32
 800471e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004732:	2b01      	cmp	r3, #1
 8004734:	d12e      	bne.n	8004794 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	e853 3f00 	ldrex	r3, [r3]
 8004748:	60fb      	str	r3, [r7, #12]
   return(result);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f023 0310 	bic.w	r3, r3, #16
 8004750:	64bb      	str	r3, [r7, #72]	; 0x48
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	461a      	mov	r2, r3
 8004758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800475a:	61fb      	str	r3, [r7, #28]
 800475c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475e:	69b9      	ldr	r1, [r7, #24]
 8004760:	69fa      	ldr	r2, [r7, #28]
 8004762:	e841 2300 	strex	r3, r2, [r1]
 8004766:	617b      	str	r3, [r7, #20]
   return(result);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1e6      	bne.n	800473c <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	f003 0310 	and.w	r3, r3, #16
 8004778:	2b10      	cmp	r3, #16
 800477a:	d103      	bne.n	8004784 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2210      	movs	r2, #16
 8004782:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800478a:	4619      	mov	r1, r3
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff f929 	bl	80039e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004792:	e00b      	b.n	80047ac <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7fb ff05 	bl	80005a4 <HAL_UART_RxCpltCallback>
}
 800479a:	e007      	b.n	80047ac <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699a      	ldr	r2, [r3, #24]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0208 	orr.w	r2, r2, #8
 80047aa:	619a      	str	r2, [r3, #24]
}
 80047ac:	bf00      	nop
 80047ae:	3758      	adds	r7, #88	; 0x58
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b096      	sub	sp, #88	; 0x58
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047c2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047cc:	2b22      	cmp	r3, #34	; 0x22
 80047ce:	f040 8098 	bne.w	8004902 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80047e2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80047e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80047ea:	4013      	ands	r3, r2
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f6:	1c9a      	adds	r2, r3, #2
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004802:	b29b      	uxth	r3, r3
 8004804:	3b01      	subs	r3, #1
 8004806:	b29a      	uxth	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004814:	b29b      	uxth	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d17b      	bne.n	8004912 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004822:	e853 3f00 	ldrex	r3, [r3]
 8004826:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800482e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	461a      	mov	r2, r3
 8004836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004838:	643b      	str	r3, [r7, #64]	; 0x40
 800483a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800483e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004840:	e841 2300 	strex	r3, r2, [r1]
 8004844:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1e6      	bne.n	800481a <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3308      	adds	r3, #8
 8004852:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004854:	6a3b      	ldr	r3, [r7, #32]
 8004856:	e853 3f00 	ldrex	r3, [r3]
 800485a:	61fb      	str	r3, [r7, #28]
   return(result);
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f023 0301 	bic.w	r3, r3, #1
 8004862:	64bb      	str	r3, [r7, #72]	; 0x48
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3308      	adds	r3, #8
 800486a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800486c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800486e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004870:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004874:	e841 2300 	strex	r3, r2, [r1]
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1e5      	bne.n	800484c <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004898:	2b01      	cmp	r3, #1
 800489a:	d12e      	bne.n	80048fa <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	e853 3f00 	ldrex	r3, [r3]
 80048ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f023 0310 	bic.w	r3, r3, #16
 80048b6:	647b      	str	r3, [r7, #68]	; 0x44
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c0:	61bb      	str	r3, [r7, #24]
 80048c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	6979      	ldr	r1, [r7, #20]
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	e841 2300 	strex	r3, r2, [r1]
 80048cc:	613b      	str	r3, [r7, #16]
   return(result);
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e6      	bne.n	80048a2 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	f003 0310 	and.w	r3, r3, #16
 80048de:	2b10      	cmp	r3, #16
 80048e0:	d103      	bne.n	80048ea <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2210      	movs	r2, #16
 80048e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048f0:	4619      	mov	r1, r3
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7ff f876 	bl	80039e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048f8:	e00b      	b.n	8004912 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7fb fe52 	bl	80005a4 <HAL_UART_RxCpltCallback>
}
 8004900:	e007      	b.n	8004912 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	699a      	ldr	r2, [r3, #24]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0208 	orr.w	r2, r2, #8
 8004910:	619a      	str	r2, [r3, #24]
}
 8004912:	bf00      	nop
 8004914:	3758      	adds	r7, #88	; 0x58
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
	...

0800491c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800491c:	b084      	sub	sp, #16
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	f107 001c 	add.w	r0, r7, #28
 800492a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800492e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004930:	2b01      	cmp	r3, #1
 8004932:	d126      	bne.n	8004982 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004938:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	4b38      	ldr	r3, [pc, #224]	; (8004a28 <USB_CoreInit+0x10c>)
 8004946:	4013      	ands	r3, r2
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f043 0210 	orr.w	r2, r3, #16
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004966:	2b01      	cmp	r3, #1
 8004968:	d105      	bne.n	8004976 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fad0 	bl	8004f1c <USB_CoreReset>
 800497c:	4603      	mov	r3, r0
 800497e:	73fb      	strb	r3, [r7, #15]
 8004980:	e03a      	b.n	80049f8 <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004984:	2b03      	cmp	r3, #3
 8004986:	d126      	bne.n	80049d6 <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	4b23      	ldr	r3, [pc, #140]	; (8004a28 <USB_CoreInit+0x10c>)
 800499a:	4013      	ands	r3, r2
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f023 0210 	bic.w	r2, r3, #16
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 80049b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d105      	bne.n	80049ca <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 faa6 	bl	8004f1c <USB_CoreReset>
 80049d0:	4603      	mov	r3, r0
 80049d2:	73fb      	strb	r3, [r7, #15]
 80049d4:	e010      	b.n	80049f8 <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fa9a 	bl	8004f1c <USB_CoreReset>
 80049e8:	4603      	mov	r3, r0
 80049ea:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d10b      	bne.n	8004a16 <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f043 0206 	orr.w	r2, r3, #6
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f043 0220 	orr.w	r2, r3, #32
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a22:	b004      	add	sp, #16
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	ffbdffbf 	.word	0xffbdffbf

08004a2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b083      	sub	sp, #12
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f023 0201 	bic.w	r2, r3, #1
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	460b      	mov	r3, r1
 8004a58:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a6a:	78fb      	ldrb	r3, [r7, #3]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d115      	bne.n	8004a9c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a7c:	2001      	movs	r0, #1
 8004a7e:	f7fc fafb 	bl	8001078 <HAL_Delay>
      ms++;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	3301      	adds	r3, #1
 8004a86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fa39 	bl	8004f00 <USB_GetMode>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d01e      	beq.n	8004ad2 <USB_SetCurrentMode+0x84>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b31      	cmp	r3, #49	; 0x31
 8004a98:	d9f0      	bls.n	8004a7c <USB_SetCurrentMode+0x2e>
 8004a9a:	e01a      	b.n	8004ad2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d115      	bne.n	8004ace <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004aae:	2001      	movs	r0, #1
 8004ab0:	f7fc fae2 	bl	8001078 <HAL_Delay>
      ms++;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fa20 	bl	8004f00 <USB_GetMode>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d005      	beq.n	8004ad2 <USB_SetCurrentMode+0x84>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b31      	cmp	r3, #49	; 0x31
 8004aca:	d9f0      	bls.n	8004aae <USB_SetCurrentMode+0x60>
 8004acc:	e001      	b.n	8004ad2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e005      	b.n	8004ade <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2b32      	cmp	r3, #50	; 0x32
 8004ad6:	d101      	bne.n	8004adc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ae8:	b084      	sub	sp, #16
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b086      	sub	sp, #24
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004af6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b02:	2300      	movs	r3, #0
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	e009      	b.n	8004b1c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	3340      	adds	r3, #64	; 0x40
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	2200      	movs	r2, #0
 8004b14:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	2b0e      	cmp	r3, #14
 8004b20:	d9f2      	bls.n	8004b08 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d11c      	bne.n	8004b62 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b36:	f043 0302 	orr.w	r3, r3, #2
 8004b3a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b40:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e005      	b.n	8004b6e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b66:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b74:	461a      	mov	r2, r3
 8004b76:	2300      	movs	r3, #0
 8004b78:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b80:	4619      	mov	r1, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b88:	461a      	mov	r2, r3
 8004b8a:	680b      	ldr	r3, [r1, #0]
 8004b8c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d10c      	bne.n	8004bae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d104      	bne.n	8004ba4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f975 	bl	8004e8c <USB_SetDevSpeed>
 8004ba2:	e018      	b.n	8004bd6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f970 	bl	8004e8c <USB_SetDevSpeed>
 8004bac:	e013      	b.n	8004bd6 <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d10c      	bne.n	8004bce <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d104      	bne.n	8004bc4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004bba:	2100      	movs	r1, #0
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f965 	bl	8004e8c <USB_SetDevSpeed>
 8004bc2:	e008      	b.n	8004bd6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f960 	bl	8004e8c <USB_SetDevSpeed>
 8004bcc:	e003      	b.n	8004bd6 <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004bce:	2103      	movs	r1, #3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f95b 	bl	8004e8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004bd6:	2110      	movs	r1, #16
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f8f3 	bl	8004dc4 <USB_FlushTxFifo>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 f91f 	bl	8004e2c <USB_FlushRxFifo>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfe:	461a      	mov	r2, r3
 8004c00:	2300      	movs	r3, #0
 8004c02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c16:	461a      	mov	r2, r3
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	e043      	b.n	8004caa <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c38:	d118      	bne.n	8004c6c <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	e013      	b.n	8004c7e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c62:	461a      	mov	r2, r3
 8004c64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	e008      	b.n	8004c7e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	015a      	lsls	r2, r3, #5
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c78:	461a      	mov	r2, r3
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ca2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d3b7      	bcc.n	8004c22 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	e043      	b.n	8004d40 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cce:	d118      	bne.n	8004d02 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10a      	bne.n	8004cec <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	e013      	b.n	8004d14 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	e008      	b.n	8004d14 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0e:	461a      	mov	r2, r3
 8004d10:	2300      	movs	r3, #0
 8004d12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d20:	461a      	mov	r2, r3
 8004d22:	2300      	movs	r3, #0
 8004d24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d32:	461a      	mov	r2, r3
 8004d34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	613b      	str	r3, [r7, #16]
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d3b7      	bcc.n	8004cb8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004d68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d105      	bne.n	8004d7c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	f043 0210 	orr.w	r2, r3, #16
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699a      	ldr	r2, [r3, #24]
 8004d80:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <USB_DevInit+0x2d4>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	f043 0208 	orr.w	r2, r3, #8
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d105      	bne.n	8004dac <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	699a      	ldr	r2, [r3, #24]
 8004da4:	4b06      	ldr	r3, [pc, #24]	; (8004dc0 <USB_DevInit+0x2d8>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3718      	adds	r7, #24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004db8:	b004      	add	sp, #16
 8004dba:	4770      	bx	lr
 8004dbc:	803c3800 	.word	0x803c3800
 8004dc0:	40000004 	.word	0x40000004

08004dc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4a13      	ldr	r2, [pc, #76]	; (8004e28 <USB_FlushTxFifo+0x64>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d901      	bls.n	8004de4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e01b      	b.n	8004e1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	daf2      	bge.n	8004dd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	019b      	lsls	r3, r3, #6
 8004df4:	f043 0220 	orr.w	r2, r3, #32
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4a08      	ldr	r2, [pc, #32]	; (8004e28 <USB_FlushTxFifo+0x64>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e006      	b.n	8004e1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0320 	and.w	r3, r3, #32
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d0f0      	beq.n	8004dfc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr
 8004e28:	00030d40 	.word	0x00030d40

08004e2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	4a11      	ldr	r2, [pc, #68]	; (8004e88 <USB_FlushRxFifo+0x5c>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d901      	bls.n	8004e4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e018      	b.n	8004e7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	daf2      	bge.n	8004e38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2210      	movs	r2, #16
 8004e5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4a08      	ldr	r2, [pc, #32]	; (8004e88 <USB_FlushRxFifo+0x5c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d901      	bls.n	8004e6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e006      	b.n	8004e7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b10      	cmp	r3, #16
 8004e78:	d0f0      	beq.n	8004e5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	00030d40 	.word	0x00030d40

08004e8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b085      	sub	sp, #20
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	460b      	mov	r3, r1
 8004e96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	68f9      	ldr	r1, [r7, #12]
 8004ea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eac:	4313      	orrs	r3, r2
 8004eae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3714      	adds	r7, #20
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	b085      	sub	sp, #20
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ed8:	f023 0303 	bic.w	r3, r3, #3
 8004edc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eec:	f043 0302 	orr.w	r3, r3, #2
 8004ef0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4a13      	ldr	r2, [pc, #76]	; (8004f80 <USB_CoreReset+0x64>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e01b      	b.n	8004f72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	daf2      	bge.n	8004f28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	f043 0201 	orr.w	r2, r3, #1
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3301      	adds	r3, #1
 8004f56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <USB_CoreReset+0x64>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d901      	bls.n	8004f64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e006      	b.n	8004f72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d0f0      	beq.n	8004f52 <USB_CoreReset+0x36>

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	00030d40 	.word	0x00030d40

08004f84 <memset>:
 8004f84:	4402      	add	r2, r0
 8004f86:	4603      	mov	r3, r0
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d100      	bne.n	8004f8e <memset+0xa>
 8004f8c:	4770      	bx	lr
 8004f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f92:	e7f9      	b.n	8004f88 <memset+0x4>

08004f94 <__libc_init_array>:
 8004f94:	b570      	push	{r4, r5, r6, lr}
 8004f96:	4d0d      	ldr	r5, [pc, #52]	; (8004fcc <__libc_init_array+0x38>)
 8004f98:	4c0d      	ldr	r4, [pc, #52]	; (8004fd0 <__libc_init_array+0x3c>)
 8004f9a:	1b64      	subs	r4, r4, r5
 8004f9c:	10a4      	asrs	r4, r4, #2
 8004f9e:	2600      	movs	r6, #0
 8004fa0:	42a6      	cmp	r6, r4
 8004fa2:	d109      	bne.n	8004fb8 <__libc_init_array+0x24>
 8004fa4:	4d0b      	ldr	r5, [pc, #44]	; (8004fd4 <__libc_init_array+0x40>)
 8004fa6:	4c0c      	ldr	r4, [pc, #48]	; (8004fd8 <__libc_init_array+0x44>)
 8004fa8:	f000 f818 	bl	8004fdc <_init>
 8004fac:	1b64      	subs	r4, r4, r5
 8004fae:	10a4      	asrs	r4, r4, #2
 8004fb0:	2600      	movs	r6, #0
 8004fb2:	42a6      	cmp	r6, r4
 8004fb4:	d105      	bne.n	8004fc2 <__libc_init_array+0x2e>
 8004fb6:	bd70      	pop	{r4, r5, r6, pc}
 8004fb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fbc:	4798      	blx	r3
 8004fbe:	3601      	adds	r6, #1
 8004fc0:	e7ee      	b.n	8004fa0 <__libc_init_array+0xc>
 8004fc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc6:	4798      	blx	r3
 8004fc8:	3601      	adds	r6, #1
 8004fca:	e7f2      	b.n	8004fb2 <__libc_init_array+0x1e>
 8004fcc:	08005094 	.word	0x08005094
 8004fd0:	08005094 	.word	0x08005094
 8004fd4:	08005094 	.word	0x08005094
 8004fd8:	08005098 	.word	0x08005098

08004fdc <_init>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	bf00      	nop
 8004fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe2:	bc08      	pop	{r3}
 8004fe4:	469e      	mov	lr, r3
 8004fe6:	4770      	bx	lr

08004fe8 <_fini>:
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	bf00      	nop
 8004fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fee:	bc08      	pop	{r3}
 8004ff0:	469e      	mov	lr, r3
 8004ff2:	4770      	bx	lr
